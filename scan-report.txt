================================================================================
MCIPRO INDEX.HTML ANALYSIS REPORT
================================================================================

Total Issues Found: 5779


SYNTAX ISSUES (34)
--------------------------------------------------------------------------------

Line 1980: Potentially unterminated single-quoted string
  Content: // Common text mappings for elements that haven't been manually tagged
  Fix: Check string termination

Line 2358: Potentially unterminated single-quoted string
  Content: // Find current user's profile and update individual profile storage
  Fix: Check string termination

Line 2582: Potentially unterminated single-quoted string
  Content: // Update local storage with server's authoritative state - all as arrays
  Fix: Check string termination

Line 4051: Potentially unterminated single-quoted string
  Content: // Update each role's overview alert display
  Fix: Check string termination

Line 5333: Potentially unterminated single-quoted string
  Content: // For now, we'll use a data URL
  Fix: Check string termination

Line 5786: Potentially unterminated single-quoted string
  Content: <p class="text-sm text-gray-600">Select how you'd like to receive your order</p>
  Fix: Check string termination

Line 8581: Potentially unterminated single-quoted string
  Content: // Add event only if it doesn't already exist for the booking
  Fix: Check string termination

Line 10195: Potentially unterminated single-quoted string
  Content: // Initialize services array if it doesn't exist
  Fix: Check string termination

Line 13740: Potentially unterminated single-quoted string
  Content: // Update new caddy's current booking info
  Fix: Check string termination

Line 13962: Potentially unterminated single-quoted string
  Content: // In a real implementation, this would send push notification to caddy's device
  Fix: Check string termination

Line 13963: Potentially unterminated single-quoted string
  Content: // For now, we'll show a success message indicating the caddy has been notified
  Fix: Check string termination

Line 13966: Potentially unterminated single-quoted string
  Content: // Update caddy's notification queue (for when they check their dashboard)
  Fix: Check string termination

Line 14163: Potentially unterminated single-quoted string
  Content: <p class="text-sm text-blue-600">Get notified when ${caddie.name} becomes available. You'll have 10 
  Fix: Check string termination

Line 14201: Potentially unterminated single-quoted string
  Content: <p class="text-gray-600 mb-4">You're #${position} in line</p>
  Fix: Check string termination

Line 15542: Potentially unterminated single-quoted string
  Content: alert(`Successfully added to Ning's waitlist at position #${waitlistPosition}!
  Fix: Check string termination

Line 15799: Potentially unterminated single-quoted string
  Content: // Get golfer's current waitlist positions
  Fix: Check string termination

Line 15822: Potentially unterminated single-quoted string
  Content: // Get caddie's current bookings and waitlist
  Fix: Check string termination

Line 16175: Potentially unterminated single-quoted string
  Content: <textarea id="additionalInfo" name="additionalInfo" rows="3" class="w-full px-3 py-2 border border-g
  Fix: Check string termination

Line 16444: Potentially unterminated single-quoted string
  Content: <!-- Today's Tee Time -->
  Fix: Check string termination

Line 16447: Potentially unterminated single-quoted string
  Content: <h3 class="text-xl font-bold text-gray-900">Today's Tee Time</h3>
  Fix: Check string termination

Line 18162: Potentially unterminated single-quoted string
  Content: <h3 class="font-bold text-gray-900 mb-2">Today's Assignment</h3>
  Fix: Check string termination

Line 18195: Potentially unterminated single-quoted string
  Content: <h3 class="font-bold text-gray-900 mb-2">Today's Earnings</h3>
  Fix: Check string termination

Line 18262: Potentially unterminated single-quoted string
  Content: <h3 class="text-xl font-bold text-gray-900">Today's Assignments</h3>
  Fix: Check string termination

Line 18881: Potentially unterminated single-quoted string
  Content: <p class="text-sm text-gray-600">Today's Rounds</p>
  Fix: Check string termination

Line 19784: Potentially unterminated single-quoted string
  Content: <div class="text-purple-200">Today's Sales</div>
  Fix: Check string termination

Line 20198: Potentially unterminated single-quoted string
  Content: <p class="text-sm text-gray-600">Today's Sales</p>
  Fix: Check string termination

Line 20726: Potentially unterminated single-quoted string
  Content: <!-- Today's Tasks -->
  Fix: Check string termination

Line 20729: Potentially unterminated single-quoted string
  Content: <h3 class="text-lg font-semibold text-gray-800 mb-6">Today's Priority Tasks</h3>
  Fix: Check string termination

Line 21206: Potentially unterminated single-quoted string
  Content: // Set today's date as default
  Fix: Check string termination

Line 21569: Potentially unterminated single-quoted string
  Content: // Calculate distance using Leaflet's distance function (in meters)
  Fix: Check string termination

Line 22081: Potentially unterminated single-quoted string
  Content: // Set today's date as default
  Fix: Check string termination

Line 22195: Potentially unterminated single-quoted string
  Content: // last-resort route change if ScreenManager isn't ready yet
  Fix: Check string termination

Line 22239: Potentially unterminated single-quoted string
  Content: // 2) read cloud (best-effort; won't throw the page)
  Fix: Check string termination

Line 22372: Potentially unterminated single-quoted string
  Content: // expose safe globals used by the page's buttons
  Fix: Check string termination

PERFORMANCE ISSUES (26)
--------------------------------------------------------------------------------

Line 1957: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('[data-i18n]').forEach(element => {
  Fix: Cache selector results

Line 1963: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
  Fix: Cache selector results

Line 2061: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('option').forEach(option => {
  Fix: Cache selector results

Line 2075: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.language-btn').forEach(btn => {
  Fix: Cache selector results

Line 2881: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.screen').forEach(screen => {
  Fix: Cache selector results

Line 3879: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.emergency-fullscreen-overlay').forEach(el => el.remove());
  Fix: Cache selector results

Line 5715: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.food-category-btn').forEach(btn => {
  Fix: Cache selector results

Line 6393: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('[class*="fixed"][class*="inset-0"]').forEach(el => {
  Fix: Cache selector results

Line 7498: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.user-name-display').forEach(el => {
  Fix: Cache selector results

Line 7505: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Cache selector results

Line 7520: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Cache selector results

Line 7640: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('#profileModal').forEach(modal => modal.remove());
  Fix: Cache selector results

Line 8004: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.user-handicap').forEach(el => {
  Fix: Cache selector results

Line 8010: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.member-since').forEach(el => {
  Fix: Cache selector results

Line 8017: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Cache selector results

Line 8041: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.experience-level').forEach(el => {
  Fix: Cache selector results

Line 8047: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Cache selector results

Line 8866: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.schedule-filter-btn').forEach(btn => {
  Fix: Cache selector results

Line 9865: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Cache selector results

Line 10421: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Cache selector results

Line 12414: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.contact-item input[type="checkbox"]').forEach(cb => {
  Fix: Cache selector results

Line 14382: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.payment-option').forEach(opt => {
  Fix: Cache selector results

Line 14403: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.course-option, .payment-option').forEach(option => {
  Fix: Cache selector results

Line 14407: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('[data-caddie], [data-service]').forEach(option => {
  Fix: Cache selector results

Line 14845: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.course-option').forEach(option => {
  Fix: Cache selector results

Line 14848: querySelectorAll with forEach - consider caching
  Content: document.querySelectorAll('.course-option').forEach(opt => {
  Fix: Cache selector results

WARNING ISSUES (4616)
--------------------------------------------------------------------------------

Line 25: Unmatched braces: 1 open, 0 close
  Content: :root {
  Fix: Verify brace matching

Line 57: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 59: Unmatched braces: 1 open, 0 close
  Content: * {
  Fix: Verify brace matching

Line 63: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 65: Unmatched braces: 1 open, 0 close
  Content: body {
  Fix: Verify brace matching

Line 72: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 75: Unmatched braces: 1 open, 0 close
  Content: .screen {
  Fix: Verify brace matching

Line 79: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 81: Unmatched braces: 1 open, 0 close
  Content: .screen.active {
  Fix: Verify brace matching

Line 84: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 87: Unmatched braces: 1 open, 0 close
  Content: .tab-content {
  Fix: Verify brace matching

Line 89: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 91: Unmatched braces: 1 open, 0 close
  Content: .tab-content.active {
  Fix: Verify brace matching

Line 94: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 97: Unmatched braces: 1 open, 0 close
  Content: .glass-card {
  Fix: Verify brace matching

Line 103: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 105: Unmatched braces: 1 open, 0 close
  Content: .premium-gradient {
  Fix: Verify brace matching

Line 107: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 109: Unmatched braces: 1 open, 0 close
  Content: .hero-gradient {
  Fix: Verify brace matching

Line 111: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 113: Unmatched braces: 1 open, 0 close
  Content: .card-hover {
  Fix: Verify brace matching

Line 116: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 118: Unmatched braces: 1 open, 0 close
  Content: .card-hover:hover {
  Fix: Verify brace matching

Line 121: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 123: Unmatched braces: 1 open, 0 close
  Content: .btn-primary {
  Fix: Verify brace matching

Line 137: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 139: Unmatched braces: 1 open, 0 close
  Content: .btn-primary:hover {
  Fix: Verify brace matching

Line 143: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 145: Unmatched braces: 1 open, 0 close
  Content: .btn-secondary {
  Fix: Verify brace matching

Line 158: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 160: Unmatched braces: 1 open, 0 close
  Content: .btn-secondary:hover {
  Fix: Verify brace matching

Line 163: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 165: Unmatched braces: 1 open, 0 close
  Content: .btn-logout {
  Fix: Verify brace matching

Line 178: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 180: Unmatched braces: 1 open, 0 close
  Content: .btn-logout:hover {
  Fix: Verify brace matching

Line 183: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 185: Unmatched braces: 1 open, 0 close
  Content: .tab-button {
  Fix: Verify brace matching

Line 198: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 200: Unmatched braces: 1 open, 0 close
  Content: .tab-button:hover {
  Fix: Verify brace matching

Line 203: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 205: Unmatched braces: 1 open, 0 close
  Content: .tab-button.active {
  Fix: Verify brace matching

Line 210: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 212: Unmatched braces: 1 open, 0 close
  Content: .status-badge {
  Fix: Verify brace matching

Line 221: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 223: Unmatched braces: 1 open, 0 close
  Content: .status-confirmed {
  Fix: Verify brace matching

Line 226: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 228: Unmatched braces: 1 open, 0 close
  Content: .status-pending {
  Fix: Verify brace matching

Line 231: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 233: Unmatched braces: 1 open, 0 close
  Content: .status-cancelled {
  Fix: Verify brace matching

Line 236: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 238: Unmatched braces: 1 open, 0 close
  Content: .metric-card {
  Fix: Verify brace matching

Line 245: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 247: Unmatched braces: 1 open, 0 close
  Content: .metric-card:hover {
  Fix: Verify brace matching

Line 250: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 252: Unmatched braces: 1 open, 0 close
  Content: .metric-value {
  Fix: Verify brace matching

Line 258: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 260: Unmatched braces: 1 open, 0 close
  Content: .metric-label {
  Fix: Verify brace matching

Line 266: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 268: Unmatched braces: 1 open, 0 close
  Content: .line-login-btn {
  Fix: Verify brace matching

Line 285: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 287: Unmatched braces: 1 open, 0 close
  Content: .line-login-btn::before {
  Fix: Verify brace matching

Line 296: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 298: Unmatched braces: 1 open, 0 close
  Content: .line-login-btn:hover::before {
  Fix: Verify brace matching

Line 300: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 302: Unmatched braces: 1 open, 0 close
  Content: .line-login-btn:hover {
  Fix: Verify brace matching

Line 306: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 308: Unmatched braces: 1 open, 0 close
  Content: .otp-input {
  Fix: Verify brace matching

Line 318: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 320: Unmatched braces: 1 open, 0 close
  Content: .otp-input:focus {
  Fix: Verify brace matching

Line 325: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 328: Unmatched braces: 1 open, 0 close
  Content: .loading-overlay {
  Fix: Verify brace matching

Line 337: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 339: Unmatched braces: 1 open, 0 close
  Content: .spinner {
  Fix: Verify brace matching

Line 346: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 348: Unmatched braces: 1 open, 0 close
  Content: @keyframes spin {
  Fix: Verify brace matching

Line 351: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 353: Unmatched braces: 1 open, 0 close
  Content: @keyframes fadeIn {
  Fix: Verify brace matching

Line 354: Unmatched braces: 1 open, 0 close
  Content: from {
  Fix: Verify brace matching

Line 357: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 358: Unmatched braces: 1 open, 0 close
  Content: to {
  Fix: Verify brace matching

Line 361: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 362: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 364: Unmatched braces: 1 open, 0 close
  Content: @keyframes slideUp {
  Fix: Verify brace matching

Line 365: Unmatched braces: 1 open, 0 close
  Content: from {
  Fix: Verify brace matching

Line 368: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 369: Unmatched braces: 1 open, 0 close
  Content: to {
  Fix: Verify brace matching

Line 372: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 373: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 376: Unmatched braces: 1 open, 0 close
  Content: .form-input {
  Fix: Verify brace matching

Line 385: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 387: Unmatched braces: 1 open, 0 close
  Content: .form-input:focus {
  Fix: Verify brace matching

Line 391: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 393: Unmatched braces: 1 open, 0 close
  Content: .form-label {
  Fix: Verify brace matching

Line 401: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 404: Unmatched braces: 1 open, 0 close
  Content: @media (max-width: 768px) {
  Fix: Verify brace matching

Line 405: Unmatched braces: 1 open, 0 close
  Content: .metric-card {
  Fix: Verify brace matching

Line 407: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 409: Unmatched braces: 1 open, 0 close
  Content: .metric-value {
  Fix: Verify brace matching

Line 411: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 413: Unmatched braces: 1 open, 0 close
  Content: .tab-button {
  Fix: Verify brace matching

Line 418: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 420: Unmatched braces: 1 open, 0 close
  Content: .btn-primary, .btn-secondary {
  Fix: Verify brace matching

Line 423: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 426: Unmatched braces: 1 open, 0 close
  Content: .nav-header {
  Fix: Verify brace matching

Line 428: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 430: Unmatched braces: 1 open, 0 close
  Content: .nav-header .max-w-7xl {
  Fix: Verify brace matching

Line 433: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 435: Unmatched braces: 1 open, 0 close
  Content: .nav-header .flex {
  Fix: Verify brace matching

Line 438: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 440: Unmatched braces: 1 open, 0 close
  Content: .nav-header h1 {
  Fix: Verify brace matching

Line 442: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 444: Unmatched braces: 1 open, 0 close
  Content: .nav-header p {
  Fix: Verify brace matching

Line 446: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 449: Unmatched braces: 1 open, 0 close
  Content: .tab-navigation .flex {
  Fix: Verify brace matching

Line 455: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 457: Unmatched braces: 1 open, 0 close
  Content: .tab-navigation .flex::-webkit-scrollbar {
  Fix: Verify brace matching

Line 459: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 462: Unmatched braces: 1 open, 0 close
  Content: .scrollbar-hide {
  Fix: Verify brace matching

Line 465: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 467: Unmatched braces: 1 open, 0 close
  Content: .scrollbar-hide::-webkit-scrollbar {
  Fix: Verify brace matching

Line 469: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 472: Unmatched braces: 1 open, 0 close
  Content: @media (max-width: 768px) {
  Fix: Verify brace matching

Line 473: Unmatched braces: 1 open, 0 close
  Content: .mobile-caddie-card {
  Fix: Verify brace matching

Line 478: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 481: Unmatched braces: 1 open, 0 close
  Content: #promotionalCaddysContainer {
  Fix: Verify brace matching

Line 486: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 489: Unmatched braces: 1 open, 0 close
  Content: .mobile-scroll-container {
  Fix: Verify brace matching

Line 491: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 493: Unmatched braces: 1 open, 0 close
  Content: .mobile-scroll-container::after {
  Fix: Verify brace matching

Line 504: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 505: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 507: Unmatched braces: 1 open, 0 close
  Content: .tab-navigation {
  Fix: Verify brace matching

Line 510: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 513: Unmatched braces: 1 open, 0 close
  Content: .schedule-filter-btn {
  Fix: Verify brace matching

Line 523: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 525: Unmatched braces: 1 open, 0 close
  Content: .schedule-filter-btn:hover {
  Fix: Verify brace matching

Line 528: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 530: Unmatched braces: 1 open, 0 close
  Content: .schedule-filter-btn.active {
  Fix: Verify brace matching

Line 534: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 537: Unmatched braces: 1 open, 0 close
  Content: .schedule-item {
  Fix: Verify brace matching

Line 543: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 545: Unmatched braces: 1 open, 0 close
  Content: .schedule-item:hover {
  Fix: Verify brace matching

Line 547: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 549: Unmatched braces: 1 open, 0 close
  Content: .schedule-item.editing {
  Fix: Verify brace matching

Line 552: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 555: Unmatched braces: 1 open, 0 close
  Content: .nav-header .space-x-4 {
  Fix: Verify brace matching

Line 558: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 560: Unmatched braces: 1 open, 0 close
  Content: .nav-header .space-x-4 > * {
  Fix: Verify brace matching

Line 562: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 565: Unmatched braces: 1 open, 0 close
  Content: .emergency-btn {
  Fix: Verify brace matching

Line 569: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 571: Unmatched braces: 1 open, 0 close
  Content: .btn-logout {
  Fix: Verify brace matching

Line 574: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 577: Unmatched braces: 1 open, 0 close
  Content: .nav-header .btn-primary {
  Fix: Verify brace matching

Line 580: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 583: Unmatched braces: 1 open, 0 close
  Content: .grid {
  Fix: Verify brace matching

Line 585: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 588: Unmatched braces: 1 open, 0 close
  Content: .hero-section {
  Fix: Verify brace matching

Line 591: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 593: Unmatched braces: 1 open, 0 close
  Content: .hero-section h2 {
  Fix: Verify brace matching

Line 595: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 598: Unmatched braces: 1 open, 0 close
  Content: .stats-card {
  Fix: Verify brace matching

Line 600: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 603: Unmatched braces: 1 open, 0 close
  Content: #chatModal {
  Fix: Verify brace matching

Line 606: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 608: Unmatched braces: 1 open, 0 close
  Content: .chat-modal-container {
  Fix: Verify brace matching

Line 613: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 616: Unmatched braces: 1 open, 0 close
  Content: #chatRoomView {
  Fix: Verify brace matching

Line 621: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 624: Unmatched braces: 1 open, 0 close
  Content: #chatListView {
  Fix: Verify brace matching

Line 629: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 631: Unmatched braces: 1 open, 0 close
  Content: #chatListView {
  Fix: Verify brace matching

Line 633: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 635: Unmatched braces: 1 open, 0 close
  Content: #chatRoomView {
  Fix: Verify brace matching

Line 637: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 640: Unmatched braces: 1 open, 0 close
  Content: #chatListView .hover\\:bg-gray-50:hover {
  Fix: Verify brace matching

Line 642: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 644: Unmatched braces: 1 open, 0 close
  Content: #chatListView .active\\:bg-gray-100:active {
  Fix: Verify brace matching

Line 646: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 649: Unmatched braces: 1 open, 0 close
  Content: #mobileChatMessages .max-w-xs {
  Fix: Verify brace matching

Line 651: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 654: Unmatched braces: 1 open, 0 close
  Content: #mobileMessageInput {
  Fix: Verify brace matching

Line 657: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 660: Unmatched braces: 1 open, 0 close
  Content: #mobileSendButton {
  Fix: Verify brace matching

Line 663: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 666: Unmatched braces: 1 open, 0 close
  Content: #mobileChatHeader button {
  Fix: Verify brace matching

Line 669: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 672: Unmatched braces: 1 open, 0 close
  Content: #chatListView input {
  Fix: Verify brace matching

Line 674: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 677: Unmatched braces: 1 open, 0 close
  Content: #chatRoomView > div:last-child {
  Fix: Verify brace matching

Line 687: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 690: Unmatched braces: 1 open, 0 close
  Content: #mobileChatMessages {
  Fix: Verify brace matching

Line 694: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 697: Unmatched braces: 1 open, 0 close
  Content: #mobileChatHeader {
  Fix: Verify brace matching

Line 703: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 706: Unmatched braces: 1 open, 0 close
  Content: #chatRoomView.keyboard-open #mobileChatMessages {
  Fix: Verify brace matching

Line 708: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 709: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 712: Unmatched braces: 1 open, 0 close
  Content: .nav-header {
  Fix: Verify brace matching

Line 719: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 721: Unmatched braces: 1 open, 0 close
  Content: .user-avatar {
  Fix: Verify brace matching

Line 727: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 730: Unmatched braces: 1 open, 0 close
  Content: .emergency-btn {
  Fix: Verify brace matching

Line 739: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 741: Unmatched braces: 1 open, 0 close
  Content: .emergency-btn:hover {
  Fix: Verify brace matching

Line 745: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 748: Unmatched braces: 1 open, 0 close
  Content: .status-online {
  Fix: Verify brace matching

Line 756: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 758: Unmatched braces: 1 open, 0 close
  Content: @keyframes pulse {
  Fix: Verify brace matching

Line 759: Unmatched braces: 1 open, 0 close
  Content: 0% {
  Fix: Verify brace matching

Line 762: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 763: Unmatched braces: 1 open, 0 close
  Content: 70% {
  Fix: Verify brace matching

Line 766: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 767: Unmatched braces: 1 open, 0 close
  Content: 100% {
  Fix: Verify brace matching

Line 770: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 771: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 773: Unmatched braces: 1 open, 0 close
  Content: @keyframes emergency-flash {
  Fix: Verify brace matching

Line 779: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 782: Unmatched braces: 1 open, 0 close
  Content: .category-tab {
  Fix: Verify brace matching

Line 793: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 795: Unmatched braces: 1 open, 0 close
  Content: .category-tab:hover {
  Fix: Verify brace matching

Line 798: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 800: Unmatched braces: 1 open, 0 close
  Content: .category-tab.active {
  Fix: Verify brace matching

Line 804: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 806: Unmatched braces: 1 open, 0 close
  Content: .product-card {
  Fix: Verify brace matching

Line 813: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 815: Unmatched braces: 1 open, 0 close
  Content: .product-card:hover {
  Fix: Verify brace matching

Line 819: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 821: Unmatched braces: 1 open, 0 close
  Content: .product-image {
  Fix: Verify brace matching

Line 823: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 825: Unmatched braces: 1 open, 0 close
  Content: .table-header {
  Fix: Verify brace matching

Line 832: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 834: Unmatched braces: 1 open, 0 close
  Content: .table-cell {
  Fix: Verify brace matching

Line 839: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 842: Unmatched braces: 1 open, 0 close
  Content: .modal-overlay {
  Fix: Verify brace matching

Line 854: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 856: Unmatched braces: 1 open, 0 close
  Content: .modal-content {
  Fix: Verify brace matching

Line 864: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 867: Unmatched braces: 1 open, 0 close
  Content: .form-textarea {
  Fix: Verify brace matching

Line 875: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 877: Unmatched braces: 1 open, 0 close
  Content: .form-textarea:focus {
  Fix: Verify brace matching

Line 881: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 884: Unmatched braces: 1 open, 0 close
  Content: .btn-sm {
  Fix: Verify brace matching

Line 896: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 898: Unmatched braces: 1 open, 0 close
  Content: .btn-sm:disabled {
  Fix: Verify brace matching

Line 901: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 903: Unmatched braces: 1 open, 0 close
  Content: .btn-sm.btn-outline {
  Fix: Verify brace matching

Line 907: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 909: Unmatched braces: 1 open, 0 close
  Content: .btn-sm.btn-outline:hover:not(:disabled) {
  Fix: Verify brace matching

Line 912: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 914: Unmatched braces: 1 open, 0 close
  Content: .btn-sm.btn-primary {
  Fix: Verify brace matching

Line 917: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 919: Unmatched braces: 1 open, 0 close
  Content: .btn-sm.btn-primary:hover:not(:disabled) {
  Fix: Verify brace matching

Line 921: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 924: Unmatched braces: 1 open, 0 close
  Content: @media (max-width: 768px) {
  Fix: Verify brace matching

Line 925: Unmatched braces: 1 open, 0 close
  Content: .product-grid {
  Fix: Verify brace matching

Line 928: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 930: Unmatched braces: 1 open, 0 close
  Content: .category-tab {
  Fix: Verify brace matching

Line 933: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 936: Unmatched braces: 1 open, 0 close
  Content: .table-cell {
  Fix: Verify brace matching

Line 939: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 940: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 942: Unmatched braces: 1 open, 0 close
  Content: @media (max-width: 480px) {
  Fix: Verify brace matching

Line 943: Unmatched braces: 1 open, 0 close
  Content: .modal-content {
  Fix: Verify brace matching

Line 946: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 947: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 950: Unmatched braces: 1 open, 0 close
  Content: .role-selection-card {
  Fix: Verify brace matching

Line 952: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 954: Unmatched braces: 1 open, 0 close
  Content: .role-card {
  Fix: Verify brace matching

Line 965: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 967: Unmatched braces: 1 open, 0 close
  Content: .role-card:hover {
  Fix: Verify brace matching

Line 972: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 974: Unmatched braces: 1 open, 0 close
  Content: .role-selection-card input:checked + .role-card {
  Fix: Verify brace matching

Line 978: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 980: Unmatched braces: 1 open, 0 close
  Content: .role-card .material-symbols-outlined {
  Fix: Verify brace matching

Line 983: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 985: Unmatched braces: 1 open, 0 close
  Content: .role-selection-card input:checked + .role-card .material-symbols-outlined {
  Fix: Verify brace matching

Line 987: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 990: Unmatched braces: 1 open, 0 close
  Content: .language-btn {
  Fix: Verify brace matching

Line 1002: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1004: Unmatched braces: 1 open, 0 close
  Content: .language-btn:hover {
  Fix: Verify brace matching

Line 1008: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1010: Unmatched braces: 1 open, 0 close
  Content: .language-btn.active {
  Fix: Verify brace matching

Line 1016: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1021: Unmatched braces: 1 open, 0 close
  Content: tailwind.config = {
  Fix: Verify brace matching

Line 1022: Unmatched braces: 1 open, 0 close
  Content: theme: {
  Fix: Verify brace matching

Line 1023: Unmatched braces: 1 open, 0 close
  Content: extend: {
  Fix: Verify brace matching

Line 1024: Unmatched braces: 1 open, 0 close
  Content: colors: {
  Fix: Verify brace matching

Line 1025: Unmatched braces: 1 open, 0 close
  Content: primary: {
  Fix: Verify brace matching

Line 1036: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1037: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 1038: Unmatched braces: 1 open, 0 close
  Content: fontFamily: {
  Fix: Verify brace matching

Line 1040: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1041: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1042: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1043: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 1048: Unmatched braces: 1 open, 0 close
  Content: function clearAllDemoData() {
  Fix: Verify brace matching

Line 1052: Unmatched brackets: 1 open, 0 close
  Content: const preservedKeys = [
  Fix: Verify bracket matching

Line 1062: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 1065: Unmatched brackets: 1 open, 0 close
  Content: const demoDataKeys = [
  Fix: Verify bracket matching

Line 1084: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 1087: Unmatched parentheses: 1 open, 0 close
  Content: demoDataKeys.forEach(key => {
  Fix: Verify parentheses matching

Line 1087: Unmatched braces: 1 open, 0 close
  Content: demoDataKeys.forEach(key => {
  Fix: Verify brace matching

Line 1090: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 1090: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 1094: Unmatched braces: 1 open, 0 close
  Content: for (let i = 0; i < localStorage.length; i++) {
  Fix: Verify brace matching

Line 1096: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1098: Unmatched parentheses: 1 open, 0 close
  Content: allKeys.forEach(key => {
  Fix: Verify parentheses matching

Line 1098: Unmatched braces: 1 open, 0 close
  Content: allKeys.forEach(key => {
  Fix: Verify brace matching

Line 1100: Unmatched parentheses: 3 open, 2 close
  Content: if (!preservedKeys.some(preserved => key.includes(preserved)) &&
  Fix: Verify parentheses matching

Line 1102: Unmatched parentheses: 1 open, 2 close
  Content: !key.includes('language')) {
  Fix: Verify parentheses matching

Line 1102: Unmatched braces: 1 open, 0 close
  Content: !key.includes('language')) {
  Fix: Verify brace matching

Line 1105: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1106: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 1106: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 1116: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1121: Unmatched braces: 1 open, 0 close
  Content: const translations = {
  Fix: Verify brace matching

Line 1122: Unmatched braces: 1 open, 0 close
  Content: en: {
  Fix: Verify brace matching

Line 1326: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 1328: Unmatched braces: 1 open, 0 close
  Content: th: {
  Fix: Verify brace matching

Line 1532: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 1534: Unmatched braces: 1 open, 0 close
  Content: ko: {
  Fix: Verify brace matching

Line 1738: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 1740: Unmatched braces: 1 open, 0 close
  Content: ja: {
  Fix: Verify brace matching

Line 1944: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1945: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 1948: Unmatched braces: 1 open, 0 close
  Content: function t(key, lang = currentLanguage) {
  Fix: Verify brace matching

Line 1950: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1953: Unmatched braces: 1 open, 0 close
  Content: function updateLanguage(lang) {
  Fix: Verify brace matching

Line 1957: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('[data-i18n]').forEach(element => {
  Fix: Verify parentheses matching

Line 1957: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('[data-i18n]').forEach(element => {
  Fix: Verify brace matching

Line 1960: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 1960: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 1963: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
  Fix: Verify parentheses matching

Line 1963: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
  Fix: Verify brace matching

Line 1966: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 1966: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 1976: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 1979: Unmatched braces: 1 open, 0 close
  Content: function autoTranslateCommonElements() {
  Fix: Verify brace matching

Line 1981: Unmatched braces: 1 open, 0 close
  Content: const textMappings = {
  Fix: Verify brace matching

Line 2043: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2046: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(textMappings).forEach(([englishText, translationKey]) => {
  Fix: Verify parentheses matching

Line 2046: Unmatched braces: 1 open, 0 close
  Content: Object.entries(textMappings).forEach(([englishText, translationKey]) => {
  Fix: Verify brace matching

Line 2047: Unmatched parentheses: 3 open, 2 close
  Content: const elements = Array.from(document.querySelectorAll('*')).filter(el => {
  Fix: Verify parentheses matching

Line 2047: Unmatched braces: 1 open, 0 close
  Content: const elements = Array.from(document.querySelectorAll('*')).filter(el => {
  Fix: Verify brace matching

Line 2052: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2052: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2054: Unmatched parentheses: 1 open, 0 close
  Content: elements.forEach(el => {
  Fix: Verify parentheses matching

Line 2054: Unmatched braces: 1 open, 0 close
  Content: elements.forEach(el => {
  Fix: Verify brace matching

Line 2057: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2057: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2058: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2058: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2061: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('option').forEach(option => {
  Fix: Verify parentheses matching

Line 2061: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('option').forEach(option => {
  Fix: Verify brace matching

Line 2063: Unmatched braces: 1 open, 0 close
  Content: if (textMappings[text] && !option.hasAttribute('data-i18n')) {
  Fix: Verify brace matching

Line 2066: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2067: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2067: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2068: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2071: Unmatched braces: 1 open, 0 close
  Content: function changeLanguage(lang) {
  Fix: Verify brace matching

Line 2075: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.language-btn').forEach(btn => {
  Fix: Verify parentheses matching

Line 2075: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.language-btn').forEach(btn => {
  Fix: Verify brace matching

Line 2077: Unmatched braces: 1 open, 0 close
  Content: if (btn.getAttribute('data-lang') === lang) {
  Fix: Verify brace matching

Line 2079: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2080: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2080: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2081: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2084: Unmatched braces: 1 open, 0 close
  Content: function initializeLanguage() {
  Fix: Verify brace matching

Line 2090: Unmatched braces: 1 open, 0 close
  Content: if (activeBtn) {
  Fix: Verify brace matching

Line 2092: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2096: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2099: Unmatched braces: 1 open, 0 close
  Content: function setupDynamicContentObserver() {
  Fix: Verify brace matching

Line 2100: Unmatched parentheses: 2 open, 1 close
  Content: const observer = new MutationObserver(function(mutations) {
  Fix: Verify parentheses matching

Line 2100: Unmatched braces: 1 open, 0 close
  Content: const observer = new MutationObserver(function(mutations) {
  Fix: Verify brace matching

Line 2101: Unmatched parentheses: 2 open, 1 close
  Content: mutations.forEach(function(mutation) {
  Fix: Verify parentheses matching

Line 2101: Unmatched braces: 1 open, 0 close
  Content: mutations.forEach(function(mutation) {
  Fix: Verify brace matching

Line 2102: Unmatched braces: 1 open, 0 close
  Content: if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
  Fix: Verify brace matching

Line 2104: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 2104: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 2106: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 2106: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 2107: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2108: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2108: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2109: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2109: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2111: Unmatched parentheses: 1 open, 0 close
  Content: observer.observe(document.body, {
  Fix: Verify parentheses matching

Line 2111: Unmatched braces: 1 open, 0 close
  Content: observer.observe(document.body, {
  Fix: Verify brace matching

Line 2114: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2114: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2115: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2118: Unmatched braces: 1 open, 0 close
  Content: const AppState = {
  Fix: Verify brace matching

Line 2119: Unmatched braces: 1 open, 0 close
  Content: currentUser: {
  Fix: Verify brace matching

Line 2129: Unmatched braces: 1 open, 0 close
  Content: stats: {
  Fix: Verify brace matching

Line 2135: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2137: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 2140: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2141: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2143: Unmatched braces: 1 open, 0 close
  Content: navigation: {
  Fix: Verify brace matching

Line 2148: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2150: Unmatched braces: 1 open, 0 close
  Content: session: {
  Fix: Verify brace matching

Line 2155: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2157: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2160: Unmatched braces: 1 open, 0 close
  Content: const LineConfig = {
  Fix: Verify brace matching

Line 2165: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2170: Unmatched braces: 1 open, 0 close
  Content: function toArray(x) {
  Fix: Verify brace matching

Line 2175: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2177: Unmatched braces: 1 open, 0 close
  Content: function upsertById(list, item, key='id') {
  Fix: Verify brace matching

Line 2182: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2185: Unmatched braces: 1 open, 0 close
  Content: function newBookingId(booking) {
  Fix: Verify brace matching

Line 2197: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2200: Unmatched braces: 2 open, 1 close
  Content: function makeRoundGroupId({ courseId, teeTime, userId }) {
  Fix: Verify brace matching

Line 2203: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2209: Unmatched parentheses: 2 open, 1 close
  Content: (function normalizeBadHomeClub() {
  Fix: Verify parentheses matching

Line 2209: Unmatched braces: 1 open, 0 close
  Content: (function normalizeBadHomeClub() {
  Fix: Verify brace matching

Line 2210: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2211: Unmatched parentheses: 1 open, 0 close
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Verify parentheses matching

Line 2211: Unmatched brackets: 1 open, 0 close
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Verify bracket matching

Line 2213: Unmatched parentheses: 0 open, 1 close
  Content: ]);
  Fix: Verify parentheses matching

Line 2213: Unmatched brackets: 0 open, 1 close
  Content: ]);
  Fix: Verify bracket matching

Line 2216: Unmatched braces: 1 open, 0 close
  Content: if (p && (PLACEHOLDER_TEXTS.has(p.homeClub) || !p.homeClub || p.homeClub.includes('Select'))) {
  Fix: Verify brace matching

Line 2221: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2226: Unmatched parentheses: 1 open, 0 close
  Content: profiles.forEach(profile => {
  Fix: Verify parentheses matching

Line 2226: Unmatched braces: 1 open, 0 close
  Content: profiles.forEach(profile => {
  Fix: Verify brace matching

Line 2227: Unmatched braces: 1 open, 0 close
  Content: if (profile.homeClub && (PLACEHOLDER_TEXTS.has(profile.homeClub) || profile.homeClub.includes('Selec
  Fix: Verify brace matching

Line 2231: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2232: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2232: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2233: Unmatched braces: 1 open, 0 close
  Content: if (cleaned) {
  Fix: Verify brace matching

Line 2235: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2238: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2239: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 2239: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 2242: Unmatched braces: 1 open, 0 close
  Content: function addScheduleEventOnceForBooking(booking) {
  Fix: Verify brace matching

Line 2248: Unmatched braces: 1 open, 0 close
  Content: const evt = {
  Fix: Verify brace matching

Line 2258: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2266: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2269: Unmatched braces: 1 open, 0 close
  Content: class SimpleCloudSync {
  Fix: Verify brace matching

Line 2277: Unmatched braces: 1 open, 0 close
  Content: static async initialize() {
  Fix: Verify brace matching

Line 2286: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2288: Unmatched braces: 1 open, 0 close
  Content: static startPolling() {
  Fix: Verify brace matching

Line 2293: Unmatched parentheses: 2 open, 1 close
  Content: const emergencyInterval = setInterval(() => {
  Fix: Verify parentheses matching

Line 2293: Unmatched braces: 1 open, 0 close
  Content: const emergencyInterval = setInterval(() => {
  Fix: Verify brace matching

Line 2294: Unmatched braces: 1 open, 0 close
  Content: if (emergencyPollCount > 0 && emergencyPollCount <= 15) {
  Fix: Verify brace matching

Line 2296: Unmatched parentheses: 2 open, 1 close
  Content: this.loadFromCloud().catch(err => {
  Fix: Verify parentheses matching

Line 2296: Unmatched braces: 1 open, 0 close
  Content: this.loadFromCloud().catch(err => {
  Fix: Verify brace matching

Line 2298: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2298: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2301: Unmatched braces: 1 open, 0 close
  Content: if (emergencyPollCount > 15) {
  Fix: Verify brace matching

Line 2303: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2304: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2305: Unmatched parentheses: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify parentheses matching

Line 2305: Unmatched braces: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify brace matching

Line 2308: Unmatched parentheses: 2 open, 1 close
  Content: const normalInterval = setInterval(() => {
  Fix: Verify parentheses matching

Line 2308: Unmatched braces: 1 open, 0 close
  Content: const normalInterval = setInterval(() => {
  Fix: Verify brace matching

Line 2309: Unmatched braces: 1 open, 0 close
  Content: if (emergencyPollCount === 0 || emergencyPollCount > 15) {
  Fix: Verify brace matching

Line 2310: Unmatched parentheses: 2 open, 1 close
  Content: this.loadFromCloud().catch(err => {
  Fix: Verify parentheses matching

Line 2310: Unmatched braces: 1 open, 0 close
  Content: this.loadFromCloud().catch(err => {
  Fix: Verify brace matching

Line 2312: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2312: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2313: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2314: Unmatched parentheses: 0 open, 1 close
  Content: }, 15000);
  Fix: Verify parentheses matching

Line 2314: Unmatched braces: 0 open, 1 close
  Content: }, 15000);
  Fix: Verify brace matching

Line 2317: Unmatched parentheses: 2 open, 1 close
  Content: window.addEventListener('emergency-alert-sent', () => {
  Fix: Verify parentheses matching

Line 2317: Unmatched braces: 1 open, 0 close
  Content: window.addEventListener('emergency-alert-sent', () => {
  Fix: Verify brace matching

Line 2320: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2320: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2321: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2323: Unmatched braces: 1 open, 0 close
  Content: static async loadFromCloud() {
  Fix: Verify brace matching

Line 2324: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2325: Unmatched parentheses: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify parentheses matching

Line 2325: Unmatched braces: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify brace matching

Line 2328: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2328: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2332: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Loaded from cloud:', {
  Fix: Verify parentheses matching

Line 2332: Unmatched braces: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Loaded from cloud:', {
  Fix: Verify brace matching

Line 2337: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2337: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2343: Unmatched braces: 1 open, 0 close
  Content: if (!localData.updatedAt || (cloudData.updatedAt && cloudData.updatedAt > localData.updatedAt)) {
  Fix: Verify brace matching

Line 2347: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.bookings) {
  Fix: Verify brace matching

Line 2349: Unmatched braces: 1 open, 0 close
  Content: if (typeof BookingManager !== 'undefined' && BookingManager.bookings) {
  Fix: Verify brace matching

Line 2352: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2353: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2355: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.user_profiles) {
  Fix: Verify brace matching

Line 2360: Unmatched parentheses: 1 open, 0 close
  Content: const userProfile = cloudData.user_profiles.find(p =>
  Fix: Verify parentheses matching

Line 2364: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 2366: Unmatched braces: 1 open, 0 close
  Content: if (userProfile) {
  Fix: Verify brace matching

Line 2371: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2372: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProfileSystem !== 'undefined' && ProfileSystem.updateUIWithProfile) {
  Fix: Verify brace matching

Line 2374: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2377: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2378: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2379: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2381: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.schedule_items) {
  Fix: Verify brace matching

Line 2387: Unmatched braces: 1 open, 0 close
  Content: if (typeof ScheduleSystem !== 'undefined' && ScheduleSystem.refreshStats) {
  Fix: Verify brace matching

Line 2389: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2390: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2392: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.emergency_alerts) {
  Fix: Verify brace matching

Line 2394: Unmatched braces: 1 open, 0 close
  Content: if (typeof EmergencySystem !== 'undefined') {
  Fix: Verify brace matching

Line 2398: Unmatched braces: 1 open, 0 close
  Content: if (newAlert) {
  Fix: Verify brace matching

Line 2401: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2402: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2403: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2410: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2416: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2417: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2419: Unmatched braces: 1 open, 0 close
  Content: static ensureStableIds(data) {
  Fix: Verify brace matching

Line 2423: Unmatched parentheses: 3 open, 1 close
  Content: data.bookings = (data.bookings || []).map(booking => ({
  Fix: Verify parentheses matching

Line 2423: Unmatched braces: 1 open, 0 close
  Content: data.bookings = (data.bookings || []).map(booking => ({
  Fix: Verify brace matching

Line 2427: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 2427: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 2430: Unmatched parentheses: 3 open, 1 close
  Content: data.user_profiles = (data.user_profiles || []).map(profile => ({
  Fix: Verify parentheses matching

Line 2430: Unmatched braces: 1 open, 0 close
  Content: data.user_profiles = (data.user_profiles || []).map(profile => ({
  Fix: Verify brace matching

Line 2434: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 2434: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 2438: Unmatched braces: 1 open, 0 close
  Content: if (typeof scheduleItems === 'object' && !Array.isArray(scheduleItems)) {
  Fix: Verify brace matching

Line 2440: Unmatched braces: 1 open, 0 close
  Content: if (scheduleItems.events) {
  Fix: Verify brace matching

Line 2444: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2445: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2446: Unmatched parentheses: 2 open, 0 close
  Content: data.schedule_items = scheduleItems.map(item => ({
  Fix: Verify parentheses matching

Line 2446: Unmatched braces: 1 open, 0 close
  Content: data.schedule_items = scheduleItems.map(item => ({
  Fix: Verify brace matching

Line 2450: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 2450: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 2453: Unmatched parentheses: 3 open, 1 close
  Content: data.emergency_alerts = (data.emergency_alerts || []).map(alert => ({
  Fix: Verify parentheses matching

Line 2453: Unmatched braces: 1 open, 0 close
  Content: data.emergency_alerts = (data.emergency_alerts || []).map(alert => ({
  Fix: Verify brace matching

Line 2457: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 2457: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 2460: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2462: Unmatched braces: 1 open, 0 close
  Content: static async saveToCloud(retryCount = 0) {
  Fix: Verify brace matching

Line 2466: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2468: Unmatched parentheses: 1 open, 0 close
  Content: const cloudRes = await fetch('/.netlify/functions/bookings', {
  Fix: Verify parentheses matching

Line 2468: Unmatched braces: 1 open, 0 close
  Content: const cloudRes = await fetch('/.netlify/functions/bookings', {
  Fix: Verify brace matching

Line 2471: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2471: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2479: Unmatched braces: 1 open, 0 close
  Content: if (singleProfile && userProfiles.length === 0) {
  Fix: Verify brace matching

Line 2481: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2488: Unmatched parentheses: 1 open, 0 close
  Content: const scheduleItems = schedule.map(evt => {
  Fix: Verify parentheses matching

Line 2488: Unmatched braces: 1 open, 0 close
  Content: const scheduleItems = schedule.map(evt => {
  Fix: Verify brace matching

Line 2492: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2492: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2494: Unmatched braces: 1 open, 0 close
  Content: const localData = {
  Fix: Verify brace matching

Line 2502: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2507: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Sending data to server for merge:', {
  Fix: Verify parentheses matching

Line 2507: Unmatched braces: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Sending data to server for merge:', {
  Fix: Verify brace matching

Line 2512: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2512: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2514: Unmatched parentheses: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify parentheses matching

Line 2514: Unmatched braces: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify brace matching

Line 2516: Unmatched braces: 1 open, 0 close
  Content: headers: {
  Fix: Verify brace matching

Line 2519: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2521: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2521: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2523: Unmatched braces: 1 open, 0 close
  Content: if (res.status === 409) {
  Fix: Verify brace matching

Line 2525: Unmatched braces: 1 open, 0 close
  Content: if (retryCount < MAX_RETRIES) {
  Fix: Verify brace matching

Line 2537: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2538: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2540: Unmatched braces: 1 open, 0 close
  Content: if (!res.ok) {
  Fix: Verify brace matching

Line 2542: Unmatched braces: 1 open, 0 close
  Content: if (res.status >= 500 && retryCount < MAX_RETRIES) {
  Fix: Verify brace matching

Line 2550: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2552: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2568: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2569: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2571: Unmatched braces: 1 open, 0 close
  Content: static updateLocalStorageFromServer(serverData) {
  Fix: Verify brace matching

Line 2573: Unmatched braces: 1 open, 0 close
  Content: function toArray(x) {
  Fix: Verify brace matching

Line 2578: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2589: Unmatched parentheses: 2 open, 0 close
  Content: localStorage.setItem('mcipro_data', JSON.stringify({
  Fix: Verify parentheses matching

Line 2589: Unmatched braces: 1 open, 0 close
  Content: localStorage.setItem('mcipro_data', JSON.stringify({
  Fix: Verify brace matching

Line 2593: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 2593: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 2596: Unmatched braces: 1 open, 0 close
  Content: if (typeof BookingManager !== 'undefined' && BookingManager.bookings) {
  Fix: Verify brace matching

Line 2599: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2602: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProfileSystem !== 'undefined' && ProfileSystem.updateUIWithProfile) {
  Fix: Verify brace matching

Line 2610: Unmatched braces: 1 open, 0 close
  Content: if (userProfile) {
  Fix: Verify brace matching

Line 2615: Unmatched braces: 1 open, 0 close
  Content: if (userProfile.homeClub && typeof ProfileSystem.applyHomeClubToForm === 'function') {
  Fix: Verify brace matching

Line 2617: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2618: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2621: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2624: Unmatched braces: 1 open, 0 close
  Content: if (typeof ScheduleSystem !== 'undefined' && ScheduleSystem.loadFromStorage) {
  Fix: Verify brace matching

Line 2627: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2629: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Local storage updated from server:', {
  Fix: Verify parentheses matching

Line 2629: Unmatched braces: 1 open, 0 close
  Content: console.log('[SimpleCloudSync] Local storage updated from server:', {
  Fix: Verify brace matching

Line 2634: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2634: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2635: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2637: Unmatched braces: 1 open, 0 close
  Content: static async handleDeletion(entityType, id) {
  Fix: Verify brace matching

Line 2640: Unmatched brackets: 2 open, 1 close
  Content: deletionData[entityType] = [{
  Fix: Verify bracket matching

Line 2640: Unmatched braces: 1 open, 0 close
  Content: deletionData[entityType] = [{
  Fix: Verify brace matching

Line 2644: Unmatched brackets: 0 open, 1 close
  Content: }];
  Fix: Verify bracket matching

Line 2644: Unmatched braces: 0 open, 1 close
  Content: }];
  Fix: Verify brace matching

Line 2648: Unmatched parentheses: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify parentheses matching

Line 2648: Unmatched braces: 1 open, 0 close
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Verify brace matching

Line 2650: Unmatched braces: 1 open, 0 close
  Content: headers: {
  Fix: Verify brace matching

Line 2653: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2655: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2655: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2657: Unmatched braces: 1 open, 0 close
  Content: if (res.ok) {
  Fix: Verify brace matching

Line 2661: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2662: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2664: Unmatched braces: 1 open, 0 close
  Content: static async saveViaCloudflare(userData) {
  Fix: Verify brace matching

Line 2665: Unmatched parentheses: 2 open, 1 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify parentheses matching

Line 2665: Unmatched braces: 3 open, 2 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify brace matching

Line 2667: Unmatched braces: 1 open, 0 close
  Content: headers: {
  Fix: Verify brace matching

Line 2670: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 2672: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2672: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2674: Unmatched braces: 1 open, 0 close
  Content: if (!response.ok) {
  Fix: Verify brace matching

Line 2676: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2681: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2683: Unmatched braces: 1 open, 0 close
  Content: static async syncFromCloudflare() {
  Fix: Verify brace matching

Line 2686: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2687: Unmatched parentheses: 2 open, 1 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify parentheses matching

Line 2687: Unmatched braces: 3 open, 2 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify brace matching

Line 2689: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2689: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2691: Unmatched braces: 1 open, 0 close
  Content: if (response.ok) {
  Fix: Verify brace matching

Line 2694: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2697: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2698: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2700: Unmatched braces: 1 open, 0 close
  Content: static handleCloudUpdate(cloudData) {
  Fix: Verify brace matching

Line 2701: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2702: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[SYNC] Received cloud data:', {
  Fix: Verify parentheses matching

Line 2702: Unmatched braces: 1 open, 0 close
  Content: console.log('[SYNC] Received cloud data:', {
  Fix: Verify brace matching

Line 2706: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2706: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2708: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.bookings) {
  Fix: Verify brace matching

Line 2713: Unmatched braces: 1 open, 0 close
  Content: if (newBookings.length > 0) {
  Fix: Verify brace matching

Line 2716: Unmatched braces: 1 open, 0 close
  Content: if (typeof BookingManager !== 'undefined') {
  Fix: Verify brace matching

Line 2720: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2722: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2723: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2725: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.user_profiles) {
  Fix: Verify brace matching

Line 2730: Unmatched braces: 1 open, 0 close
  Content: if (newProfiles.length > 0) {
  Fix: Verify brace matching

Line 2735: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2736: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2738: Unmatched braces: 1 open, 0 close
  Content: if (cloudData.emergency_alerts) {
  Fix: Verify brace matching

Line 2740: Unmatched braces: 1 open, 0 close
  Content: if (typeof EmergencySystem !== 'undefined') {
  Fix: Verify brace matching

Line 2744: Unmatched braces: 1 open, 0 close
  Content: if (newAlert) {
  Fix: Verify brace matching

Line 2747: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2748: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2749: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2753: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2754: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2756: Unmatched braces: 1 open, 0 close
  Content: static async syncGlobalEmergencyAlerts() {
  Fix: Verify brace matching

Line 2757: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2758: Unmatched parentheses: 1 open, 0 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/global/emergency-alerts`, {
  Fix: Verify parentheses matching

Line 2758: Unmatched braces: 2 open, 1 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/global/emergency-alerts`, {
  Fix: Verify brace matching

Line 2760: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2760: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2762: Unmatched braces: 1 open, 0 close
  Content: if (response.ok) {
  Fix: Verify brace matching

Line 2764: Unmatched braces: 1 open, 0 close
  Content: if (data.alerts && data.alerts.length > 0) {
  Fix: Verify brace matching

Line 2766: Unmatched braces: 1 open, 0 close
  Content: if (typeof EmergencySystem !== 'undefined') {
  Fix: Verify brace matching

Line 2769: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2770: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2771: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2774: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2775: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2777: Unmatched braces: 1 open, 0 close
  Content: static showSyncStatus(message, type = 'info') {
  Fix: Verify brace matching

Line 2781: Unmatched braces: 1 open, 0 close
  Content: if (!statusElement) {
  Fix: Verify brace matching

Line 2796: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2798: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 2803: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2811: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 2811: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 2812: Unmatched braces: 1 open, 0 close
  Content: if (statusElement) {
  Fix: Verify brace matching

Line 2814: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2815: Unmatched parentheses: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify parentheses matching

Line 2815: Unmatched braces: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify brace matching

Line 2816: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2819: Unmatched braces: 1 open, 0 close
  Content: static async saveData() {
  Fix: Verify brace matching

Line 2821: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2823: Unmatched braces: 1 open, 0 close
  Content: static async syncFromCloudflare() {
  Fix: Verify brace matching

Line 2825: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2828: Unmatched braces: 1 open, 0 close
  Content: static async forceSync() {
  Fix: Verify brace matching

Line 2830: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2836: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2837: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2839: Unmatched braces: 1 open, 0 close
  Content: static async loadDataFromCloudflare() {
  Fix: Verify brace matching

Line 2841: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2842: Unmatched parentheses: 2 open, 1 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify parentheses matching

Line 2842: Unmatched braces: 3 open, 2 close
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Verify brace matching

Line 2844: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2844: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2846: Unmatched braces: 1 open, 0 close
  Content: if (response.ok) {
  Fix: Verify brace matching

Line 2852: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2855: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2856: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2859: Unmatched braces: 1 open, 0 close
  Content: static saveToCloudSoon() {
  Fix: Verify brace matching

Line 2861: Unmatched parentheses: 2 open, 1 close
  Content: this.pushTimer = setTimeout(() => {
  Fix: Verify parentheses matching

Line 2861: Unmatched braces: 1 open, 0 close
  Content: this.pushTimer = setTimeout(() => {
  Fix: Verify brace matching

Line 2864: Unmatched parentheses: 0 open, 1 close
  Content: }, this.DEBOUNCE_DELAY);
  Fix: Verify parentheses matching

Line 2864: Unmatched braces: 0 open, 1 close
  Content: }, this.DEBOUNCE_DELAY);
  Fix: Verify brace matching

Line 2865: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2866: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2875: Unmatched braces: 1 open, 0 close
  Content: class ScreenManager {
  Fix: Verify brace matching

Line 2876: Unmatched braces: 1 open, 0 close
  Content: static showScreen(screenId, data = null) {
  Fix: Verify brace matching

Line 2877: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 2881: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.screen').forEach(screen => {
  Fix: Verify parentheses matching

Line 2881: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.screen').forEach(screen => {
  Fix: Verify brace matching

Line 2883: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 2883: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 2887: Unmatched braces: 1 open, 0 close
  Content: if (!targetScreen) {
  Fix: Verify brace matching

Line 2889: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2899: Unmatched braces: 1 open, 0 close
  Content: if (AppState.navigation.breadcrumb.length > 10) {
  Fix: Verify brace matching

Line 2901: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2914: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2915: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2917: Unmatched braces: 1 open, 0 close
  Content: static initializeScreen(screenId, data) {
  Fix: Verify brace matching

Line 2918: Unmatched braces: 1 open, 0 close
  Content: const initMap = {
  Fix: Verify brace matching

Line 2926: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 2929: Unmatched braces: 1 open, 0 close
  Content: if (initFunction) {
  Fix: Verify brace matching

Line 2931: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2932: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2934: Unmatched braces: 1 open, 0 close
  Content: static initLoginScreen() {
  Fix: Verify brace matching

Line 2941: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2943: Unmatched braces: 1 open, 0 close
  Content: static initOTPScreen() {
  Fix: Verify brace matching

Line 2946: Unmatched braces: 1 open, 0 close
  Content: if (firstInput) {
  Fix: Verify brace matching

Line 2948: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2949: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2951: Unmatched braces: 1 open, 0 close
  Content: static initGolferDashboard() {
  Fix: Verify brace matching

Line 2958: Unmatched braces: 1 open, 0 close
  Content: if (bookingDateInput) {
  Fix: Verify brace matching

Line 2962: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2965: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 2965: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 2966: Unmatched braces: 1 open, 0 close
  Content: if (typeof startGPSTracking === 'function') {
  Fix: Verify brace matching

Line 2969: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2970: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 2970: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 2971: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2973: Unmatched braces: 1 open, 0 close
  Content: static initCaddyDashboard() {
  Fix: Verify brace matching

Line 2976: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2978: Unmatched braces: 1 open, 0 close
  Content: static initManagerDashboard() {
  Fix: Verify brace matching

Line 2981: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2983: Unmatched braces: 1 open, 0 close
  Content: static initProshopDashboard() {
  Fix: Verify brace matching

Line 2986: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2988: Unmatched braces: 1 open, 0 close
  Content: static initMaintenanceDashboard() {
  Fix: Verify brace matching

Line 2991: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2993: Unmatched braces: 1 open, 0 close
  Content: static goBack() {
  Fix: Verify brace matching

Line 2994: Unmatched braces: 1 open, 0 close
  Content: if (AppState.navigation.lastScreen) {
  Fix: Verify brace matching

Line 2996: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2997: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 2998: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3001: Unmatched braces: 1 open, 0 close
  Content: class TabManager {
  Fix: Verify brace matching

Line 3002: Unmatched braces: 1 open, 0 close
  Content: static showTab(dashboardId, tabName, event = null) {
  Fix: Verify brace matching

Line 3003: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3008: Unmatched parentheses: 1 open, 0 close
  Content: tabButtons.forEach(btn => {
  Fix: Verify parentheses matching

Line 3008: Unmatched braces: 1 open, 0 close
  Content: tabButtons.forEach(btn => {
  Fix: Verify brace matching

Line 3010: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3010: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3013: Unmatched braces: 1 open, 0 close
  Content: if (event && event.target) {
  Fix: Verify brace matching

Line 3018: Unmatched braces: 1 open, 0 close
  Content: if (targetBtn) {
  Fix: Verify brace matching

Line 3020: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3021: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3025: Unmatched parentheses: 1 open, 0 close
  Content: tabContents.forEach(content => {
  Fix: Verify parentheses matching

Line 3025: Unmatched braces: 1 open, 0 close
  Content: tabContents.forEach(content => {
  Fix: Verify brace matching

Line 3027: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3027: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3031: Unmatched braces: 1 open, 0 close
  Content: if (targetContent) {
  Fix: Verify brace matching

Line 3039: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3044: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3045: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3047: Unmatched braces: 1 open, 0 close
  Content: static loadTabData(dashboardId, tabName) {
  Fix: Verify brace matching

Line 3051: Unmatched braces: 1 open, 0 close
  Content: if (dashboardId === 'golferDashboard' && tabName === 'overview') {
  Fix: Verify brace matching

Line 3053: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3053: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3057: Unmatched braces: 1 open, 0 close
  Content: if (typeof calculateDistances === 'function') {
  Fix: Verify brace matching

Line 3059: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3060: Unmatched braces: 1 open, 0 close
  Content: if (typeof updateHoleDisplay === 'function') {
  Fix: Verify brace matching

Line 3062: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3063: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3063: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3064: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3067: Unmatched braces: 1 open, 0 close
  Content: if (dashboardId === 'golferDashboard' && tabName === 'status') {
  Fix: Verify brace matching

Line 3068: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3068: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3070: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3070: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3071: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3074: Unmatched braces: 1 open, 0 close
  Content: if (dashboardId === 'golferDashboard' && tabName === 'schedule') {
  Fix: Verify brace matching

Line 3075: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3075: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3078: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3078: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3079: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3082: Unmatched braces: 1 open, 0 close
  Content: if (dashboardId === 'golferDashboard' && tabName === 'booking') {
  Fix: Verify brace matching

Line 3083: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3083: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3086: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3086: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3087: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3090: Unmatched braces: 1 open, 0 close
  Content: if (dashboardId === 'golferDashboard' && tabName === 'gps') {
  Fix: Verify brace matching

Line 3091: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3091: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3093: Unmatched braces: 1 open, 0 close
  Content: if (typeof startGPSTracking === 'function') {
  Fix: Verify brace matching

Line 3095: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3096: Unmatched braces: 1 open, 0 close
  Content: if (typeof getCurrentLocation === 'function') {
  Fix: Verify brace matching

Line 3098: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3100: Unmatched braces: 1 open, 0 close
  Content: if (document.getElementById('courseMap')) {
  Fix: Verify brace matching

Line 3101: Unmatched braces: 1 open, 0 close
  Content: if (typeof initOpenStreetMap === 'function') {
  Fix: Verify brace matching

Line 3103: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3104: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3105: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3105: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3106: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3109: Unmatched braces: 1 open, 0 close
  Content: if (tabName === 'overview' || tabName === 'pos') {
  Fix: Verify brace matching

Line 3110: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3110: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3112: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3112: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3113: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3114: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3115: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3118: Unmatched braces: 1 open, 0 close
  Content: class LineAuthentication {
  Fix: Verify brace matching

Line 3119: Unmatched braces: 1 open, 0 close
  Content: static async initializeLIFF() {
  Fix: Verify brace matching

Line 3120: Unmatched braces: 1 open, 0 close
  Content: if (!LineConfig.liffId || LineConfig.liffId === 'liff-v2-your-liff-id-here') {
  Fix: Verify brace matching

Line 3124: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3126: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3130: Unmatched braces: 1 open, 0 close
  Content: if (liff.isLoggedIn()) {
  Fix: Verify brace matching

Line 3136: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3140: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3141: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3143: Unmatched braces: 1 open, 0 close
  Content: static async loginWithLINE() {
  Fix: Verify brace matching

Line 3144: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3147: Unmatched braces: 1 open, 0 close
  Content: if (!liff.isLoggedIn()) {
  Fix: Verify brace matching

Line 3153: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3159: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3160: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3162: Unmatched braces: 1 open, 0 close
  Content: static setUserFromLineProfile(profile) {
  Fix: Verify brace matching

Line 3164: Unmatched braces: 1 open, 0 close
  Content: const roleMap = {
  Fix: Verify brace matching

Line 3169: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3173: Unmatched braces: 1 open, 0 close
  Content: AppState.currentUser = {
  Fix: Verify brace matching

Line 3182: Unmatched braces: 1 open, 0 close
  Content: stats: {
  Fix: Verify brace matching

Line 3185: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3187: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3194: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3196: Unmatched braces: 1 open, 0 close
  Content: static redirectToDashboard() {
  Fix: Verify brace matching

Line 3197: Unmatched braces: 1 open, 0 close
  Content: const dashboardMap = {
  Fix: Verify brace matching

Line 3204: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3211: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 3215: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3216: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3218: Unmatched braces: 1 open, 0 close
  Content: static getPermissions(role) {
  Fix: Verify brace matching

Line 3219: Unmatched braces: 1 open, 0 close
  Content: const permissionMap = {
  Fix: Verify brace matching

Line 3225: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3227: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3229: Unmatched braces: 1 open, 0 close
  Content: static showLineLogin() {
  Fix: Verify brace matching

Line 3235: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3237: Unmatched braces: 1 open, 0 close
  Content: static showFallbackLogin() {
  Fix: Verify brace matching

Line 3245: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3247: Unmatched braces: 1 open, 0 close
  Content: static logout() {
  Fix: Verify brace matching

Line 3248: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3249: Unmatched braces: 1 open, 0 close
  Content: if (typeof liff !== 'undefined' && liff.isLoggedIn()) {
  Fix: Verify brace matching

Line 3251: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3254: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3257: Unmatched braces: 1 open, 0 close
  Content: AppState.currentUser = {
  Fix: Verify brace matching

Line 3267: Unmatched braces: 1 open, 0 close
  Content: stats: {
  Fix: Verify brace matching

Line 3273: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3275: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 3278: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3279: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3287: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3288: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3291: Unmatched braces: 1 open, 0 close
  Content: class OTPAuthentication {
  Fix: Verify brace matching

Line 3295: Unmatched braces: 1 open, 0 close
  Content: static showOTPScreen() {
  Fix: Verify brace matching

Line 3297: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3299: Unmatched braces: 1 open, 0 close
  Content: static async sendOTP() {
  Fix: Verify brace matching

Line 3303: Unmatched braces: 1 open, 0 close
  Content: if (!phone || phone.length < 10) {
  Fix: Verify brace matching

Line 3306: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3311: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3322: Unmatched braces: 1 open, 0 close
  Content: if (otpSection) {
  Fix: Verify brace matching

Line 3327: Unmatched braces: 1 open, 0 close
  Content: if (firstInput) {
  Fix: Verify brace matching

Line 3329: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3330: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3334: Unmatched braces: 1 open, 0 close
  Content: if (sendBtn) {
  Fix: Verify brace matching

Line 3336: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3343: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3344: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3346: Unmatched braces: 1 open, 0 close
  Content: static async verifyOTP() {
  Fix: Verify brace matching

Line 3350: Unmatched braces: 1 open, 0 close
  Content: if (enteredOTP.length !== 6) {
  Fix: Verify brace matching

Line 3353: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3357: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3361: Unmatched braces: 1 open, 0 close
  Content: if (enteredOTP === this.otpCode) {
  Fix: Verify brace matching

Line 3363: Unmatched braces: 1 open, 0 close
  Content: AppState.currentUser = {
  Fix: Verify brace matching

Line 3371: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3386: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3393: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3394: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3396: Unmatched braces: 1 open, 0 close
  Content: static setupOTPInputHandlers() {
  Fix: Verify brace matching

Line 3399: Unmatched parentheses: 2 open, 1 close
  Content: otpInputs.forEach((input, index) => {
  Fix: Verify parentheses matching

Line 3399: Unmatched braces: 1 open, 0 close
  Content: otpInputs.forEach((input, index) => {
  Fix: Verify brace matching

Line 3401: Unmatched parentheses: 2 open, 1 close
  Content: input.addEventListener('input', function() {
  Fix: Verify parentheses matching

Line 3401: Unmatched braces: 1 open, 0 close
  Content: input.addEventListener('input', function() {
  Fix: Verify brace matching

Line 3402: Unmatched braces: 1 open, 0 close
  Content: if (this.value.length === 1 && index < otpInputs.length - 1) {
  Fix: Verify brace matching

Line 3404: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3408: Unmatched braces: 1 open, 0 close
  Content: if (allFilled) {
  Fix: Verify brace matching

Line 3410: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3411: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3411: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3414: Unmatched parentheses: 2 open, 1 close
  Content: input.addEventListener('keydown', function(e) {
  Fix: Verify parentheses matching

Line 3414: Unmatched braces: 1 open, 0 close
  Content: input.addEventListener('keydown', function(e) {
  Fix: Verify brace matching

Line 3415: Unmatched braces: 1 open, 0 close
  Content: if (e.key === 'Backspace' && this.value === '' && index > 0) {
  Fix: Verify brace matching

Line 3417: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3418: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3418: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3421: Unmatched parentheses: 2 open, 1 close
  Content: input.addEventListener('input', function() {
  Fix: Verify parentheses matching

Line 3421: Unmatched braces: 1 open, 0 close
  Content: input.addEventListener('input', function() {
  Fix: Verify brace matching

Line 3423: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3423: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3424: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3424: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3425: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3426: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3429: Unmatched braces: 1 open, 0 close
  Content: class FallbackAuthentication {
  Fix: Verify brace matching

Line 3430: Unmatched braces: 1 open, 0 close
  Content: static login(role) {
  Fix: Verify brace matching

Line 3433: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3433: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3434: Unmatched braces: 1 open, 0 close
  Content: const userProfiles = {
  Fix: Verify brace matching

Line 3435: Unmatched braces: 1 open, 0 close
  Content: 'golfer': {
  Fix: Verify brace matching

Line 3439: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3440: Unmatched braces: 1 open, 0 close
  Content: 'caddie': {
  Fix: Verify brace matching

Line 3443: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3444: Unmatched braces: 1 open, 0 close
  Content: 'manager': {
  Fix: Verify brace matching

Line 3447: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3448: Unmatched braces: 1 open, 0 close
  Content: 'proshop': {
  Fix: Verify brace matching

Line 3451: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3452: Unmatched braces: 1 open, 0 close
  Content: 'society': {
  Fix: Verify brace matching

Line 3457: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3458: Unmatched braces: 1 open, 0 close
  Content: 'maintenance': {
  Fix: Verify brace matching

Line 3464: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3465: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3469: Unmatched braces: 1 open, 0 close
  Content: AppState.currentUser = {
  Fix: Verify brace matching

Line 3476: Unmatched braces: 1 open, 0 close
  Content: stats: {
  Fix: Verify brace matching

Line 3479: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3481: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3490: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3490: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3492: Unmatched braces: 1 open, 0 close
  Content: if (actualProfile && actualProfile.personalInfo && actualProfile.personalInfo.firstName) {
  Fix: Verify brace matching

Line 3495: Unmatched braces: 1 open, 0 close
  Content: if (actualName.length > 1) {
  Fix: Verify brace matching

Line 3497: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3498: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3503: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 3503: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 3509: Unmatched braces: 1 open, 0 close
  Content: const dashboardMap = {
  Fix: Verify brace matching

Line 3516: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3521: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 3521: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 3522: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3523: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3529: Unmatched braces: 1 open, 0 close
  Content: class NotificationManager {
  Fix: Verify brace matching

Line 3530: Unmatched braces: 1 open, 0 close
  Content: static show(message, type = 'info', duration = null) {
  Fix: Verify brace matching

Line 3533: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3534: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3537: Unmatched braces: 1 open, 0 close
  Content: class LoadingManager {
  Fix: Verify brace matching

Line 3538: Unmatched braces: 1 open, 0 close
  Content: static show(message = 'Loading...') {
  Fix: Verify brace matching

Line 3541: Unmatched braces: 1 open, 0 close
  Content: if (!overlay) {
  Fix: Verify brace matching

Line 3546: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3556: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3558: Unmatched braces: 1 open, 0 close
  Content: static hide() {
  Fix: Verify brace matching

Line 3560: Unmatched braces: 1 open, 0 close
  Content: if (overlay) {
  Fix: Verify brace matching

Line 3562: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3563: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3564: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3567: Unmatched braces: 1 open, 0 close
  Content: class UserInterface {
  Fix: Verify brace matching

Line 3568: Unmatched braces: 1 open, 0 close
  Content: static updateUserDisplays() {
  Fix: Verify brace matching

Line 3571: Unmatched parentheses: 1 open, 0 close
  Content: nameElements.forEach(element => {
  Fix: Verify parentheses matching

Line 3571: Unmatched braces: 1 open, 0 close
  Content: nameElements.forEach(element => {
  Fix: Verify brace matching

Line 3573: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3573: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3577: Unmatched parentheses: 1 open, 0 close
  Content: avatarElements.forEach(element => {
  Fix: Verify parentheses matching

Line 3577: Unmatched braces: 1 open, 0 close
  Content: avatarElements.forEach(element => {
  Fix: Verify brace matching

Line 3578: Unmatched braces: 1 open, 0 close
  Content: if (AppState.currentUser.avatar) {
  Fix: Verify brace matching

Line 3583: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3584: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3584: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3588: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3590: Unmatched braces: 1 open, 0 close
  Content: static updateRoleSpecificDisplays() {
  Fix: Verify brace matching

Line 3594: Unmatched braces: 1 open, 0 close
  Content: if (role === 'golfer' && AppState.currentUser.handicap) {
  Fix: Verify brace matching

Line 3596: Unmatched parentheses: 1 open, 0 close
  Content: handicapElements.forEach(element => {
  Fix: Verify parentheses matching

Line 3596: Unmatched braces: 1 open, 0 close
  Content: handicapElements.forEach(element => {
  Fix: Verify brace matching

Line 3598: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3598: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3599: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3602: Unmatched braces: 1 open, 0 close
  Content: if (role === 'caddie' && AppState.currentUser.stats.rating) {
  Fix: Verify brace matching

Line 3604: Unmatched parentheses: 1 open, 0 close
  Content: ratingElements.forEach(element => {
  Fix: Verify parentheses matching

Line 3604: Unmatched braces: 1 open, 0 close
  Content: ratingElements.forEach(element => {
  Fix: Verify brace matching

Line 3606: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3606: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3607: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3608: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3609: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3612: Unmatched braces: 1 open, 0 close
  Content: class EmergencySystem {
  Fix: Verify brace matching

Line 3613: Unmatched braces: 1 open, 0 close
  Content: static emergencyTypes = {
  Fix: Verify brace matching

Line 3614: Unmatched braces: 1 open, 0 close
  Content: medical: {
  Fix: Verify brace matching

Line 3622: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3623: Unmatched braces: 1 open, 0 close
  Content: lightning_warning: {
  Fix: Verify brace matching

Line 3633: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3634: Unmatched braces: 1 open, 0 close
  Content: stop_play: {
  Fix: Verify brace matching

Line 3644: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3645: Unmatched braces: 1 open, 0 close
  Content: resume_play: {
  Fix: Verify brace matching

Line 3655: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3656: Unmatched braces: 1 open, 0 close
  Content: weather: {
  Fix: Verify brace matching

Line 3664: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3665: Unmatched braces: 1 open, 0 close
  Content: security: {
  Fix: Verify brace matching

Line 3673: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3674: Unmatched braces: 1 open, 0 close
  Content: equipment: {
  Fix: Verify brace matching

Line 3682: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 3683: Unmatched braces: 1 open, 0 close
  Content: lost: {
  Fix: Verify brace matching

Line 3691: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3692: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3695: Unmatched braces: 1 open, 0 close
  Content: static emergencyContacts = {
  Fix: Verify brace matching

Line 3702: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3704: Unmatched brackets: 1 open, 0 close
  Content: static safetyZones = [
  Fix: Verify bracket matching

Line 3709: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 3711: Unmatched braces: 1 open, 0 close
  Content: static sendAlert(alertType = null) {
  Fix: Verify brace matching

Line 3712: Unmatched braces: 1 open, 0 close
  Content: if (alertType) {
  Fix: Verify brace matching

Line 3716: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3717: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3719: Unmatched braces: 1 open, 0 close
  Content: static showEmergencyModal() {
  Fix: Verify brace matching

Line 3734: Unmatched parentheses: 3 open, 2 close
  Content: ${Object.entries(this.emergencyTypes).map(([key, type]) => {
  Fix: Verify parentheses matching

Line 3734: Unmatched braces: 2 open, 0 close
  Content: ${Object.entries(this.emergencyTypes).map(([key, type]) => {
  Fix: Verify brace matching

Line 3757: Unmatched parentheses: 2 open, 3 close
  Content: }).filter(Boolean).join('')}
  Fix: Verify parentheses matching

Line 3757: Unmatched braces: 0 open, 2 close
  Content: }).filter(Boolean).join('')}
  Fix: Verify brace matching

Line 3769: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3771: Unmatched braces: 1 open, 0 close
  Content: static sendSpecificAlert(alertType) {
  Fix: Verify brace matching

Line 3781: Unmatched braces: 1 open, 0 close
  Content: const alertData = {
  Fix: Verify brace matching

Line 3788: Unmatched braces: 1 open, 0 close
  Content: location: currentLocation ? {
  Fix: Verify brace matching

Line 3792: Unmatched braces: 0 open, 1 close
  Content: } : null,
  Fix: Verify brace matching

Line 3795: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3808: Unmatched braces: 1 open, 0 close
  Content: if (typeof SimpleCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 3811: Unmatched parentheses: 1 open, 0 close
  Content: .catch(err => {
  Fix: Verify parentheses matching

Line 3811: Unmatched braces: 1 open, 0 close
  Content: .catch(err => {
  Fix: Verify brace matching

Line 3814: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 3814: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 3815: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3826: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3828: Unmatched braces: 1 open, 0 close
  Content: static showEmergencyInstructions(alertType, alertId) {
  Fix: Verify brace matching

Line 3832: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 3832: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 3862: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 3862: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 3863: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3865: Unmatched braces: 1 open, 0 close
  Content: static getEmergencyInstructions(alertType) {
  Fix: Verify brace matching

Line 3866: Unmatched braces: 1 open, 0 close
  Content: const instructions = {
  Fix: Verify brace matching

Line 3872: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 3874: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3877: Unmatched braces: 1 open, 0 close
  Content: static createFullScreenEmergencyOverlay(alert) {
  Fix: Verify brace matching

Line 3916: Unmatched braces: 1 open, 0 close
  Content: if (!document.querySelector('#emergency-animation-styles')) {
  Fix: Verify brace matching

Line 3920: Unmatched braces: 1 open, 0 close
  Content: @keyframes emergency-pulse {
  Fix: Verify brace matching

Line 3924: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3927: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3933: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 3934: Unmatched braces: 1 open, 0 close
  Content: if (typeof AlertSoundManager !== 'undefined') {
  Fix: Verify brace matching

Line 3936: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3939: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3943: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3946: Unmatched braces: 1 open, 0 close
  Content: static playEmergencySiren() {
  Fix: Verify brace matching

Line 3947: Unmatched braces: 1 open, 0 close
  Content: if (typeof window.playEmergencySiren === 'function') {
  Fix: Verify brace matching

Line 3949: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3951: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3953: Unmatched braces: 1 open, 0 close
  Content: static playFallbackAlert() {
  Fix: Verify brace matching

Line 3954: Unmatched braces: 1 open, 0 close
  Content: if (typeof window.playFallbackAlert === 'function') {
  Fix: Verify brace matching

Line 3956: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3958: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3960: Unmatched braces: 1 open, 0 close
  Content: static showSafetyInfo() {
  Fix: Verify brace matching

Line 3971: Unmatched parentheses: 3 open, 2 close
  Content: ${Object.entries(this.emergencyContacts).map(([key, contact]) => `
  Fix: Verify parentheses matching

Line 3971: Unmatched braces: 1 open, 0 close
  Content: ${Object.entries(this.emergencyContacts).map(([key, contact]) => `
  Fix: Verify brace matching

Line 3976: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 3976: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 3981: Unmatched parentheses: 1 open, 0 close
  Content: ${this.safetyZones.map(zone => `
  Fix: Verify parentheses matching

Line 3981: Unmatched braces: 1 open, 0 close
  Content: ${this.safetyZones.map(zone => `
  Fix: Verify brace matching

Line 3986: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 3986: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 3997: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 3999: Unmatched braces: 1 open, 0 close
  Content: static showNearestSafetyZone() {
  Fix: Verify brace matching

Line 4001: Unmatched braces: 1 open, 0 close
  Content: if (!currentPos) {
  Fix: Verify brace matching

Line 4004: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4009: Unmatched parentheses: 1 open, 0 close
  Content: this.safetyZones.forEach(zone => {
  Fix: Verify parentheses matching

Line 4009: Unmatched braces: 1 open, 0 close
  Content: this.safetyZones.forEach(zone => {
  Fix: Verify brace matching

Line 4011: Unmatched braces: 1 open, 0 close
  Content: if (distance < minDistance) {
  Fix: Verify brace matching

Line 4014: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4015: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4015: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4018: Unmatched parentheses: 1 open, 0 close
  Content: NotificationManager.show(
  Fix: Verify parentheses matching

Line 4021: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 4022: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4024: Unmatched braces: 1 open, 0 close
  Content: static closeEmergencyModal() {
  Fix: Verify brace matching

Line 4025: Unmatched braces: 1 open, 0 close
  Content: if (window.currentEmergencyModal) {
  Fix: Verify brace matching

Line 4028: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4029: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4031: Unmatched braces: 1 open, 0 close
  Content: static closeInstructionModal() {
  Fix: Verify brace matching

Line 4032: Unmatched braces: 1 open, 0 close
  Content: if (window.currentInstructionModal) {
  Fix: Verify brace matching

Line 4035: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4036: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4038: Unmatched braces: 1 open, 0 close
  Content: static closeSafetyModal() {
  Fix: Verify brace matching

Line 4039: Unmatched braces: 1 open, 0 close
  Content: if (window.currentSafetyModal) {
  Fix: Verify brace matching

Line 4042: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4043: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4044: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4047: Unmatched braces: 1 open, 0 close
  Content: class PersistentEmergencyAlerts {
  Fix: Verify brace matching

Line 4048: Unmatched braces: 1 open, 0 close
  Content: static updateAllOverviewAlerts() {
  Fix: Verify brace matching

Line 4056: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4058: Unmatched braces: 1 open, 0 close
  Content: static updateRoleAlerts(role, alerts) {
  Fix: Verify brace matching

Line 4066: Unmatched parentheses: 1 open, 0 close
  Content: const relevantAlerts = alerts.filter(alert => {
  Fix: Verify parentheses matching

Line 4066: Unmatched braces: 1 open, 0 close
  Content: const relevantAlerts = alerts.filter(alert => {
  Fix: Verify brace matching

Line 4069: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4069: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4071: Unmatched braces: 1 open, 0 close
  Content: if (relevantAlerts.length === 0) {
  Fix: Verify brace matching

Line 4074: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4080: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4082: Unmatched braces: 1 open, 0 close
  Content: static createAlertHTML(alert, role) {
  Fix: Verify brace matching

Line 4105: Unmatched braces: 1 open, 0 close
  Content: ${alertType.description ? `
  Fix: Verify brace matching

Line 4107: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 4111: Unmatched braces: 1 open, 0 close
  Content: ${alert.location ? `
  Fix: Verify brace matching

Line 4113: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 4117: Unmatched braces: 1 open, 0 close
  Content: ${!isLightningSafety ? `
  Fix: Verify brace matching

Line 4122: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 4131: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4133: Unmatched braces: 1 open, 0 close
  Content: static getTimeAgo(timestamp) {
  Fix: Verify brace matching

Line 4147: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4149: Unmatched braces: 1 open, 0 close
  Content: static acknowledgeAlert(alertId) {
  Fix: Verify brace matching

Line 4151: Unmatched braces: 1 open, 0 close
  Content: if (alert) {
  Fix: Verify brace matching

Line 4158: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4159: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4161: Unmatched braces: 1 open, 0 close
  Content: static resolveAlert(alertId) {
  Fix: Verify brace matching

Line 4163: Unmatched braces: 1 open, 0 close
  Content: if (alertIndex > -1) {
  Fix: Verify brace matching

Line 4178: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 4181: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4185: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4186: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4187: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4190: Unmatched braces: 1 open, 0 close
  Content: class LightningSafetySystem {
  Fix: Verify brace matching

Line 4191: Unmatched braces: 1 open, 0 close
  Content: static async playLightningAlert(alertType) {
  Fix: Verify brace matching

Line 4192: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4200: Unmatched braces: 1 open, 0 close
  Content: if (audioContext.state === 'suspended') {
  Fix: Verify brace matching

Line 4202: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4208: Unmatched braces: 1 open, 0 close
  Content: if (alertType === 'lightning_warning') {
  Fix: Verify brace matching

Line 4214: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4223: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4224: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4226: Unmatched braces: 1 open, 0 close
  Content: static async requestAudioPermissions() {
  Fix: Verify brace matching

Line 4227: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4229: Unmatched braces: 1 open, 0 close
  Content: if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
  Fix: Verify brace matching

Line 4230: Unmatched parentheses: 1 open, 0 close
  Content: const stream = await navigator.mediaDevices.getUserMedia({
  Fix: Verify parentheses matching

Line 4230: Unmatched braces: 1 open, 0 close
  Content: const stream = await navigator.mediaDevices.getUserMedia({
  Fix: Verify brace matching

Line 4233: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4233: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4236: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4239: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4240: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4242: Unmatched braces: 1 open, 0 close
  Content: static triggerVibrationAlert(alertType) {
  Fix: Verify brace matching

Line 4243: Unmatched braces: 1 open, 0 close
  Content: if ('vibrate' in navigator) {
  Fix: Verify brace matching

Line 4247: Unmatched braces: 1 open, 0 close
  Content: switch (alertType) {
  Fix: Verify brace matching

Line 4262: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4265: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4266: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4268: Unmatched braces: 1 open, 0 close
  Content: static showEmergencyOverlay(alertType) {
  Fix: Verify brace matching

Line 4303: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4303: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4304: Unmatched braces: 1 open, 0 close
  Content: if (overlay.parentNode) {
  Fix: Verify brace matching

Line 4307: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4308: Unmatched parentheses: 0 open, 1 close
  Content: }, autoRemoveTime);
  Fix: Verify parentheses matching

Line 4308: Unmatched braces: 0 open, 1 close
  Content: }, autoRemoveTime);
  Fix: Verify brace matching

Line 4309: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4311: Unmatched braces: 1 open, 0 close
  Content: static acknowledgeEmergency(button) {
  Fix: Verify brace matching

Line 4314: Unmatched braces: 1 open, 0 close
  Content: if (overlay) {
  Fix: Verify brace matching

Line 4316: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4318: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4320: Unmatched braces: 1 open, 0 close
  Content: static startCountdown(alertType, overlay) {
  Fix: Verify brace matching

Line 4327: Unmatched parentheses: 2 open, 1 close
  Content: const countdown = setInterval(() => {
  Fix: Verify parentheses matching

Line 4327: Unmatched braces: 1 open, 0 close
  Content: const countdown = setInterval(() => {
  Fix: Verify brace matching

Line 4331: Unmatched braces: 1 open, 0 close
  Content: if (timeLeft <= 0) {
  Fix: Verify brace matching

Line 4333: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4334: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 4334: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 4335: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4337: Unmatched braces: 1 open, 0 close
  Content: static async requestWakeLock() {
  Fix: Verify brace matching

Line 4338: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4339: Unmatched braces: 1 open, 0 close
  Content: if ('wakeLock' in navigator) {
  Fix: Verify brace matching

Line 4342: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4345: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4346: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4348: Unmatched braces: 1 open, 0 close
  Content: static releaseWakeLock() {
  Fix: Verify brace matching

Line 4349: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4350: Unmatched braces: 1 open, 0 close
  Content: if (this.wakeLock) {
  Fix: Verify brace matching

Line 4354: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4357: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4358: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4360: Unmatched braces: 1 open, 0 close
  Content: static playWarningSound(audioContext) {
  Fix: Verify brace matching

Line 4362: Unmatched braces: 1 open, 0 close
  Content: for (let i = 0; i < 3; i++) {
  Fix: Verify brace matching

Line 4363: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4363: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4365: Unmatched parentheses: 0 open, 1 close
  Content: }, i * 500);
  Fix: Verify parentheses matching

Line 4365: Unmatched braces: 0 open, 1 close
  Content: }, i * 500);
  Fix: Verify brace matching

Line 4366: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4367: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4369: Unmatched braces: 1 open, 0 close
  Content: static playStopPlaySound(audioContext) {
  Fix: Verify brace matching

Line 4372: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4374: Unmatched braces: 1 open, 0 close
  Content: static playResumeSound(audioContext) {
  Fix: Verify brace matching

Line 4379: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4381: Unmatched braces: 1 open, 0 close
  Content: static playBeep(audioContext, frequency, duration) {
  Fix: Verify brace matching

Line 4397: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4399: Unmatched braces: 1 open, 0 close
  Content: static playSiren(audioContext, duration) {
  Fix: Verify brace matching

Line 4412: Unmatched braces: 1 open, 0 close
  Content: for (let i = 1; i < duration; i++) {
  Fix: Verify brace matching

Line 4415: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4423: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4424: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4427: Unmatched braces: 1 open, 0 close
  Content: class EmergencyDebugger {
  Fix: Verify brace matching

Line 4428: Unmatched braces: 1 open, 0 close
  Content: static debugAlertDelivery() {
  Fix: Verify brace matching

Line 4435: Unmatched parentheses: 1 open, 0 close
  Content: ['golfer', 'caddie', 'manager', 'proshop', 'maintenance'].forEach(role => {
  Fix: Verify parentheses matching

Line 4435: Unmatched braces: 1 open, 0 close
  Content: ['golfer', 'caddie', 'manager', 'proshop', 'maintenance'].forEach(role => {
  Fix: Verify brace matching

Line 4438: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4438: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4441: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4443: Unmatched braces: 1 open, 0 close
  Content: static testAlertToAllRoles() {
  Fix: Verify brace matching

Line 4447: Unmatched braces: 1 open, 0 close
  Content: const testAlert = {
  Fix: Verify brace matching

Line 4455: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4465: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4466: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4473: Unmatched braces: 1 open, 0 close
  Content: EmergencySystem.sendSpecificAlert = function(alertType) {
  Fix: Verify brace matching

Line 4479: Unmatched braces: 1 open, 0 close
  Content: if (['lightning_warning', 'stop_play', 'resume_play'].includes(alertType)) {
  Fix: Verify brace matching

Line 4481: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4484: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4484: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4491: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 4494: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4498: Unmatched parentheses: 0 open, 1 close
  Content: }, 2500); // Wait for alert to be added to activeAlerts
  Fix: Verify parentheses matching

Line 4498: Unmatched braces: 0 open, 1 close
  Content: }, 2500); // Wait for alert to be added to activeAlerts
  Fix: Verify brace matching

Line 4499: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4502: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 4502: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 4505: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4544: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4545: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4545: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4550: Unmatched braces: 1 open, 0 close
  Content: function showScreen(screenId) {
  Fix: Verify brace matching

Line 4552: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4554: Unmatched braces: 1 open, 0 close
  Content: function showTab(dashboardId, tabName, event) {
  Fix: Verify brace matching

Line 4556: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4558: Unmatched braces: 1 open, 0 close
  Content: function login(role) {
  Fix: Verify brace matching

Line 4560: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4562: Unmatched braces: 1 open, 0 close
  Content: function loginWithCustomProfile(profileData) {
  Fix: Verify brace matching

Line 4568: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4568: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4570: Unmatched braces: 1 open, 0 close
  Content: AppState.currentUser = {
  Fix: Verify brace matching

Line 4580: Unmatched braces: 1 open, 0 close
  Content: stats: {
  Fix: Verify brace matching

Line 4586: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 4589: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 4593: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4594: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4610: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 4610: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 4611: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4613: Unmatched braces: 1 open, 0 close
  Content: function ensureCleanSlateForNewUser(profileData) {
  Fix: Verify brace matching

Line 4619: Unmatched brackets: 1 open, 0 close
  Content: const keysToPreserve = [
  Fix: Verify bracket matching

Line 4624: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 4627: Unmatched brackets: 1 open, 0 close
  Content: const dataKeysToForceRemove = [
  Fix: Verify bracket matching

Line 4636: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 4640: Unmatched braces: 1 open, 0 close
  Content: for (let i = 0; i < localStorage.length; i++) {
  Fix: Verify brace matching

Line 4642: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4645: Unmatched parentheses: 1 open, 0 close
  Content: dataKeysToForceRemove.forEach(key => {
  Fix: Verify parentheses matching

Line 4645: Unmatched braces: 1 open, 0 close
  Content: dataKeysToForceRemove.forEach(key => {
  Fix: Verify brace matching

Line 4647: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4647: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4650: Unmatched parentheses: 1 open, 0 close
  Content: allKeys.forEach(key => {
  Fix: Verify parentheses matching

Line 4650: Unmatched braces: 1 open, 0 close
  Content: allKeys.forEach(key => {
  Fix: Verify brace matching

Line 4651: Unmatched braces: 1 open, 0 close
  Content: if (!keysToPreserve.includes(key) && !key.startsWith('profile_')) {
  Fix: Verify brace matching

Line 4653: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4654: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4654: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4657: Unmatched braces: 1 open, 0 close
  Content: if (window.BookingManager) {
  Fix: Verify brace matching

Line 4665: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4667: Unmatched braces: 1 open, 0 close
  Content: if (window.FoodOrderingSystem) {
  Fix: Verify brace matching

Line 4671: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4673: Unmatched braces: 1 open, 0 close
  Content: if (window.ScheduleManager) {
  Fix: Verify brace matching

Line 4680: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4682: Unmatched braces: 1 open, 0 close
  Content: if (window.ChatSystem) {
  Fix: Verify brace matching

Line 4683: Unmatched braces: 1 open, 0 close
  Content: ChatSystem.currentUser = {
  Fix: Verify brace matching

Line 4688: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4692: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4708: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4708: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4709: Unmatched braces: 1 open, 0 close
  Content: if (window.BookingManager) {
  Fix: Verify brace matching

Line 4713: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4714: Unmatched braces: 1 open, 0 close
  Content: if (window.ScheduleManager) {
  Fix: Verify brace matching

Line 4716: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4718: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 4718: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 4724: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 4724: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 4726: Unmatched parentheses: 0 open, 1 close
  Content: }, 200);
  Fix: Verify parentheses matching

Line 4726: Unmatched braces: 0 open, 1 close
  Content: }, 200);
  Fix: Verify brace matching

Line 4727: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4729: Unmatched braces: 1 open, 0 close
  Content: function resetRoleSpecificDisplays(role) {
  Fix: Verify brace matching

Line 4731: Unmatched braces: 1 open, 0 close
  Content: switch (role) {
  Fix: Verify brace matching

Line 4734: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.total-rounds')) {
  Fix: Verify brace matching

Line 4736: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4737: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.handicap-display')) {
  Fix: Verify brace matching

Line 4739: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4744: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.monthly-earnings')) {
  Fix: Verify brace matching

Line 4746: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4747: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.total-rounds-caddie')) {
  Fix: Verify brace matching

Line 4749: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4750: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.rating-display')) {
  Fix: Verify brace matching

Line 4752: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4757: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.staff-count')) {
  Fix: Verify brace matching

Line 4759: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4764: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.daily-sales')) {
  Fix: Verify brace matching

Line 4766: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4767: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.items-sold')) {
  Fix: Verify brace matching

Line 4769: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4774: Unmatched braces: 1 open, 0 close
  Content: if (document.querySelector('.tasks-completed')) {
  Fix: Verify brace matching

Line 4776: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4778: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4782: Unmatched parentheses: 1 open, 0 close
  Content: dashboardCards.forEach(card => {
  Fix: Verify parentheses matching

Line 4782: Unmatched braces: 1 open, 0 close
  Content: dashboardCards.forEach(card => {
  Fix: Verify brace matching

Line 4784: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4784: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4787: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4789: Unmatched braces: 1 open, 0 close
  Content: function refreshDashboardContent() {
  Fix: Verify brace matching

Line 4796: Unmatched braces: 1 open, 0 close
  Content: if (scheduleContainer) {
  Fix: Verify brace matching

Line 4798: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4802: Unmatched braces: 1 open, 0 close
  Content: if (overviewBookings) {
  Fix: Verify brace matching

Line 4804: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4808: Unmatched parentheses: 1 open, 0 close
  Content: statElements.forEach(element => {
  Fix: Verify parentheses matching

Line 4808: Unmatched braces: 1 open, 0 close
  Content: statElements.forEach(element => {
  Fix: Verify brace matching

Line 4809: Unmatched braces: 1 open, 0 close
  Content: if (element.textContent && !isNaN(element.textContent)) {
  Fix: Verify brace matching

Line 4811: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4812: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4812: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4815: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4817: Unmatched braces: 1 open, 0 close
  Content: function logout() {
  Fix: Verify brace matching

Line 4819: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4822: Unmatched braces: 1 open, 0 close
  Content: function showCreateProfileScreen() {
  Fix: Verify brace matching

Line 4824: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4826: Unmatched braces: 1 open, 0 close
  Content: function goBackToLogin() {
  Fix: Verify brace matching

Line 4828: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4831: Unmatched braces: 1 open, 0 close
  Content: function showMyProfiles() {
  Fix: Verify brace matching

Line 4842: Unmatched braces: 1 open, 0 close
  Content: ${savedProfiles.length === 0 ? `
  Fix: Verify brace matching

Line 4849: Unmatched parentheses: 1 open, 0 close
  Content: ${savedProfiles.map(profile => `
  Fix: Verify parentheses matching

Line 4849: Unmatched braces: 1 open, 0 close
  Content: ${savedProfiles.map(profile => `
  Fix: Verify brace matching

Line 4869: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 4869: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 4876: Unmatched braces: 0 open, 1 close
  Content: `}
  Fix: Verify brace matching

Line 4881: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4883: Unmatched braces: 1 open, 0 close
  Content: function getRoleColor(role) {
  Fix: Verify brace matching

Line 4884: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 4891: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4893: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4895: Unmatched braces: 1 open, 0 close
  Content: function closeProfilesModal() {
  Fix: Verify brace matching

Line 4897: Unmatched braces: 1 open, 0 close
  Content: if (modal) {
  Fix: Verify brace matching

Line 4899: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4900: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4902: Unmatched braces: 1 open, 0 close
  Content: function selectProfile(profileId) {
  Fix: Verify brace matching

Line 4906: Unmatched braces: 1 open, 0 close
  Content: if (selectedProfile) {
  Fix: Verify brace matching

Line 4909: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4910: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4912: Unmatched braces: 1 open, 0 close
  Content: function deleteProfile(profileId, event) {
  Fix: Verify brace matching

Line 4915: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to delete this profile? This action cannot be undone.')) {
  Fix: Verify brace matching

Line 4916: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4924: Unmatched braces: 1 open, 0 close
  Content: if (deletedProfile) {
  Fix: Verify brace matching

Line 4929: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4939: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4940: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4941: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4943: Unmatched braces: 1 open, 0 close
  Content: function cleanupProfileData(role, profileName, profileId) {
  Fix: Verify brace matching

Line 4944: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 4954: Unmatched brackets: 1 open, 0 close
  Content: const keysToClean = [
  Fix: Verify bracket matching

Line 4963: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 4965: Unmatched parentheses: 1 open, 0 close
  Content: keysToClean.forEach(key => {
  Fix: Verify parentheses matching

Line 4965: Unmatched braces: 1 open, 0 close
  Content: keysToClean.forEach(key => {
  Fix: Verify brace matching

Line 4967: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4967: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4972: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4973: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4976: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 4976: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 4978: Unmatched parentheses: 1 open, 0 close
  Content: roleInputs.forEach(input => {
  Fix: Verify parentheses matching

Line 4978: Unmatched braces: 1 open, 0 close
  Content: roleInputs.forEach(input => {
  Fix: Verify brace matching

Line 4979: Unmatched parentheses: 2 open, 1 close
  Content: input.addEventListener('change', function() {
  Fix: Verify parentheses matching

Line 4979: Unmatched braces: 1 open, 0 close
  Content: input.addEventListener('change', function() {
  Fix: Verify brace matching

Line 4980: Unmatched braces: 1 open, 0 close
  Content: if (this.checked) {
  Fix: Verify brace matching

Line 4982: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 4983: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4983: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4984: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 4984: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 4988: Unmatched braces: 1 open, 0 close
  Content: if (profilePictureInput) {
  Fix: Verify brace matching

Line 4989: Unmatched parentheses: 2 open, 1 close
  Content: profilePictureInput.addEventListener('change', function(event) {
  Fix: Verify parentheses matching

Line 4989: Unmatched braces: 1 open, 0 close
  Content: profilePictureInput.addEventListener('change', function(event) {
  Fix: Verify brace matching

Line 4991: Unmatched braces: 1 open, 0 close
  Content: if (file) {
  Fix: Verify brace matching

Line 4993: Unmatched braces: 1 open, 0 close
  Content: reader.onload = function(e) {
  Fix: Verify brace matching

Line 4997: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 4999: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5000: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5000: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5001: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5005: Unmatched braces: 1 open, 0 close
  Content: if (profileForm) {
  Fix: Verify brace matching

Line 5007: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5008: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5008: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5010: Unmatched braces: 1 open, 0 close
  Content: function showRoleSpecificFields(role) {
  Fix: Verify brace matching

Line 5016: Unmatched braces: 1 open, 0 close
  Content: switch(role) {
  Fix: Verify brace matching

Line 5256: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5259: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5261: Unmatched braces: 1 open, 0 close
  Content: function removeImage() {
  Fix: Verify brace matching

Line 5265: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5267: Unmatched braces: 1 open, 0 close
  Content: function handleProfileCreation(event) {
  Fix: Verify brace matching

Line 5286: Unmatched braces: 1 open, 0 close
  Content: switch(profileData.role) {
  Fix: Verify brace matching

Line 5325: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5331: Unmatched braces: 1 open, 0 close
  Content: if (profilePicture && profilePicture.size > 0) {
  Fix: Verify brace matching

Line 5335: Unmatched braces: 1 open, 0 close
  Content: reader.onload = function(e) {
  Fix: Verify brace matching

Line 5338: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 5342: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5343: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5345: Unmatched braces: 1 open, 0 close
  Content: function saveProfile(profileData) {
  Fix: Verify brace matching

Line 5346: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 5353: Unmatched braces: 1 open, 0 close
  Content: currentUser = {
  Fix: Verify brace matching

Line 5358: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 5362: Unmatched braces: 1 open, 0 close
  Content: const formattedProfile = {
  Fix: Verify brace matching

Line 5363: Unmatched braces: 1 open, 0 close
  Content: personalInfo: {
  Fix: Verify brace matching

Line 5368: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5372: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 5376: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 5379: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5384: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 5384: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 5386: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 5386: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 5391: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5392: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5394: Unmatched braces: 1 open, 0 close
  Content: function loginWithLINE() {
  Fix: Verify brace matching

Line 5396: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5398: Unmatched braces: 1 open, 0 close
  Content: function showOTPScreen() {
  Fix: Verify brace matching

Line 5400: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5402: Unmatched braces: 1 open, 0 close
  Content: function sendOTP() {
  Fix: Verify brace matching

Line 5404: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5406: Unmatched braces: 1 open, 0 close
  Content: function verifyOTP() {
  Fix: Verify brace matching

Line 5408: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5410: Unmatched braces: 1 open, 0 close
  Content: function sendEmergencyAlert() {
  Fix: Verify brace matching

Line 5412: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5415: Unmatched braces: 1 open, 0 close
  Content: function removeDuplicateBookings() {
  Fix: Verify brace matching

Line 5416: Unmatched braces: 1 open, 0 close
  Content: if (typeof BookingManager !== 'undefined') {
  Fix: Verify brace matching

Line 5420: Unmatched braces: 1 open, 0 close
  Content: if (typeof ScheduleSystem !== 'undefined') {
  Fix: Verify brace matching

Line 5422: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5427: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5428: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5430: Unmatched braces: 1 open, 0 close
  Content: function clearAllBookings() {
  Fix: Verify brace matching

Line 5431: Unmatched braces: 1 open, 0 close
  Content: if (typeof BookingManager !== 'undefined') {
  Fix: Verify brace matching

Line 5435: Unmatched braces: 1 open, 0 close
  Content: if (typeof ScheduleSystem !== 'undefined') {
  Fix: Verify brace matching

Line 5437: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5442: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5443: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5446: Unmatched braces: 1 open, 0 close
  Content: function showGolferTab(tabName, event) {
  Fix: Verify brace matching

Line 5448: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5450: Unmatched braces: 1 open, 0 close
  Content: function showCaddyTab(tabName, event) {
  Fix: Verify brace matching

Line 5452: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5454: Unmatched braces: 1 open, 0 close
  Content: function showManagerTab(tabName, event) {
  Fix: Verify brace matching

Line 5456: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5458: Unmatched braces: 1 open, 0 close
  Content: function showProshopTab(tabName, event) {
  Fix: Verify brace matching

Line 5460: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5462: Unmatched braces: 1 open, 0 close
  Content: function showMaintenanceTab(tabName, event) {
  Fix: Verify brace matching

Line 5464: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5473: Unmatched braces: 1 open, 0 close
  Content: const FoodOrderingSystem = {
  Fix: Verify brace matching

Line 5475: Unmatched braces: 1 open, 0 close
  Content: menuItems: {
  Fix: Verify brace matching

Line 5518: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5520: Unmatched braces: 1 open, 0 close
  Content: categories: {
  Fix: Verify brace matching

Line 5527: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5529: Unmatched brackets: 1 open, 0 close
  Content: orderHistory: [
  Fix: Verify bracket matching

Line 5533: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 5535: Unmatched braces: 1 open, 0 close
  Content: deliveryOptions: {
  Fix: Verify brace matching

Line 5536: Unmatched braces: 1 open, 0 close
  Content: 'course-delivery': {
  Fix: Verify brace matching

Line 5543: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5544: Unmatched braces: 1 open, 0 close
  Content: 'clubhouse-pickup': {
  Fix: Verify brace matching

Line 5551: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5552: Unmatched braces: 1 open, 0 close
  Content: 'cart-service': {
  Fix: Verify brace matching

Line 5559: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5560: Unmatched braces: 1 open, 0 close
  Content: 'restaurant-dining': {
  Fix: Verify brace matching

Line 5568: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 5569: Unmatched braces: 1 open, 0 close
  Content: 'post-round-ready': {
  Fix: Verify brace matching

Line 5577: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5578: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5579: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 5582: Unmatched braces: 1 open, 0 close
  Content: function addToFoodCart(itemId) {
  Fix: Verify brace matching

Line 5584: Unmatched braces: 1 open, 0 close
  Content: if (!item || !item.available) {
  Fix: Verify brace matching

Line 5587: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5591: Unmatched braces: 1 open, 0 close
  Content: if (existingItem) {
  Fix: Verify brace matching

Line 5594: Unmatched parentheses: 1 open, 0 close
  Content: foodCart.push({
  Fix: Verify parentheses matching

Line 5594: Unmatched braces: 1 open, 0 close
  Content: foodCart.push({
  Fix: Verify brace matching

Line 5602: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5602: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5603: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5607: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5609: Unmatched braces: 1 open, 0 close
  Content: function removeFromFoodCart(itemId) {
  Fix: Verify brace matching

Line 5613: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5615: Unmatched braces: 1 open, 0 close
  Content: function updateFoodCartQuantity(itemId, change) {
  Fix: Verify brace matching

Line 5617: Unmatched braces: 1 open, 0 close
  Content: if (item) {
  Fix: Verify brace matching

Line 5619: Unmatched braces: 1 open, 0 close
  Content: if (item.quantity <= 0) {
  Fix: Verify brace matching

Line 5623: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5624: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5625: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5627: Unmatched braces: 1 open, 0 close
  Content: function updateFoodCartDisplay() {
  Fix: Verify brace matching

Line 5640: Unmatched braces: 1 open, 0 close
  Content: if (foodCart.length === 0) {
  Fix: Verify brace matching

Line 5645: Unmatched parentheses: 1 open, 0 close
  Content: foodCart.forEach(item => {
  Fix: Verify parentheses matching

Line 5645: Unmatched braces: 1 open, 0 close
  Content: foodCart.forEach(item => {
  Fix: Verify brace matching

Line 5679: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5679: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5680: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5690: Unmatched braces: 1 open, 0 close
  Content: if (placeOrderBtn) {
  Fix: Verify brace matching

Line 5692: Unmatched braces: 1 open, 0 close
  Content: if (foodCart.length === 0) {
  Fix: Verify brace matching

Line 5696: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5697: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5698: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5700: Unmatched braces: 1 open, 0 close
  Content: function placeOrder() {
  Fix: Verify brace matching

Line 5701: Unmatched braces: 1 open, 0 close
  Content: if (foodCart.length === 0) {
  Fix: Verify brace matching

Line 5704: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5708: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5710: Unmatched braces: 1 open, 0 close
  Content: function filterFoodMenu(category) {
  Fix: Verify brace matching

Line 5715: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.food-category-btn').forEach(btn => {
  Fix: Verify parentheses matching

Line 5715: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.food-category-btn').forEach(btn => {
  Fix: Verify brace matching

Line 5718: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5718: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5721: Unmatched braces: 1 open, 0 close
  Content: if (activeBtn) {
  Fix: Verify brace matching

Line 5724: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5725: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5727: Unmatched braces: 1 open, 0 close
  Content: function renderFoodMenu() {
  Fix: Verify brace matching

Line 5733: Unmatched parentheses: 2 open, 1 close
  Content: .sort(([a, itemA], [b, itemB]) => {
  Fix: Verify parentheses matching

Line 5733: Unmatched braces: 1 open, 0 close
  Content: .sort(([a, itemA], [b, itemB]) => {
  Fix: Verify brace matching

Line 5738: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 5738: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 5740: Unmatched parentheses: 2 open, 1 close
  Content: menuContainer.innerHTML = items.map(([id, item]) => `
  Fix: Verify parentheses matching

Line 5773: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 5774: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5776: Unmatched braces: 1 open, 0 close
  Content: function showDeliveryOptionsModal() {
  Fix: Verify brace matching

Line 5789: Unmatched parentheses: 3 open, 2 close
  Content: ${Object.entries(FoodOrderingSystem.deliveryOptions).map(([key, option]) => `
  Fix: Verify parentheses matching

Line 5789: Unmatched braces: 1 open, 0 close
  Content: ${Object.entries(FoodOrderingSystem.deliveryOptions).map(([key, option]) => `
  Fix: Verify brace matching

Line 5802: Unmatched braces: 1 open, 0 close
  Content: ${option.requiresReservation ? `
  Fix: Verify brace matching

Line 5806: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 5807: Unmatched braces: 1 open, 0 close
  Content: ${option.requiresTimeEstimate ? `
  Fix: Verify brace matching

Line 5811: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 5821: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 5821: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 5830: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5832: Unmatched braces: 1 open, 0 close
  Content: function selectDeliveryOption(optionKey) {
  Fix: Verify brace matching

Line 5836: Unmatched braces: 1 open, 0 close
  Content: if (!option) {
  Fix: Verify brace matching

Line 5840: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5844: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 5845: Unmatched braces: 1 open, 0 close
  Content: if (option.requiresReservation) {
  Fix: Verify brace matching

Line 5857: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5862: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5863: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5865: Unmatched braces: 1 open, 0 close
  Content: function showTableReservationModal(optionKey, option) {
  Fix: Verify brace matching

Line 5940: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 5942: Unmatched braces: 1 open, 0 close
  Content: function showRoundTimeModal(optionKey, option) {
  Fix: Verify brace matching

Line 6014: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6016: Unmatched braces: 1 open, 0 close
  Content: function confirmTableReservation(optionKey) {
  Fix: Verify brace matching

Line 6025: Unmatched braces: 1 open, 0 close
  Content: if (!completionTime) {
  Fix: Verify brace matching

Line 6028: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6030: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6032: Unmatched braces: 1 open, 0 close
  Content: const enhancedOption = {
  Fix: Verify brace matching

Line 6034: Unmatched braces: 1 open, 0 close
  Content: reservationDetails: {
  Fix: Verify brace matching

Line 6039: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6040: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6049: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6050: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6052: Unmatched braces: 1 open, 0 close
  Content: function confirmRoundTiming(optionKey) {
  Fix: Verify brace matching

Line 6060: Unmatched braces: 1 open, 0 close
  Content: if (!completionTime || !currentHole) {
  Fix: Verify brace matching

Line 6063: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6065: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6067: Unmatched braces: 1 open, 0 close
  Content: const enhancedOption = {
  Fix: Verify brace matching

Line 6069: Unmatched braces: 1 open, 0 close
  Content: timingDetails: {
  Fix: Verify brace matching

Line 6073: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6074: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6083: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6084: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6086: Unmatched braces: 1 open, 0 close
  Content: function closeTableReservationModal() {
  Fix: Verify brace matching

Line 6087: Unmatched braces: 1 open, 0 close
  Content: if (window.currentTableReservationModal) {
  Fix: Verify brace matching

Line 6090: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6091: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6093: Unmatched braces: 1 open, 0 close
  Content: function closeRoundTimeModal() {
  Fix: Verify brace matching

Line 6094: Unmatched braces: 1 open, 0 close
  Content: if (window.currentRoundTimeModal) {
  Fix: Verify brace matching

Line 6097: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6098: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6100: Unmatched braces: 1 open, 0 close
  Content: function closeDeliveryModal() {
  Fix: Verify brace matching

Line 6101: Unmatched braces: 1 open, 0 close
  Content: if (window.currentDeliveryModal) {
  Fix: Verify brace matching

Line 6104: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6105: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6107: Unmatched braces: 1 open, 0 close
  Content: function confirmFoodOrder(deliveryType, deliveryOption) {
  Fix: Verify brace matching

Line 6111: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6112: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6112: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6113: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6125: Unmatched braces: 1 open, 0 close
  Content: const orderDetails = {
  Fix: Verify brace matching

Line 6131: Unmatched parentheses: 2 open, 0 close
  Content: items: foodCart.map(item => ({
  Fix: Verify parentheses matching

Line 6131: Unmatched braces: 1 open, 0 close
  Content: items: foodCart.map(item => ({
  Fix: Verify brace matching

Line 6138: Unmatched parentheses: 0 open, 2 close
  Content: })),
  Fix: Verify parentheses matching

Line 6138: Unmatched braces: 0 open, 1 close
  Content: })),
  Fix: Verify brace matching

Line 6147: Unmatched braces: 1 open, 0 close
  Content: progress: {
  Fix: Verify brace matching

Line 6153: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 6155: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6158: Unmatched braces: 1 open, 0 close
  Content: if (!FoodOrderingSystem.orderHistory) {
  Fix: Verify brace matching

Line 6160: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6168: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6177: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6185: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6185: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6187: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 6187: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 6194: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6195: Unmatched parentheses: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify parentheses matching

Line 6195: Unmatched braces: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify brace matching

Line 6200: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6201: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6203: Unmatched braces: 1 open, 0 close
  Content: function getTableNumber() {
  Fix: Verify brace matching

Line 6204: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6206: Unmatched braces: 1 open, 0 close
  Content: if (AppState.currentUser && AppState.currentUser.role === 'golfer') {
  Fix: Verify brace matching

Line 6208: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6213: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6214: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6216: Unmatched braces: 1 open, 0 close
  Content: function calculateEstimatedTime(cartItems, deliveryOption) {
  Fix: Verify brace matching

Line 6217: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6218: Unmatched braces: 1 open, 0 close
  Content: if (!cartItems || cartItems.length === 0) {
  Fix: Verify brace matching

Line 6221: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6228: Unmatched parentheses: 1 open, 0 close
  Content: console.log('Calculated estimated time:', {
  Fix: Verify parentheses matching

Line 6228: Unmatched braces: 1 open, 0 close
  Content: console.log('Calculated estimated time:', {
  Fix: Verify brace matching

Line 6233: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 6233: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 6239: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6240: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6242: Unmatched braces: 1 open, 0 close
  Content: function showOrderReceipt(order) {
  Fix: Verify brace matching

Line 6248: Unmatched braces: 1 open, 0 close
  Content: modal.onclick = (e) => {
  Fix: Verify brace matching

Line 6250: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6293: Unmatched parentheses: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify parentheses matching

Line 6293: Unmatched braces: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify brace matching

Line 6302: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 6302: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 6316: Unmatched braces: 1 open, 0 close
  Content: ${order.deliveryFee > 0 ? `
  Fix: Verify brace matching

Line 6321: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 6357: Unmatched braces: 1 open, 0 close
  Content: const handleEscKey = (e) => {
  Fix: Verify brace matching

Line 6358: Unmatched braces: 1 open, 0 close
  Content: if (e.key === 'Escape') {
  Fix: Verify brace matching

Line 6361: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6362: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6369: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6371: Unmatched braces: 1 open, 0 close
  Content: function closeReceiptModal() {
  Fix: Verify brace matching

Line 6372: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 6375: Unmatched parentheses: 1 open, 0 close
  Content: modals.forEach(modal => {
  Fix: Verify parentheses matching

Line 6375: Unmatched braces: 1 open, 0 close
  Content: modals.forEach(modal => {
  Fix: Verify brace matching

Line 6376: Unmatched braces: 1 open, 0 close
  Content: if (modal.innerHTML.includes('Order Receipt') || modal.innerHTML.includes('receipt')) {
  Fix: Verify brace matching

Line 6378: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6379: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 6379: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 6382: Unmatched braces: 1 open, 0 close
  Content: if (window.currentReceiptModal) {
  Fix: Verify brace matching

Line 6383: Unmatched braces: 1 open, 0 close
  Content: if (window.currentReceiptModal.parentNode) {
  Fix: Verify brace matching

Line 6385: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6387: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6393: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('[class*="fixed"][class*="inset-0"]').forEach(el => {
  Fix: Verify parentheses matching

Line 6393: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('[class*="fixed"][class*="inset-0"]').forEach(el => {
  Fix: Verify brace matching

Line 6394: Unmatched braces: 1 open, 0 close
  Content: if (el.innerHTML.includes('Order Receipt')) {
  Fix: Verify brace matching

Line 6396: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6397: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 6397: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 6398: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6399: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6402: Unmatched braces: 1 open, 0 close
  Content: window.forceCloseAllModals = function() {
  Fix: Verify brace matching

Line 6407: Unmatched parentheses: 1 open, 0 close
  Content: possibleModals.forEach(el => {
  Fix: Verify parentheses matching

Line 6407: Unmatched braces: 1 open, 0 close
  Content: possibleModals.forEach(el => {
  Fix: Verify brace matching

Line 6408: Unmatched parentheses: 2 open, 1 close
  Content: if (el.classList.contains('inset-0') ||
  Fix: Verify parentheses matching

Line 6412: Unmatched parentheses: 1 open, 2 close
  Content: el.innerHTML.includes('Order Receipt')) {
  Fix: Verify parentheses matching

Line 6412: Unmatched braces: 1 open, 0 close
  Content: el.innerHTML.includes('Order Receipt')) {
  Fix: Verify brace matching

Line 6415: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6416: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 6416: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 6424: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6426: Unmatched braces: 1 open, 0 close
  Content: function startOrderTracking(orderId) {
  Fix: Verify brace matching

Line 6432: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6432: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6437: Unmatched parentheses: 0 open, 1 close
  Content: }, 2 * 60 * 1000);
  Fix: Verify parentheses matching

Line 6437: Unmatched braces: 0 open, 1 close
  Content: }, 2 * 60 * 1000);
  Fix: Verify brace matching

Line 6440: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6440: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6445: Unmatched parentheses: 0 open, 1 close
  Content: }, 5 * 60 * 1000);
  Fix: Verify parentheses matching

Line 6445: Unmatched braces: 0 open, 1 close
  Content: }, 5 * 60 * 1000);
  Fix: Verify brace matching

Line 6448: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6448: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6453: Unmatched parentheses: 0 open, 1 close
  Content: }, order.estimatedTime * 60 * 1000);
  Fix: Verify parentheses matching

Line 6453: Unmatched braces: 0 open, 1 close
  Content: }, order.estimatedTime * 60 * 1000);
  Fix: Verify brace matching

Line 6456: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6456: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6461: Unmatched parentheses: 1 open, 2 close
  Content: }, (order.estimatedTime + 5) * 60 * 1000);
  Fix: Verify parentheses matching

Line 6461: Unmatched braces: 0 open, 1 close
  Content: }, (order.estimatedTime + 5) * 60 * 1000);
  Fix: Verify brace matching

Line 6462: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6464: Unmatched braces: 1 open, 0 close
  Content: function trackOrder(orderId) {
  Fix: Verify brace matching

Line 6467: Unmatched braces: 1 open, 0 close
  Content: if (!order) {
  Fix: Verify brace matching

Line 6470: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6473: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6475: Unmatched braces: 1 open, 0 close
  Content: function showOrderTrackingModal(order) {
  Fix: Verify brace matching

Line 6479: Unmatched brackets: 1 open, 0 close
  Content: const progressSteps = [
  Fix: Verify bracket matching

Line 6485: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 6516: Unmatched parentheses: 2 open, 1 close
  Content: ${progressSteps.map((step, index) => {
  Fix: Verify parentheses matching

Line 6516: Unmatched braces: 2 open, 0 close
  Content: ${progressSteps.map((step, index) => {
  Fix: Verify brace matching

Line 6524: Unmatched braces: 1 open, 0 close
  Content: <div class="w-10 h-10 rounded-full flex items-center justify-center ${
  Fix: Verify brace matching

Line 6526: Unmatched braces: 0 open, 1 close
  Content: }">
  Fix: Verify brace matching

Line 6531: Unmatched braces: 2 open, 1 close
  Content: ${time ? `<p class="text-xs opacity-70">${new Date(time).toLocaleTimeString()}</p>` :
  Fix: Verify brace matching

Line 6533: Unmatched braces: 0 open, 1 close
  Content: '<p class="text-xs opacity-70">Pending</p>'}
  Fix: Verify brace matching

Line 6538: Unmatched parentheses: 1 open, 2 close
  Content: }).join('')}
  Fix: Verify parentheses matching

Line 6538: Unmatched braces: 0 open, 2 close
  Content: }).join('')}
  Fix: Verify brace matching

Line 6543: Unmatched braces: 1 open, 0 close
  Content: ${order.status !== 'delivered' ? `
  Fix: Verify brace matching

Line 6559: Unmatched braces: 0 open, 1 close
  Content: `}
  Fix: Verify brace matching

Line 6565: Unmatched parentheses: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify parentheses matching

Line 6565: Unmatched braces: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify brace matching

Line 6574: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 6574: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 6600: Unmatched parentheses: 2 open, 1 close
  Content: window.trackingInterval = setInterval(() => {
  Fix: Verify parentheses matching

Line 6600: Unmatched braces: 1 open, 0 close
  Content: window.trackingInterval = setInterval(() => {
  Fix: Verify brace matching

Line 6602: Unmatched parentheses: 0 open, 1 close
  Content: }, 30000);
  Fix: Verify parentheses matching

Line 6602: Unmatched braces: 0 open, 1 close
  Content: }, 30000);
  Fix: Verify brace matching

Line 6603: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6605: Unmatched braces: 1 open, 0 close
  Content: function getRemainingTime(order) {
  Fix: Verify brace matching

Line 6615: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6617: Unmatched braces: 1 open, 0 close
  Content: function refreshOrderStatus(orderId, showNotification = true) {
  Fix: Verify brace matching

Line 6621: Unmatched braces: 1 open, 0 close
  Content: if (showNotification) {
  Fix: Verify brace matching

Line 6623: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6626: Unmatched braces: 1 open, 0 close
  Content: if (window.currentTrackingModal) {
  Fix: Verify brace matching

Line 6629: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6630: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6632: Unmatched braces: 1 open, 0 close
  Content: function closeTrackingModal() {
  Fix: Verify brace matching

Line 6633: Unmatched braces: 1 open, 0 close
  Content: if (window.currentTrackingModal) {
  Fix: Verify brace matching

Line 6636: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6637: Unmatched braces: 1 open, 0 close
  Content: if (window.trackingInterval) {
  Fix: Verify brace matching

Line 6640: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6641: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6643: Unmatched braces: 1 open, 0 close
  Content: function updateOrderTrackingUI(orderId) {
  Fix: Verify brace matching

Line 6645: Unmatched braces: 1 open, 0 close
  Content: if (window.currentTrackingModal) {
  Fix: Verify brace matching

Line 6647: Unmatched braces: 1 open, 0 close
  Content: if (order) {
  Fix: Verify brace matching

Line 6649: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6650: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6653: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 6653: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 6655: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 6655: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 6656: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6658: Unmatched braces: 1 open, 0 close
  Content: function printReceipt(orderId) {
  Fix: Verify brace matching

Line 6664: Unmatched parentheses: 1 open, 0 close
  Content: printWindow.document.write(`
  Fix: Verify parentheses matching

Line 6694: Unmatched parentheses: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify parentheses matching

Line 6694: Unmatched braces: 1 open, 0 close
  Content: ${order.items.map(item => `
  Fix: Verify brace matching

Line 6699: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 6699: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 6710: Unmatched braces: 1 open, 0 close
  Content: ${order.deliveryFee > 0 ? `
  Fix: Verify brace matching

Line 6715: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 6729: Unmatched parentheses: 0 open, 1 close
  Content: `);
  Fix: Verify parentheses matching

Line 6732: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6734: Unmatched braces: 1 open, 0 close
  Content: function viewOrderHistory() {
  Fix: Verify brace matching

Line 6737: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6739: Unmatched braces: 1 open, 0 close
  Content: function showOrderHistoryModal() {
  Fix: Verify brace matching

Line 6759: Unmatched braces: 1 open, 0 close
  Content: ${FoodOrderingSystem.orderHistory.length > 0 ? `
  Fix: Verify brace matching

Line 6761: Unmatched parentheses: 1 open, 0 close
  Content: ${FoodOrderingSystem.orderHistory.map(order => `
  Fix: Verify parentheses matching

Line 6761: Unmatched braces: 1 open, 0 close
  Content: ${FoodOrderingSystem.orderHistory.map(order => `
  Fix: Verify brace matching

Line 6794: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 6794: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 6802: Unmatched braces: 0 open, 1 close
  Content: `}
  Fix: Verify brace matching

Line 6809: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6811: Unmatched braces: 1 open, 0 close
  Content: function getStatusBadgeClass(status) {
  Fix: Verify brace matching

Line 6812: Unmatched braces: 1 open, 0 close
  Content: const classes = {
  Fix: Verify brace matching

Line 6818: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6820: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6823: Unmatched braces: 1 open, 0 close
  Content: function getStatusClass(status) {
  Fix: Verify brace matching

Line 6825: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6827: Unmatched braces: 1 open, 0 close
  Content: function closeOrderHistoryModal() {
  Fix: Verify brace matching

Line 6828: Unmatched braces: 1 open, 0 close
  Content: if (window.currentOrderHistoryModal) {
  Fix: Verify brace matching

Line 6831: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6832: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6834: Unmatched braces: 1 open, 0 close
  Content: function showOrderHistory() {
  Fix: Verify brace matching

Line 6838: Unmatched parentheses: 1 open, 0 close
  Content: historyContainer.innerHTML = FoodOrderingSystem.orderHistory.map(order => `
  Fix: Verify parentheses matching

Line 6857: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 6858: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6861: Unmatched braces: 1 open, 0 close
  Content: const GolfCourseDatabase = {
  Fix: Verify brace matching

Line 6862: Unmatched brackets: 1 open, 0 close
  Content: courses: [
  Fix: Verify bracket matching

Line 6863: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 6875: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 6876: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 6888: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 6889: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 6901: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 6902: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 6914: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6915: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 6917: Unmatched braces: 1 open, 0 close
  Content: getRandomCourse() {
  Fix: Verify brace matching

Line 6920: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 6922: Unmatched braces: 1 open, 0 close
  Content: getCourseById(id) {
  Fix: Verify brace matching

Line 6924: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6925: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 6929: Unmatched braces: 1 open, 0 close
  Content: function updateOrderStatusTab() {
  Fix: Verify brace matching

Line 6934: Unmatched braces: 1 open, 0 close
  Content: if (!FoodOrderingSystem.orderHistory) {
  Fix: Verify brace matching

Line 6936: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6939: Unmatched parentheses: 1 open, 0 close
  Content: const activeOrders = FoodOrderingSystem.orderHistory.filter(order =>
  Fix: Verify parentheses matching

Line 6941: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 6944: Unmatched braces: 1 open, 0 close
  Content: if (activeOrdersCount) {
  Fix: Verify brace matching

Line 6946: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6952: Unmatched braces: 1 open, 0 close
  Content: if (activeOrdersBadge) {
  Fix: Verify brace matching

Line 6953: Unmatched braces: 1 open, 0 close
  Content: if (activeOrders.length > 0) {
  Fix: Verify brace matching

Line 6958: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6959: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6961: Unmatched braces: 1 open, 0 close
  Content: if (orderStatusTabBadge) {
  Fix: Verify brace matching

Line 6962: Unmatched braces: 1 open, 0 close
  Content: if (activeOrders.length > 0) {
  Fix: Verify brace matching

Line 6967: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6968: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6971: Unmatched braces: 1 open, 0 close
  Content: if (activeOrdersList) {
  Fix: Verify brace matching

Line 6972: Unmatched braces: 1 open, 0 close
  Content: if (activeOrders.length === 0) {
  Fix: Verify brace matching

Line 6984: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6985: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 6988: Unmatched braces: 1 open, 0 close
  Content: if (orderHistoryList) {
  Fix: Verify brace matching

Line 6990: Unmatched braces: 1 open, 0 close
  Content: if (recentHistory.length === 0) {
  Fix: Verify brace matching

Line 6999: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7003: Unmatched braces: 1 open, 0 close
  Content: if (orderHistoryBadge) {
  Fix: Verify brace matching

Line 7004: Unmatched braces: 1 open, 0 close
  Content: if (recentHistory.length > 0) {
  Fix: Verify brace matching

Line 7009: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7010: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7011: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7012: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7014: Unmatched braces: 1 open, 0 close
  Content: function createOrderCard(order, isActive) {
  Fix: Verify brace matching

Line 7041: Unmatched parentheses: 2 open, 1 close
  Content: ${order.items.slice(0, 2).map(item =>
  Fix: Verify parentheses matching

Line 7041: Unmatched braces: 1 open, 0 close
  Content: ${order.items.slice(0, 2).map(item =>
  Fix: Verify brace matching

Line 7046: Unmatched parentheses: 1 open, 2 close
  Content: ).join('')}
  Fix: Verify parentheses matching

Line 7046: Unmatched braces: 0 open, 1 close
  Content: ).join('')}
  Fix: Verify brace matching

Line 7051: Unmatched braces: 1 open, 0 close
  Content: ${isActive ? `
  Fix: Verify brace matching

Line 7068: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 7075: Unmatched braces: 1 open, 0 close
  Content: ${isActive ? `
  Fix: Verify brace matching

Line 7079: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 7083: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7085: Unmatched braces: 1 open, 0 close
  Content: function getOrderProgress(order) {
  Fix: Verify brace matching

Line 7091: Unmatched parentheses: 1 open, 0 close
  Content: stages.forEach(stage => {
  Fix: Verify parentheses matching

Line 7091: Unmatched braces: 1 open, 0 close
  Content: stages.forEach(stage => {
  Fix: Verify brace matching

Line 7092: Unmatched braces: 1 open, 0 close
  Content: if (order.progress[stage]?.completed) {
  Fix: Verify brace matching

Line 7094: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7095: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7095: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7098: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7100: Unmatched braces: 1 open, 0 close
  Content: function showOrderDetails(orderId) {
  Fix: Verify brace matching

Line 7106: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7108: Unmatched braces: 1 open, 0 close
  Content: function trackOrder(orderId) {
  Fix: Verify brace matching

Line 7116: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 7116: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 7118: Unmatched braces: 1 open, 0 close
  Content: if (trackingElement) {
  Fix: Verify brace matching

Line 7120: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7121: Unmatched parentheses: 0 open, 1 close
  Content: }, 300);
  Fix: Verify parentheses matching

Line 7121: Unmatched braces: 0 open, 1 close
  Content: }, 300);
  Fix: Verify brace matching

Line 7122: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7124: Unmatched braces: 1 open, 0 close
  Content: function clearOrderHistory() {
  Fix: Verify brace matching

Line 7125: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to clear your order history? This action cannot be undone.')) {
  Fix: Verify brace matching

Line 7129: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7130: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7132: Unmatched braces: 1 open, 0 close
  Content: function contactKitchen() {
  Fix: Verify brace matching

Line 7181: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7183: Unmatched braces: 1 open, 0 close
  Content: function openKitchenChat() {
  Fix: Verify brace matching

Line 7189: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 7189: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 7190: Unmatched braces: 1 open, 0 close
  Content: if (typeof ChatSystem !== 'undefined') {
  Fix: Verify brace matching

Line 7193: Unmatched parentheses: 2 open, 1 close
  Content: const kitchenRoom = Object.keys(ChatSystem.chatRooms).find(room =>
  Fix: Verify parentheses matching

Line 7195: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 7196: Unmatched braces: 1 open, 0 close
  Content: if (kitchenRoom) {
  Fix: Verify brace matching

Line 7198: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7199: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7200: Unmatched parentheses: 0 open, 1 close
  Content: }, 500);
  Fix: Verify parentheses matching

Line 7200: Unmatched braces: 0 open, 1 close
  Content: }, 500);
  Fix: Verify brace matching

Line 7201: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7204: Unmatched braces: 1 open, 0 close
  Content: const ProfileSystem = {
  Fix: Verify brace matching

Line 7205: Unmatched braces: 1 open, 0 close
  Content: profiles: {
  Fix: Verify brace matching

Line 7206: Unmatched braces: 1 open, 0 close
  Content: golfer: {
  Fix: Verify brace matching

Line 7207: Unmatched braces: 1 open, 0 close
  Content: template: {
  Fix: Verify brace matching

Line 7208: Unmatched braces: 1 open, 0 close
  Content: personalInfo: {
  Fix: Verify brace matching

Line 7218: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7219: Unmatched braces: 1 open, 0 close
  Content: golfInfo: {
  Fix: Verify brace matching

Line 7228: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7229: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 7236: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7237: Unmatched braces: 1 open, 0 close
  Content: media: {
  Fix: Verify brace matching

Line 7241: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7242: Unmatched braces: 1 open, 0 close
  Content: privacy: {
  Fix: Verify brace matching

Line 7247: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7248: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7249: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7250: Unmatched braces: 1 open, 0 close
  Content: caddie: {
  Fix: Verify brace matching

Line 7251: Unmatched braces: 1 open, 0 close
  Content: template: {
  Fix: Verify brace matching

Line 7252: Unmatched braces: 1 open, 0 close
  Content: personalInfo: {
  Fix: Verify brace matching

Line 7262: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7263: Unmatched braces: 1 open, 0 close
  Content: professionalInfo: {
  Fix: Verify brace matching

Line 7272: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7273: Unmatched braces: 1 open, 0 close
  Content: skills: {
  Fix: Verify brace matching

Line 7280: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7281: Unmatched braces: 1 open, 0 close
  Content: media: {
  Fix: Verify brace matching

Line 7286: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7287: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 7292: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7293: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7294: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7295: Unmatched braces: 1 open, 0 close
  Content: manager: {
  Fix: Verify brace matching

Line 7296: Unmatched braces: 1 open, 0 close
  Content: template: {
  Fix: Verify brace matching

Line 7297: Unmatched braces: 1 open, 0 close
  Content: personalInfo: {
  Fix: Verify brace matching

Line 7306: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7307: Unmatched braces: 1 open, 0 close
  Content: professionalInfo: {
  Fix: Verify brace matching

Line 7315: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7316: Unmatched braces: 1 open, 0 close
  Content: qualifications: {
  Fix: Verify brace matching

Line 7322: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7323: Unmatched braces: 1 open, 0 close
  Content: media: {
  Fix: Verify brace matching

Line 7328: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7329: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7330: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7331: Unmatched braces: 1 open, 0 close
  Content: proshop: {
  Fix: Verify brace matching

Line 7332: Unmatched braces: 1 open, 0 close
  Content: template: {
  Fix: Verify brace matching

Line 7333: Unmatched braces: 1 open, 0 close
  Content: personalInfo: {
  Fix: Verify brace matching

Line 7341: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7342: Unmatched braces: 1 open, 0 close
  Content: professionalInfo: {
  Fix: Verify brace matching

Line 7349: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7350: Unmatched braces: 1 open, 0 close
  Content: skills: {
  Fix: Verify brace matching

Line 7357: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7358: Unmatched braces: 1 open, 0 close
  Content: media: {
  Fix: Verify brace matching

Line 7363: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7364: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7365: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7366: Unmatched braces: 1 open, 0 close
  Content: society: {
  Fix: Verify brace matching

Line 7367: Unmatched braces: 1 open, 0 close
  Content: template: {
  Fix: Verify brace matching

Line 7368: Unmatched braces: 1 open, 0 close
  Content: organizationInfo: {
  Fix: Verify brace matching

Line 7378: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7379: Unmatched braces: 1 open, 0 close
  Content: golfInfo: {
  Fix: Verify brace matching

Line 7387: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7388: Unmatched braces: 1 open, 0 close
  Content: preferences: {
  Fix: Verify brace matching

Line 7395: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7396: Unmatched braces: 1 open, 0 close
  Content: media: {
  Fix: Verify brace matching

Line 7402: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7403: Unmatched braces: 1 open, 0 close
  Content: contact: {
  Fix: Verify brace matching

Line 7409: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7410: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7411: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7412: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7414: Unmatched braces: 1 open, 0 close
  Content: getCurrentProfile(userType) {
  Fix: Verify brace matching

Line 7415: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 7419: Unmatched braces: 1 open, 0 close
  Content: if (saved) {
  Fix: Verify brace matching

Line 7427: Unmatched braces: 1 open, 0 close
  Content: : {
  Fix: Verify brace matching

Line 7433: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 7435: Unmatched braces: 1 open, 0 close
  Content: if (template.personalInfo) {
  Fix: Verify brace matching

Line 7439: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7440: Unmatched braces: 1 open, 0 close
  Content: if (template.organizationInfo) {
  Fix: Verify brace matching

Line 7442: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7445: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7448: Unmatched braces: 1 open, 0 close
  Content: return {
  Fix: Verify brace matching

Line 7454: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 7455: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7456: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7458: Unmatched braces: 1 open, 0 close
  Content: saveProfile(userType, profileData) {
  Fix: Verify brace matching

Line 7460: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[ProfileSystem] Saving profile - BEFORE save:', {
  Fix: Verify parentheses matching

Line 7460: Unmatched braces: 1 open, 0 close
  Content: console.log('[ProfileSystem] Saving profile - BEFORE save:', {
  Fix: Verify brace matching

Line 7466: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7466: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7472: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[ProfileSystem] Saving profile - AFTER save verification:', {
  Fix: Verify parentheses matching

Line 7472: Unmatched braces: 1 open, 0 close
  Content: console.log('[ProfileSystem] Saving profile - AFTER save verification:', {
  Fix: Verify brace matching

Line 7476: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7476: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7479: Unmatched braces: 1 open, 0 close
  Content: if (profileData.personalInfo?.firstName && profileData.personalInfo?.lastName) {
  Fix: Verify brace matching

Line 7483: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7487: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7489: Unmatched braces: 1 open, 0 close
  Content: updateUIWithProfile(incoming) {
  Fix: Verify brace matching

Line 7490: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 7498: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.user-name-display').forEach(el => {
  Fix: Verify parentheses matching

Line 7498: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.user-name-display').forEach(el => {
  Fix: Verify brace matching

Line 7500: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7500: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7504: Unmatched braces: 1 open, 0 close
  Content: if (avatarUrl) {
  Fix: Verify brace matching

Line 7505: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Verify parentheses matching

Line 7505: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Verify brace matching

Line 7508: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7508: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7509: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7513: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[ProfileSystem] updateUIWithProfile - homeClub debug:', {
  Fix: Verify parentheses matching

Line 7513: Unmatched braces: 1 open, 0 close
  Content: console.log('[ProfileSystem] updateUIWithProfile - homeClub debug:', {
  Fix: Verify brace matching

Line 7519: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7519: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7520: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Verify parentheses matching

Line 7520: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Verify brace matching

Line 7522: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7522: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7530: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7531: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7533: Unmatched braces: 1 open, 0 close
  Content: applyHomeClubToForm(slug) {
  Fix: Verify brace matching

Line 7545: Unmatched braces: 1 open, 0 close
  Content: if (pick) {
  Fix: Verify brace matching

Line 7550: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7551: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7554: Unmatched braces: 1 open, 0 close
  Content: waitForOptions(selector, min = 2) {
  Fix: Verify brace matching

Line 7555: Unmatched parentheses: 1 open, 0 close
  Content: return new Promise(resolve => {
  Fix: Verify parentheses matching

Line 7555: Unmatched braces: 1 open, 0 close
  Content: return new Promise(resolve => {
  Fix: Verify brace matching

Line 7558: Unmatched parentheses: 2 open, 1 close
  Content: const obs = new MutationObserver(() => {
  Fix: Verify parentheses matching

Line 7558: Unmatched braces: 1 open, 0 close
  Content: const obs = new MutationObserver(() => {
  Fix: Verify brace matching

Line 7559: Unmatched braces: 1 open, 0 close
  Content: if (el && el.options && el.options.length >= min) {
  Fix: Verify brace matching

Line 7562: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7563: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7563: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7567: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 7567: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 7568: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7570: Unmatched braces: 1 open, 0 close
  Content: async showProfileModal() {
  Fix: Verify brace matching

Line 7577: Unmatched braces: 1 open, 0 close
  Content: modal.onclick = (e) => {
  Fix: Verify brace matching

Line 7579: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 7619: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(async () => {
  Fix: Verify parentheses matching

Line 7619: Unmatched braces: 1 open, 0 close
  Content: setTimeout(async () => {
  Fix: Verify brace matching

Line 7620: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 7623: Unmatched braces: 1 open, 0 close
  Content: if (currentProfile.golfInfo?.homeClub) {
  Fix: Verify brace matching

Line 7626: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7629: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7630: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 7630: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 7631: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7633: Unmatched braces: 1 open, 0 close
  Content: closeProfileModal() {
  Fix: Verify brace matching

Line 7634: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 7635: Unmatched braces: 1 open, 0 close
  Content: if (window.currentProfileModal) {
  Fix: Verify brace matching

Line 7638: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7643: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7644: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7646: Unmatched braces: 1 open, 0 close
  Content: generateProfileForm(userType, profile) {
  Fix: Verify brace matching

Line 7647: Unmatched braces: 1 open, 0 close
  Content: switch(userType) {
  Fix: Verify brace matching

Line 7660: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 7661: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7663: Unmatched braces: 1 open, 0 close
  Content: generateGolferForm(profile) {
  Fix: Verify brace matching

Line 7838: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7840: Unmatched braces: 1 open, 0 close
  Content: generateSocietyForm(profile) {
  Fix: Verify brace matching

Line 7990: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 7992: Unmatched braces: 1 open, 0 close
  Content: updateDashboardData() {
  Fix: Verify brace matching

Line 7993: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 8004: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.user-handicap').forEach(el => {
  Fix: Verify parentheses matching

Line 8004: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.user-handicap').forEach(el => {
  Fix: Verify brace matching

Line 8006: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8006: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8010: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.member-since').forEach(el => {
  Fix: Verify parentheses matching

Line 8010: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.member-since').forEach(el => {
  Fix: Verify brace matching

Line 8013: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8013: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8017: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Verify parentheses matching

Line 8017: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.home-club').forEach(el => {
  Fix: Verify brace matching

Line 8019: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8019: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8026: Unmatched braces: 1 open, 0 close
  Content: if (clubAffiliation && clubAffiliation !== '') {
  Fix: Verify brace matching

Line 8027: Unmatched parentheses: 1 open, 0 close
  Content: affiliationElements.forEach(el => {
  Fix: Verify parentheses matching

Line 8027: Unmatched braces: 1 open, 0 close
  Content: affiliationElements.forEach(el => {
  Fix: Verify brace matching

Line 8029: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8029: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8030: Unmatched parentheses: 1 open, 0 close
  Content: affiliationContainers.forEach(container => {
  Fix: Verify parentheses matching

Line 8030: Unmatched braces: 1 open, 0 close
  Content: affiliationContainers.forEach(container => {
  Fix: Verify brace matching

Line 8032: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8032: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8034: Unmatched parentheses: 1 open, 0 close
  Content: affiliationContainers.forEach(container => {
  Fix: Verify parentheses matching

Line 8034: Unmatched braces: 1 open, 0 close
  Content: affiliationContainers.forEach(container => {
  Fix: Verify brace matching

Line 8036: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8036: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8037: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8041: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.experience-level').forEach(el => {
  Fix: Verify parentheses matching

Line 8041: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.experience-level').forEach(el => {
  Fix: Verify brace matching

Line 8043: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8043: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8046: Unmatched braces: 1 open, 0 close
  Content: if (profile.media?.profilePhoto) {
  Fix: Verify brace matching

Line 8047: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Verify parentheses matching

Line 8047: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.user-avatar').forEach(el => {
  Fix: Verify brace matching

Line 8050: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8050: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8051: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8053: Unmatched parentheses: 1 open, 0 close
  Content: console.log('Dashboard data updated successfully with profile:', {
  Fix: Verify parentheses matching

Line 8053: Unmatched braces: 1 open, 0 close
  Content: console.log('Dashboard data updated successfully with profile:', {
  Fix: Verify brace matching

Line 8058: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8058: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8061: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8062: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8065: Unmatched braces: 1 open, 0 close
  Content: initializeDashboard() {
  Fix: Verify brace matching

Line 8066: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 8066: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 8068: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 8068: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 8069: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8071: Unmatched braces: 1 open, 0 close
  Content: resetToDefaults(userType) {
  Fix: Verify brace matching

Line 8072: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to reset your profile to default values? This will clear all your
  Fix: Verify brace matching

Line 8079: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 8079: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 8081: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 8081: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 8084: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8085: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8087: Unmatched braces: 1 open, 0 close
  Content: handlePhotoUpload(input, previewId) {
  Fix: Verify brace matching

Line 8089: Unmatched braces: 1 open, 0 close
  Content: if (file) {
  Fix: Verify brace matching

Line 8091: Unmatched braces: 1 open, 0 close
  Content: if (!file.type.startsWith('image/')) {
  Fix: Verify brace matching

Line 8095: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8098: Unmatched braces: 1 open, 0 close
  Content: if (file.size > 5 * 1024 * 1024) {
  Fix: Verify brace matching

Line 8102: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8105: Unmatched braces: 1 open, 0 close
  Content: reader.onload = function(e) {
  Fix: Verify brace matching

Line 8107: Unmatched braces: 1 open, 0 close
  Content: if (preview) {
  Fix: Verify brace matching

Line 8110: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8111: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8112: Unmatched braces: 1 open, 0 close
  Content: reader.onerror = function() {
  Fix: Verify brace matching

Line 8114: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8116: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8117: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8119: Unmatched braces: 1 open, 0 close
  Content: saveProfileFromForm(userType) {
  Fix: Verify brace matching

Line 8122: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 8123: Unmatched braces: 1 open, 0 close
  Content: if (userType === 'golfer') {
  Fix: Verify brace matching

Line 8132: Unmatched braces: 1 open, 0 close
  Content: if (!hasFirstName || !hasLastName) {
  Fix: Verify brace matching

Line 8135: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8149: Unmatched parentheses: 1 open, 0 close
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Verify parentheses matching

Line 8149: Unmatched brackets: 1 open, 0 close
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Verify bracket matching

Line 8151: Unmatched parentheses: 0 open, 1 close
  Content: ]);
  Fix: Verify parentheses matching

Line 8151: Unmatched brackets: 0 open, 1 close
  Content: ]);
  Fix: Verify bracket matching

Line 8153: Unmatched braces: 1 open, 0 close
  Content: function getHomeClubFromFormStrict() {
  Fix: Verify brace matching

Line 8157: Unmatched braces: 1 open, 0 close
  Content: if (!el) {
  Fix: Verify brace matching

Line 8160: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8163: Unmatched braces: 1 open, 0 close
  Content: if (el.selectedIndex === 0) {
  Fix: Verify brace matching

Line 8166: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8176: Unmatched braces: 1 open, 0 close
  Content: if (PLACEHOLDER_TEXTS.has(text)) {
  Fix: Verify brace matching

Line 8179: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8185: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8188: Unmatched parentheses: 1 open, 0 close
  Content: console.log('[ProfileSystem] Form homeClub debugging:', {
  Fix: Verify parentheses matching

Line 8188: Unmatched braces: 1 open, 0 close
  Content: console.log('[ProfileSystem] Form homeClub debugging:', {
  Fix: Verify brace matching

Line 8195: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8195: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8198: Unmatched braces: 1 open, 0 close
  Content: if (!homeClub) {
  Fix: Verify brace matching

Line 8201: Unmatched braces: 1 open, 0 close
  Content: if (el) {
  Fix: Verify brace matching

Line 8204: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8208: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8213: Unmatched braces: 1 open, 0 close
  Content: if (handicap && (isNaN(handicap) || handicap < 0 || handicap > 54)) {
  Fix: Verify brace matching

Line 8216: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8226: Unmatched braces: 1 open, 0 close
  Content: const profileForSync = {
  Fix: Verify brace matching

Line 8232: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8234: Unmatched braces: 1 open, 0 close
  Content: if (existingIndex >= 0) {
  Fix: Verify brace matching

Line 8238: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8255: Unmatched braces: 1 open, 0 close
  Content: if (profilePhoto && !profilePhoto.includes('/api/placeholder/')) {
  Fix: Verify brace matching

Line 8257: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8283: Unmatched braces: 1 open, 0 close
  Content: if (societyLogo && !societyLogo.includes('/api/placeholder/')) {
  Fix: Verify brace matching

Line 8285: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8286: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8318: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 8318: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 8319: Unmatched braces: 1 open, 0 close
  Content: if (successModal.parentNode) {
  Fix: Verify brace matching

Line 8321: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8322: Unmatched parentheses: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify parentheses matching

Line 8322: Unmatched braces: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify brace matching

Line 8326: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8327: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8328: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8331: Unmatched braces: 1 open, 0 close
  Content: const ScheduleSystem = {
  Fix: Verify brace matching

Line 8332: Unmatched braces: 1 open, 0 close
  Content: scheduleData: {
  Fix: Verify brace matching

Line 8337: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8341: Unmatched braces: 1 open, 0 close
  Content: initializeSchedule() {
  Fix: Verify brace matching

Line 8344: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8346: Unmatched braces: 1 open, 0 close
  Content: loadFromStorage() {
  Fix: Verify brace matching

Line 8347: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 8349: Unmatched braces: 1 open, 0 close
  Content: if (savedSchedule) {
  Fix: Verify brace matching

Line 8353: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8356: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8359: Unmatched braces: 1 open, 0 close
  Content: this.scheduleData = {
  Fix: Verify brace matching

Line 8363: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8365: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8367: Unmatched braces: 1 open, 0 close
  Content: saveToStorage() {
  Fix: Verify brace matching

Line 8368: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 8378: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8379: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8381: Unmatched braces: 1 open, 0 close
  Content: getList() {
  Fix: Verify brace matching

Line 8385: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8387: Unmatched braces: 1 open, 0 close
  Content: saveList(list) {
  Fix: Verify brace matching

Line 8394: Unmatched braces: 1 open, 0 close
  Content: const scheduleData = {
  Fix: Verify brace matching

Line 8398: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8405: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8407: Unmatched braces: 1 open, 0 close
  Content: upsertFromBooking(bk) {
  Fix: Verify brace matching

Line 8412: Unmatched braces: 1 open, 0 close
  Content: if (!evt) {
  Fix: Verify brace matching

Line 8413: Unmatched braces: 1 open, 0 close
  Content: evt = {
  Fix: Verify brace matching

Line 8425: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8427: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8430: Unmatched braces: 1 open, 0 close
  Content: if (bk.kind === "teeTime" || bk.type === "teeTime") {
  Fix: Verify brace matching

Line 8435: Unmatched braces: 1 open, 0 close
  Content: if (!evt.caddies.some(c => c.id === bk.caddieId)) {
  Fix: Verify brace matching

Line 8437: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8441: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8445: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8447: Unmatched braces: 1 open, 0 close
  Content: refreshStats() {
  Fix: Verify brace matching

Line 8455: Unmatched braces: 1 open, 0 close
  Content: const parseBookingDate = (booking) => {
  Fix: Verify brace matching

Line 8460: Unmatched braces: 1 open, 0 close
  Content: if (booking.date && booking.time) {
  Fix: Verify brace matching

Line 8464: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8467: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8470: Unmatched parentheses: 1 open, 0 close
  Content: const upcomingBookings = bookings.filter(b => {
  Fix: Verify parentheses matching

Line 8470: Unmatched braces: 1 open, 0 close
  Content: const upcomingBookings = bookings.filter(b => {
  Fix: Verify brace matching

Line 8474: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8474: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8476: Unmatched parentheses: 1 open, 0 close
  Content: const thisWeekBookings = upcomingBookings.filter(b => {
  Fix: Verify parentheses matching

Line 8476: Unmatched braces: 1 open, 0 close
  Content: const thisWeekBookings = upcomingBookings.filter(b => {
  Fix: Verify brace matching

Line 8483: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8483: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8506: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8508: Unmatched braces: 1 open, 0 close
  Content: loadSampleData() {
  Fix: Verify brace matching

Line 8510: Unmatched brackets: 1 open, 0 close
  Content: this.scheduleData.events = [
  Fix: Verify bracket matching

Line 8511: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 8524: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8525: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 8538: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8539: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 8541: Unmatched brackets: 1 open, 0 close
  Content: this.scheduleData.caddieBookings = [
  Fix: Verify bracket matching

Line 8542: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 8555: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8556: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 8558: Unmatched brackets: 1 open, 0 close
  Content: this.scheduleData.waitlists = [
  Fix: Verify bracket matching

Line 8559: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 8570: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8571: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 8572: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8575: Unmatched braces: 1 open, 0 close
  Content: hasEventForBooking(bookingId) {
  Fix: Verify brace matching

Line 8576: Unmatched parentheses: 1 open, 0 close
  Content: return this.scheduleData.events.some(event =>
  Fix: Verify parentheses matching

Line 8578: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 8579: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8582: Unmatched braces: 1 open, 0 close
  Content: addEventForBooking(eventData, bookingId) {
  Fix: Verify brace matching

Line 8583: Unmatched braces: 1 open, 0 close
  Content: if (this.hasEventForBooking(bookingId)) {
  Fix: Verify brace matching

Line 8586: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8588: Unmatched braces: 1 open, 0 close
  Content: const event = {
  Fix: Verify brace matching

Line 8593: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8599: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8601: Unmatched braces: 1 open, 0 close
  Content: addEvent(eventData) {
  Fix: Verify brace matching

Line 8602: Unmatched braces: 1 open, 0 close
  Content: const event = {
  Fix: Verify brace matching

Line 8606: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8612: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8614: Unmatched braces: 1 open, 0 close
  Content: addCaddyBooking(bookingData) {
  Fix: Verify brace matching

Line 8615: Unmatched braces: 1 open, 0 close
  Content: const booking = {
  Fix: Verify brace matching

Line 8620: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8626: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8628: Unmatched braces: 1 open, 0 close
  Content: addToWaitlist(waitlistData) {
  Fix: Verify brace matching

Line 8629: Unmatched braces: 1 open, 0 close
  Content: const waitlist = {
  Fix: Verify brace matching

Line 8634: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8640: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8642: Unmatched braces: 1 open, 0 close
  Content: updateScheduleTab() {
  Fix: Verify brace matching

Line 8647: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8649: Unmatched braces: 1 open, 0 close
  Content: updateStats() {
  Fix: Verify brace matching

Line 8661: Unmatched parentheses: 1 open, 0 close
  Content: const thisWeekEvents = this.scheduleData.events.filter(e => {
  Fix: Verify parentheses matching

Line 8661: Unmatched braces: 1 open, 0 close
  Content: const thisWeekEvents = this.scheduleData.events.filter(e => {
  Fix: Verify brace matching

Line 8664: Unmatched parentheses: 0 open, 1 close
  Content: }).length;
  Fix: Verify parentheses matching

Line 8664: Unmatched braces: 0 open, 1 close
  Content: }).length;
  Fix: Verify brace matching

Line 8670: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8672: Unmatched braces: 1 open, 0 close
  Content: renderScheduleList() {
  Fix: Verify brace matching

Line 8677: Unmatched braces: 1 open, 0 close
  Content: if (!container) {
  Fix: Verify brace matching

Line 8680: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8684: Unmatched braces: 1 open, 0 close
  Content: if (Array.isArray(this.scheduleData)) {
  Fix: Verify brace matching

Line 8687: Unmatched brackets: 1 open, 0 close
  Content: allItems = [
  Fix: Verify bracket matching

Line 8691: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 8692: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8699: Unmatched braces: 1 open, 0 close
  Content: if (filteredItems.length === 0) {
  Fix: Verify brace matching

Line 8703: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8712: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8714: Unmatched braces: 1 open, 0 close
  Content: filterItems(items) {
  Fix: Verify brace matching

Line 8717: Unmatched braces: 1 open, 0 close
  Content: switch (this.currentFilter) {
  Fix: Verify brace matching

Line 8719: Unmatched parentheses: 1 open, 0 close
  Content: return items.filter(item => {
  Fix: Verify parentheses matching

Line 8719: Unmatched braces: 1 open, 0 close
  Content: return items.filter(item => {
  Fix: Verify brace matching

Line 8722: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8722: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8724: Unmatched parentheses: 1 open, 0 close
  Content: return items.filter(item => {
  Fix: Verify parentheses matching

Line 8724: Unmatched braces: 1 open, 0 close
  Content: return items.filter(item => {
  Fix: Verify brace matching

Line 8727: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8727: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8735: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8736: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8738: Unmatched braces: 1 open, 0 close
  Content: createScheduleItem(item) {
  Fix: Verify brace matching

Line 8769: Unmatched braces: 2 open, 1 close
  Content: ${item.canEdit ? `<button onclick="editScheduleItem('${item.id}')" class="text-blue-600 hover:text-b
  Fix: Verify brace matching

Line 8771: Unmatched braces: 0 open, 1 close
  Content: </button>` : ''}
  Fix: Verify brace matching

Line 8772: Unmatched braces: 2 open, 1 close
  Content: ${item.canCancel ? `<button onclick="cancelScheduleItem('${item.id}')" class="text-red-600 hover:tex
  Fix: Verify brace matching

Line 8774: Unmatched braces: 0 open, 1 close
  Content: </button>` : ''}
  Fix: Verify brace matching

Line 8782: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8784: Unmatched braces: 1 open, 0 close
  Content: renderItemDetails(item) {
  Fix: Verify brace matching

Line 8785: Unmatched braces: 1 open, 0 close
  Content: switch (item.type) {
  Fix: Verify brace matching

Line 8828: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8829: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8831: Unmatched braces: 1 open, 0 close
  Content: getTypeIcon(type) {
  Fix: Verify brace matching

Line 8832: Unmatched braces: 1 open, 0 close
  Content: const icons = {
  Fix: Verify brace matching

Line 8836: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8838: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8840: Unmatched braces: 1 open, 0 close
  Content: getTypeColor(type) {
  Fix: Verify brace matching

Line 8841: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 8845: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8847: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 8849: Unmatched braces: 1 open, 0 close
  Content: getStatusColor(status) {
  Fix: Verify brace matching

Line 8850: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 8856: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8858: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8859: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 8862: Unmatched braces: 1 open, 0 close
  Content: function filterSchedule(filter) {
  Fix: Verify brace matching

Line 8866: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.schedule-filter-btn').forEach(btn => {
  Fix: Verify parentheses matching

Line 8866: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.schedule-filter-btn').forEach(btn => {
  Fix: Verify brace matching

Line 8868: Unmatched braces: 1 open, 0 close
  Content: if (btn.dataset.filter === filter) {
  Fix: Verify brace matching

Line 8870: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8871: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 8871: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 8874: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8876: Unmatched braces: 1 open, 0 close
  Content: function refreshSchedule() {
  Fix: Verify brace matching

Line 8880: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 8882: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8884: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 8884: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 8888: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 8888: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 8889: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8891: Unmatched braces: 1 open, 0 close
  Content: function editScheduleItem(itemId) {
  Fix: Verify brace matching

Line 8901: Unmatched braces: 1 open, 0 close
  Content: if (!item) {
  Fix: Verify brace matching

Line 8904: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8907: Unmatched braces: 1 open, 0 close
  Content: if (!item) {
  Fix: Verify brace matching

Line 8910: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8912: Unmatched braces: 1 open, 0 close
  Content: if (!item) {
  Fix: Verify brace matching

Line 8915: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 8932: Unmatched braces: 1 open, 0 close
  Content: ${itemType === 'event' ? `
  Fix: Verify brace matching

Line 9047: Unmatched braces: 0 open, 1 close
  Content: `}
  Fix: Verify brace matching

Line 9062: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9064: Unmatched braces: 1 open, 0 close
  Content: function cancelScheduleItem(itemId) {
  Fix: Verify brace matching

Line 9065: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to cancel this item? This action cannot be undone.')) {
  Fix: Verify brace matching

Line 9073: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9074: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9076: Unmatched braces: 1 open, 0 close
  Content: function saveScheduleItemChanges(itemId, itemType, modal) {
  Fix: Verify brace matching

Line 9081: Unmatched braces: 1 open, 0 close
  Content: if (itemType === 'event') {
  Fix: Verify brace matching

Line 9090: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9092: Unmatched braces: 1 open, 0 close
  Content: if (!item) {
  Fix: Verify brace matching

Line 9095: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9098: Unmatched braces: 1 open, 0 close
  Content: if (itemType === 'event') {
  Fix: Verify brace matching

Line 9111: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9124: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9126: Unmatched braces: 1 open, 0 close
  Content: function saveScheduleItem(itemId) {
  Fix: Verify brace matching

Line 9128: Unmatched braces: 1 open, 0 close
  Content: if (item) {
  Fix: Verify brace matching

Line 9134: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9135: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9137: Unmatched braces: 1 open, 0 close
  Content: function refreshSchedule() {
  Fix: Verify brace matching

Line 9138: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 9142: Unmatched braces: 1 open, 0 close
  Content: if (typeof ProductionCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 9144: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9152: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9153: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9156: Unmatched braces: 1 open, 0 close
  Content: const BookingManager = {
  Fix: Verify brace matching

Line 9161: Unmatched braces: 1 open, 0 close
  Content: loadFromStorage() {
  Fix: Verify brace matching

Line 9162: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 9164: Unmatched braces: 1 open, 0 close
  Content: if (savedBookings) {
  Fix: Verify brace matching

Line 9169: Unmatched parentheses: 1 open, 0 close
  Content: this.bookings.forEach(booking => {
  Fix: Verify parentheses matching

Line 9169: Unmatched braces: 1 open, 0 close
  Content: this.bookings.forEach(booking => {
  Fix: Verify brace matching

Line 9170: Unmatched braces: 1 open, 0 close
  Content: if (booking.type === 'teeTime') {
  Fix: Verify brace matching

Line 9171: Unmatched parentheses: 1 open, 0 close
  Content: ScheduleSystem.addEventForBooking({
  Fix: Verify parentheses matching

Line 9171: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem.addEventForBooking({
  Fix: Verify brace matching

Line 9183: Unmatched parentheses: 0 open, 1 close
  Content: }, booking.id);
  Fix: Verify parentheses matching

Line 9183: Unmatched braces: 0 open, 1 close
  Content: }, booking.id);
  Fix: Verify brace matching

Line 9184: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9185: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9185: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9187: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9190: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9192: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9195: Unmatched braces: 1 open, 0 close
  Content: initialize() {
  Fix: Verify brace matching

Line 9200: Unmatched braces: 1 open, 0 close
  Content: if (!loaded) {
  Fix: Verify brace matching

Line 9204: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9209: Unmatched brackets: 1 open, 0 close
  Content: this.bookings = [
  Fix: Verify bracket matching

Line 9210: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9223: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9224: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9239: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9240: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9253: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9254: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9267: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9268: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 9271: Unmatched braces: 1 open, 0 close
  Content: this.waitlists = {
  Fix: Verify brace matching

Line 9272: Unmatched brackets: 1 open, 0 close
  Content: 'c002': [
  Fix: Verify bracket matching

Line 9273: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9280: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9281: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 9282: Unmatched brackets: 1 open, 0 close
  Content: 'c004': [
  Fix: Verify bracket matching

Line 9283: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9290: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9291: Unmatched brackets: 0 open, 1 close
  Content: ]
  Fix: Verify bracket matching

Line 9292: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9293: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9295: Unmatched braces: 1 open, 0 close
  Content: getGolferBookings(golferId) {
  Fix: Verify brace matching

Line 9297: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9299: Unmatched braces: 1 open, 0 close
  Content: getGolferWaitlists(golferId) {
  Fix: Verify brace matching

Line 9301: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(this.waitlists).forEach(([caddieId, list]) => {
  Fix: Verify parentheses matching

Line 9301: Unmatched braces: 1 open, 0 close
  Content: Object.entries(this.waitlists).forEach(([caddieId, list]) => {
  Fix: Verify brace matching

Line 9303: Unmatched braces: 1 open, 0 close
  Content: if (entry) {
  Fix: Verify brace matching

Line 9305: Unmatched parentheses: 1 open, 0 close
  Content: waitlists.push({
  Fix: Verify parentheses matching

Line 9305: Unmatched braces: 1 open, 0 close
  Content: waitlists.push({
  Fix: Verify brace matching

Line 9311: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9311: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9312: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9313: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9313: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9315: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9317: Unmatched braces: 1 open, 0 close
  Content: addToWaitlist(caddieId, golferData) {
  Fix: Verify brace matching

Line 9318: Unmatched braces: 1 open, 0 close
  Content: if (!this.waitlists[caddieId]) {
  Fix: Verify brace matching

Line 9320: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9323: Unmatched braces: 1 open, 0 close
  Content: const waitlistEntry = {
  Fix: Verify brace matching

Line 9328: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9334: Unmatched parentheses: 1 open, 0 close
  Content: ScheduleSystem.addToWaitlist({
  Fix: Verify parentheses matching

Line 9334: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem.addToWaitlist({
  Fix: Verify brace matching

Line 9343: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9343: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9346: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9348: Unmatched braces: 1 open, 0 close
  Content: getCaddyBookings(caddieId) {
  Fix: Verify brace matching

Line 9350: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9352: Unmatched braces: 1 open, 0 close
  Content: getCaddyWaitlists(caddieId) {
  Fix: Verify brace matching

Line 9354: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9356: Unmatched braces: 1 open, 0 close
  Content: addBooking(bookingData) {
  Fix: Verify brace matching

Line 9362: Unmatched braces: 1 open, 0 close
  Content: const booking = {
  Fix: Verify brace matching

Line 9367: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9380: Unmatched braces: 1 open, 0 close
  Content: if (bookingData.caddieId) {
  Fix: Verify brace matching

Line 9381: Unmatched parentheses: 1 open, 0 close
  Content: ScheduleSystem.addCaddyBooking({
  Fix: Verify parentheses matching

Line 9381: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem.addCaddyBooking({
  Fix: Verify brace matching

Line 9392: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9392: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9393: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9400: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9402: Unmatched braces: 1 open, 0 close
  Content: updateBookingStatus(bookingId, status) {
  Fix: Verify brace matching

Line 9404: Unmatched braces: 1 open, 0 close
  Content: if (booking) {
  Fix: Verify brace matching

Line 9411: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9413: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9415: Unmatched braces: 1 open, 0 close
  Content: removeFromWaitlist(caddieId, golferId) {
  Fix: Verify brace matching

Line 9416: Unmatched braces: 1 open, 0 close
  Content: if (this.waitlists[caddieId]) {
  Fix: Verify brace matching

Line 9419: Unmatched parentheses: 2 open, 1 close
  Content: this.waitlists[caddieId].forEach((entry, index) => {
  Fix: Verify parentheses matching

Line 9419: Unmatched braces: 1 open, 0 close
  Content: this.waitlists[caddieId].forEach((entry, index) => {
  Fix: Verify brace matching

Line 9421: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9421: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9422: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9423: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9425: Unmatched braces: 1 open, 0 close
  Content: saveToLocalStorage() {
  Fix: Verify brace matching

Line 9426: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 9437: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9438: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9441: Unmatched braces: 1 open, 0 close
  Content: removeDuplicateBookings() {
  Fix: Verify brace matching

Line 9447: Unmatched parentheses: 1 open, 0 close
  Content: this.bookings.forEach(booking => {
  Fix: Verify parentheses matching

Line 9447: Unmatched braces: 1 open, 0 close
  Content: this.bookings.forEach(booking => {
  Fix: Verify brace matching

Line 9451: Unmatched braces: 1 open, 0 close
  Content: if (!seenKeys.has(key)) {
  Fix: Verify brace matching

Line 9456: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9457: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9457: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9468: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9471: Unmatched braces: 1 open, 0 close
  Content: clearAllBookings() {
  Fix: Verify brace matching

Line 9477: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9478: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9481: Unmatched braces: 1 open, 0 close
  Content: function bookCaddyFromFeature(caddieId, caddieName) {
  Fix: Verify brace matching

Line 9482: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 9487: Unmatched braces: 1 open, 0 close
  Content: if (!caddie) {
  Fix: Verify brace matching

Line 9490: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9494: Unmatched braces: 1 open, 0 close
  Content: if (!course) {
  Fix: Verify brace matching

Line 9497: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9503: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 9503: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 9508: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 9508: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 9516: Unmatched braces: 1 open, 0 close
  Content: if (cartSection) {
  Fix: Verify brace matching

Line 9518: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9519: Unmatched parentheses: 0 open, 1 close
  Content: }, 300);
  Fix: Verify parentheses matching

Line 9519: Unmatched braces: 0 open, 1 close
  Content: }, 300);
  Fix: Verify brace matching

Line 9521: Unmatched parentheses: 0 open, 1 close
  Content: }, 500);
  Fix: Verify parentheses matching

Line 9521: Unmatched braces: 0 open, 1 close
  Content: }, 500);
  Fix: Verify brace matching

Line 9526: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9527: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9529: Unmatched braces: 1 open, 0 close
  Content: function joinWaitlistFromFeature(caddieId, caddieName) {
  Fix: Verify brace matching

Line 9530: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 9533: Unmatched braces: 1 open, 0 close
  Content: if (!currentUser || !currentUser.name) {
  Fix: Verify brace matching

Line 9536: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9538: Unmatched braces: 1 open, 0 close
  Content: const golferData = {
  Fix: Verify brace matching

Line 9542: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9550: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 9550: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 9552: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 9552: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 9557: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9558: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9563: Unmatched braces: 1 open, 0 close
  Content: const GolfCoursesDatabase = {
  Fix: Verify brace matching

Line 9564: Unmatched brackets: 1 open, 0 close
  Content: courses: [
  Fix: Verify bracket matching

Line 9565: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9578: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9579: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9592: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9593: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9606: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9607: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9620: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9621: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9634: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9635: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9648: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9649: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9662: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9663: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 9676: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9677: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 9679: Unmatched braces: 1 open, 0 close
  Content: searchCourses(query) {
  Fix: Verify brace matching

Line 9681: Unmatched parentheses: 1 open, 0 close
  Content: return this.courses.filter(course =>
  Fix: Verify parentheses matching

Line 9686: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 9687: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 9689: Unmatched braces: 1 open, 0 close
  Content: getCourseById(id) {
  Fix: Verify brace matching

Line 9691: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9692: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 9700: Unmatched braces: 1 open, 0 close
  Content: function initializeBookingSystem() {
  Fix: Verify brace matching

Line 9705: Unmatched braces: 1 open, 0 close
  Content: if (dateInput) {
  Fix: Verify brace matching

Line 9711: Unmatched braces: 1 open, 0 close
  Content: if (!dateInput.value) {
  Fix: Verify brace matching

Line 9713: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9714: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9718: Unmatched braces: 1 open, 0 close
  Content: if (timeInput && !timeInput.value) {
  Fix: Verify brace matching

Line 9720: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9721: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9723: Unmatched braces: 1 open, 0 close
  Content: function loadAllCourses() {
  Fix: Verify brace matching

Line 9730: Unmatched braces: 1 open, 0 close
  Content: if (courseGrid) {
  Fix: Verify brace matching

Line 9732: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9735: Unmatched braces: 1 open, 0 close
  Content: if (courseGridMobile) {
  Fix: Verify brace matching

Line 9737: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9738: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9740: Unmatched braces: 1 open, 0 close
  Content: function createMobileCourseCard(course) {
  Fix: Verify brace matching

Line 9767: Unmatched parentheses: 2 open, 1 close
  Content: ${course.features.slice(0, 2).map(feature =>
  Fix: Verify parentheses matching

Line 9767: Unmatched braces: 1 open, 0 close
  Content: ${course.features.slice(0, 2).map(feature =>
  Fix: Verify brace matching

Line 9769: Unmatched parentheses: 1 open, 2 close
  Content: ).join('')}
  Fix: Verify parentheses matching

Line 9769: Unmatched braces: 0 open, 1 close
  Content: ).join('')}
  Fix: Verify brace matching

Line 9774: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9776: Unmatched braces: 1 open, 0 close
  Content: function createCourseCard(course) {
  Fix: Verify brace matching

Line 9803: Unmatched parentheses: 2 open, 1 close
  Content: ${course.features.slice(0, 2).map(feature =>
  Fix: Verify parentheses matching

Line 9803: Unmatched braces: 1 open, 0 close
  Content: ${course.features.slice(0, 2).map(feature =>
  Fix: Verify brace matching

Line 9805: Unmatched parentheses: 1 open, 2 close
  Content: ).join('')}
  Fix: Verify parentheses matching

Line 9805: Unmatched braces: 0 open, 1 close
  Content: ).join('')}
  Fix: Verify brace matching

Line 9810: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9812: Unmatched braces: 1 open, 0 close
  Content: function filterCourses(query) {
  Fix: Verify brace matching

Line 9818: Unmatched braces: 1 open, 0 close
  Content: if (courses.length === 0) {
  Fix: Verify brace matching

Line 9819: Unmatched braces: 1 open, 0 close
  Content: if (courseGrid) {
  Fix: Verify brace matching

Line 9827: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9828: Unmatched braces: 1 open, 0 close
  Content: if (courseGridMobile) {
  Fix: Verify brace matching

Line 9835: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9837: Unmatched braces: 1 open, 0 close
  Content: if (courseGrid) {
  Fix: Verify brace matching

Line 9839: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9840: Unmatched braces: 1 open, 0 close
  Content: if (courseGridMobile) {
  Fix: Verify brace matching

Line 9842: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9843: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9844: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9846: Unmatched braces: 1 open, 0 close
  Content: function selectCourse(courseId) {
  Fix: Verify brace matching

Line 9851: Unmatched braces: 1 open, 0 close
  Content: if (!selectedCourse) {
  Fix: Verify brace matching

Line 9855: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9865: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Verify parentheses matching

Line 9865: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Verify brace matching

Line 9868: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9868: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9871: Unmatched braces: 1 open, 0 close
  Content: if (selectedCard) {
  Fix: Verify brace matching

Line 9876: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9880: Unmatched braces: 1 open, 0 close
  Content: if (caddieSection) {
  Fix: Verify brace matching

Line 9885: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9889: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9891: Unmatched braces: 1 open, 0 close
  Content: function updateSelectedCourseDisplay() {
  Fix: Verify brace matching

Line 9895: Unmatched braces: 1 open, 0 close
  Content: if (selectedCourse && selectedCourseInfo && selectedCourseName) {
  Fix: Verify brace matching

Line 9898: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9899: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9901: Unmatched braces: 1 open, 0 close
  Content: function loadCaddysForCourse(homeClub) {
  Fix: Verify brace matching

Line 9906: Unmatched parentheses: 1 open, 0 close
  Content: const courseCaddys = CaddySystem.allCaddys.filter(caddie => {
  Fix: Verify parentheses matching

Line 9906: Unmatched braces: 1 open, 0 close
  Content: const courseCaddys = CaddySystem.allCaddys.filter(caddie => {
  Fix: Verify brace matching

Line 9909: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 9909: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 9916: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9918: Unmatched braces: 1 open, 0 close
  Content: function renderCaddys(caddies) {
  Fix: Verify brace matching

Line 9922: Unmatched braces: 1 open, 0 close
  Content: if (caddies.length === 0) {
  Fix: Verify brace matching

Line 9923: Unmatched braces: 1 open, 0 close
  Content: if (caddieGrid) {
  Fix: Verify brace matching

Line 9930: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9931: Unmatched braces: 1 open, 0 close
  Content: if (caddieGridMobile) {
  Fix: Verify brace matching

Line 9938: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9940: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9943: Unmatched braces: 1 open, 0 close
  Content: if (caddieGrid) {
  Fix: Verify brace matching

Line 9945: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9948: Unmatched braces: 1 open, 0 close
  Content: if (caddieGridMobile) {
  Fix: Verify brace matching

Line 9950: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9951: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 9953: Unmatched braces: 1 open, 0 close
  Content: function createMobileCaddyCard(caddie) {
  Fix: Verify brace matching

Line 9984: Unmatched parentheses: 2 open, 1 close
  Content: ${caddie.languages.slice(0, 2).map(lang =>
  Fix: Verify parentheses matching

Line 9984: Unmatched braces: 1 open, 0 close
  Content: ${caddie.languages.slice(0, 2).map(lang =>
  Fix: Verify brace matching

Line 9986: Unmatched parentheses: 1 open, 2 close
  Content: ).join('')}
  Fix: Verify parentheses matching

Line 9986: Unmatched braces: 0 open, 1 close
  Content: ).join('')}
  Fix: Verify brace matching

Line 9991: Unmatched braces: 1 open, 0 close
  Content: ${isAvailable ?
  Fix: Verify brace matching

Line 9998: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10002: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10004: Unmatched braces: 1 open, 0 close
  Content: function createCaddyCard(caddie) {
  Fix: Verify brace matching

Line 10029: Unmatched braces: 1 open, 0 close
  Content: <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
  Fix: Verify brace matching

Line 10032: Unmatched braces: 0 open, 1 close
  Content: }">
  Fix: Verify brace matching

Line 10037: Unmatched braces: 1 open, 0 close
  Content: ${isAvailable ?
  Fix: Verify brace matching

Line 10048: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10060: Unmatched parentheses: 1 open, 0 close
  Content: ${caddie.languages.map(lang =>
  Fix: Verify parentheses matching

Line 10060: Unmatched braces: 1 open, 0 close
  Content: ${caddie.languages.map(lang =>
  Fix: Verify brace matching

Line 10062: Unmatched parentheses: 1 open, 2 close
  Content: ).join('')}
  Fix: Verify parentheses matching

Line 10062: Unmatched braces: 0 open, 1 close
  Content: ).join('')}
  Fix: Verify brace matching

Line 10072: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10074: Unmatched braces: 1 open, 0 close
  Content: function filterCaddys(query) {
  Fix: Verify brace matching

Line 10077: Unmatched parentheses: 1 open, 0 close
  Content: const filtered = filteredCaddys.filter(caddie =>
  Fix: Verify parentheses matching

Line 10082: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 10085: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10087: Unmatched braces: 1 open, 0 close
  Content: function updateCaddyStats(caddies) {
  Fix: Verify brace matching

Line 10096: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10098: Unmatched braces: 1 open, 0 close
  Content: function bookCaddyFromBooking(caddieId, caddieName) {
  Fix: Verify brace matching

Line 10099: Unmatched braces: 1 open, 0 close
  Content: if (!selectedCourse) {
  Fix: Verify brace matching

Line 10102: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10105: Unmatched braces: 1 open, 0 close
  Content: if (!selectedCaddys.includes(caddieId)) {
  Fix: Verify brace matching

Line 10107: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10113: Unmatched braces: 1 open, 0 close
  Content: if (caddieCard) {
  Fix: Verify brace matching

Line 10115: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10116: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10118: Unmatched braces: 1 open, 0 close
  Content: function joinWaitlistFromBooking(caddieId, caddieName) {
  Fix: Verify brace matching

Line 10120: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10123: Unmatched braces: 1 open, 0 close
  Content: let bookingCart = {
  Fix: Verify brace matching

Line 10131: Unmatched braces: 1 open, 0 close
  Content: totals: {
  Fix: Verify brace matching

Line 10137: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10138: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10140: Unmatched braces: 1 open, 0 close
  Content: function initializeBookingCart() {
  Fix: Verify brace matching

Line 10142: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10144: Unmatched braces: 1 open, 0 close
  Content: function addCourseToCart(course) {
  Fix: Verify brace matching

Line 10148: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10150: Unmatched braces: 1 open, 0 close
  Content: function addCaddyToCart(caddie, type = 'booking') {
  Fix: Verify brace matching

Line 10151: Unmatched braces: 1 open, 0 close
  Content: const cartItem = {
  Fix: Verify brace matching

Line 10159: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10161: Unmatched braces: 1 open, 0 close
  Content: if (type === 'booking') {
  Fix: Verify brace matching

Line 10164: Unmatched braces: 1 open, 0 close
  Content: if (existing) {
  Fix: Verify brace matching

Line 10167: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10172: Unmatched braces: 1 open, 0 close
  Content: if (existing) {
  Fix: Verify brace matching

Line 10175: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10177: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10181: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10183: Unmatched braces: 1 open, 0 close
  Content: function toggleServiceNew(serviceId) {
  Fix: Verify brace matching

Line 10184: Unmatched brackets: 1 open, 0 close
  Content: const serviceOptions = [
  Fix: Verify bracket matching

Line 10190: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 10196: Unmatched braces: 1 open, 0 close
  Content: if (!bookingCart.services) {
  Fix: Verify brace matching

Line 10198: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10203: Unmatched braces: 1 open, 0 close
  Content: if (existingIndex >= 0) {
  Fix: Verify brace matching

Line 10206: Unmatched parentheses: 1 open, 0 close
  Content: serviceElements.forEach(el => {
  Fix: Verify parentheses matching

Line 10206: Unmatched braces: 1 open, 0 close
  Content: serviceElements.forEach(el => {
  Fix: Verify brace matching

Line 10209: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10209: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10214: Unmatched parentheses: 1 open, 0 close
  Content: serviceElements.forEach(el => {
  Fix: Verify parentheses matching

Line 10214: Unmatched braces: 1 open, 0 close
  Content: serviceElements.forEach(el => {
  Fix: Verify brace matching

Line 10217: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10217: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10219: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10222: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10224: Unmatched braces: 1 open, 0 close
  Content: function removeCaddyFromCart(caddieId, type = 'booking') {
  Fix: Verify brace matching

Line 10225: Unmatched braces: 1 open, 0 close
  Content: if (type === 'booking') {
  Fix: Verify brace matching

Line 10229: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10231: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10233: Unmatched braces: 1 open, 0 close
  Content: function updateBookingCartDisplay() {
  Fix: Verify brace matching

Line 10249: Unmatched braces: 1 open, 0 close
  Content: if (totalItems === 0) {
  Fix: Verify brace matching

Line 10257: Unmatched braces: 1 open, 0 close
  Content: if (confirmBtn) {
  Fix: Verify brace matching

Line 10260: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10265: Unmatched braces: 1 open, 0 close
  Content: if (bookingCart.course) {
  Fix: Verify brace matching

Line 10285: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10291: Unmatched braces: 1 open, 0 close
  Content: if (confirmBtn && bookingCart.course && date && time && bookingCart.paymentMethod) {
  Fix: Verify brace matching

Line 10297: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10300: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.caddies.forEach(caddie => {
  Fix: Verify parentheses matching

Line 10300: Unmatched braces: 1 open, 0 close
  Content: bookingCart.caddies.forEach(caddie => {
  Fix: Verify brace matching

Line 10321: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10321: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10324: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.waitlists.forEach(waitlist => {
  Fix: Verify parentheses matching

Line 10324: Unmatched braces: 1 open, 0 close
  Content: bookingCart.waitlists.forEach(waitlist => {
  Fix: Verify brace matching

Line 10345: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10345: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10348: Unmatched braces: 1 open, 0 close
  Content: if (bookingCart.services && bookingCart.services.length > 0) {
  Fix: Verify brace matching

Line 10349: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.services.forEach(service => {
  Fix: Verify parentheses matching

Line 10349: Unmatched braces: 1 open, 0 close
  Content: bookingCart.services.forEach(service => {
  Fix: Verify brace matching

Line 10370: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10370: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10371: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10375: Unmatched braces: 1 open, 0 close
  Content: if (confirmBtn) {
  Fix: Verify brace matching

Line 10377: Unmatched braces: 1 open, 0 close
  Content: if (bookingCart.course) {
  Fix: Verify brace matching

Line 10381: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10382: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10383: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10384: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10386: Unmatched braces: 1 open, 0 close
  Content: function calculateCartTotals() {
  Fix: Verify brace matching

Line 10394: Unmatched braces: 1 open, 0 close
  Content: bookingCart.totals = {
  Fix: Verify brace matching

Line 10400: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10408: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10410: Unmatched braces: 1 open, 0 close
  Content: function removeCourseFromCart() {
  Fix: Verify brace matching

Line 10416: Unmatched braces: 1 open, 0 close
  Content: if (caddieSection) {
  Fix: Verify brace matching

Line 10418: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10421: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Verify parentheses matching

Line 10421: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.course-card').forEach(card => {
  Fix: Verify brace matching

Line 10424: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10424: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10427: Unmatched braces: 1 open, 0 close
  Content: if (selectedCourseInfo) {
  Fix: Verify brace matching

Line 10429: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10433: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10435: Unmatched braces: 1 open, 0 close
  Content: function clearBookingCart() {
  Fix: Verify brace matching

Line 10436: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to clear your entire cart?')) {
  Fix: Verify brace matching

Line 10437: Unmatched braces: 1 open, 0 close
  Content: bookingCart = {
  Fix: Verify brace matching

Line 10446: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10454: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10455: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10457: Unmatched braces: 1 open, 0 close
  Content: function confirmBooking() {
  Fix: Verify brace matching

Line 10463: Unmatched braces: 1 open, 0 close
  Content: if (creatingBooking) {
  Fix: Verify brace matching

Line 10466: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10469: Unmatched braces: 1 open, 0 close
  Content: if (!bookingCart.course) {
  Fix: Verify brace matching

Line 10473: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10480: Unmatched braces: 1 open, 0 close
  Content: if (!date || !time) {
  Fix: Verify brace matching

Line 10484: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10490: Unmatched braces: 1 open, 0 close
  Content: if (!currentUser?.name) {
  Fix: Verify brace matching

Line 10492: Unmatched braces: 1 open, 0 close
  Content: currentUser = {
  Fix: Verify brace matching

Line 10496: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10499: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10501: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 10504: Unmatched parentheses: 1 open, 0 close
  Content: const groupId = makeRoundGroupId({
  Fix: Verify parentheses matching

Line 10504: Unmatched braces: 1 open, 0 close
  Content: const groupId = makeRoundGroupId({
  Fix: Verify brace matching

Line 10508: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10508: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10512: Unmatched parentheses: 1 open, 0 close
  Content: const isDuplicate = existingBookings.some(booking =>
  Fix: Verify parentheses matching

Line 10518: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 10520: Unmatched braces: 1 open, 0 close
  Content: if (isDuplicate) {
  Fix: Verify brace matching

Line 10524: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10527: Unmatched braces: 1 open, 0 close
  Content: const mainBooking = {
  Fix: Verify brace matching

Line 10544: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10553: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.caddies.forEach(caddie => {
  Fix: Verify parentheses matching

Line 10553: Unmatched braces: 1 open, 0 close
  Content: bookingCart.caddies.forEach(caddie => {
  Fix: Verify brace matching

Line 10554: Unmatched braces: 1 open, 0 close
  Content: const caddieBooking = {
  Fix: Verify brace matching

Line 10564: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10568: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10568: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10571: Unmatched braces: 1 open, 0 close
  Content: if (bookingCart.services && bookingCart.services.length > 0) {
  Fix: Verify brace matching

Line 10572: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.services.forEach(service => {
  Fix: Verify parentheses matching

Line 10572: Unmatched braces: 1 open, 0 close
  Content: bookingCart.services.forEach(service => {
  Fix: Verify brace matching

Line 10573: Unmatched braces: 1 open, 0 close
  Content: const serviceBooking = {
  Fix: Verify brace matching

Line 10584: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10588: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10588: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10589: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10592: Unmatched parentheses: 1 open, 0 close
  Content: bookingCart.waitlists.forEach(waitlist => {
  Fix: Verify parentheses matching

Line 10592: Unmatched braces: 1 open, 0 close
  Content: bookingCart.waitlists.forEach(waitlist => {
  Fix: Verify brace matching

Line 10593: Unmatched parentheses: 1 open, 0 close
  Content: BookingManager.addToWaitlist(waitlist.id, {
  Fix: Verify parentheses matching

Line 10593: Unmatched braces: 1 open, 0 close
  Content: BookingManager.addToWaitlist(waitlist.id, {
  Fix: Verify brace matching

Line 10597: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10597: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10598: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10598: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10603: Unmatched braces: 1 open, 0 close
  Content: bookingCart = {
  Fix: Verify brace matching

Line 10610: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10613: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 10613: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 10615: Unmatched parentheses: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify parentheses matching

Line 10615: Unmatched braces: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify brace matching

Line 10625: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10626: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10629: Unmatched braces: 1 open, 0 close
  Content: function bookCaddyFromBooking(caddieId, caddieName) {
  Fix: Verify brace matching

Line 10631: Unmatched braces: 1 open, 0 close
  Content: if (caddie) {
  Fix: Verify brace matching

Line 10633: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10634: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10636: Unmatched braces: 1 open, 0 close
  Content: function joinWaitlistFromBooking(caddieId, caddieName) {
  Fix: Verify brace matching

Line 10638: Unmatched braces: 1 open, 0 close
  Content: if (caddie) {
  Fix: Verify brace matching

Line 10640: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10641: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10644: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 10644: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 10645: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 10645: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 10647: Unmatched parentheses: 0 open, 1 close
  Content: }, 500);
  Fix: Verify parentheses matching

Line 10647: Unmatched braces: 0 open, 1 close
  Content: }, 500);
  Fix: Verify brace matching

Line 10648: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10648: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10651: Unmatched braces: 1 open, 0 close
  Content: const ChatSystem = {
  Fix: Verify brace matching

Line 10655: Unmatched braces: 1 open, 0 close
  Content: translations: {
  Fix: Verify brace matching

Line 10656: Unmatched braces: 1 open, 0 close
  Content: en: {
  Fix: Verify brace matching

Line 10674: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10675: Unmatched braces: 1 open, 0 close
  Content: th: {
  Fix: Verify brace matching

Line 10693: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10694: Unmatched braces: 1 open, 0 close
  Content: ko: {
  Fix: Verify brace matching

Line 10712: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10713: Unmatched braces: 1 open, 0 close
  Content: ja: {
  Fix: Verify brace matching

Line 10731: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10732: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10734: Unmatched braces: 1 open, 0 close
  Content: initialize() {
  Fix: Verify brace matching

Line 10735: Unmatched braces: 1 open, 0 close
  Content: this.currentUser = {
  Fix: Verify brace matching

Line 10742: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10749: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10751: Unmatched braces: 1 open, 0 close
  Content: initializeChatRooms() {
  Fix: Verify brace matching

Line 10752: Unmatched braces: 1 open, 0 close
  Content: this.chatRooms = {
  Fix: Verify brace matching

Line 10754: Unmatched braces: 1 open, 0 close
  Content: 'pattaya_golf_general': {
  Fix: Verify brace matching

Line 10766: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10767: Unmatched braces: 1 open, 0 close
  Content: 'thai_country_club': {
  Fix: Verify brace matching

Line 10779: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10782: Unmatched braces: 1 open, 0 close
  Content: 'golfers_lounge': {
  Fix: Verify brace matching

Line 10794: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10795: Unmatched braces: 1 open, 0 close
  Content: 'caddie_network': {
  Fix: Verify brace matching

Line 10807: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10808: Unmatched braces: 1 open, 0 close
  Content: 'staff_coordination': {
  Fix: Verify brace matching

Line 10820: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10823: Unmatched braces: 1 open, 0 close
  Content: 'bangkok_golf_society': {
  Fix: Verify brace matching

Line 10835: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10836: Unmatched braces: 1 open, 0 close
  Content: 'monthly_tournaments': {
  Fix: Verify brace matching

Line 10848: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10851: Unmatched braces: 1 open, 0 close
  Content: 'customer_support': {
  Fix: Verify brace matching

Line 10863: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10866: Unmatched braces: 1 open, 0 close
  Content: 'dm_ning_prasert': {
  Fix: Verify brace matching

Line 10878: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10879: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10880: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10882: Unmatched braces: 1 open, 0 close
  Content: loadSampleMessages() {
  Fix: Verify brace matching

Line 10884: Unmatched parentheses: 1 open, 0 close
  Content: this.addMessage('pattaya_golf_general', {
  Fix: Verify parentheses matching

Line 10884: Unmatched braces: 1 open, 0 close
  Content: this.addMessage('pattaya_golf_general', {
  Fix: Verify brace matching

Line 10891: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10891: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10893: Unmatched parentheses: 1 open, 0 close
  Content: this.addMessage('pattaya_golf_general', {
  Fix: Verify parentheses matching

Line 10893: Unmatched braces: 1 open, 0 close
  Content: this.addMessage('pattaya_golf_general', {
  Fix: Verify brace matching

Line 10900: Unmatched braces: 1 open, 0 close
  Content: translation: {
  Fix: Verify brace matching

Line 10904: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10905: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10905: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10907: Unmatched parentheses: 1 open, 0 close
  Content: this.addMessage('golfers_lounge', {
  Fix: Verify parentheses matching

Line 10907: Unmatched braces: 1 open, 0 close
  Content: this.addMessage('golfers_lounge', {
  Fix: Verify brace matching

Line 10914: Unmatched braces: 1 open, 0 close
  Content: translation: {
  Fix: Verify brace matching

Line 10918: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10919: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10919: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10921: Unmatched parentheses: 1 open, 0 close
  Content: this.addMessage('caddie_network', {
  Fix: Verify parentheses matching

Line 10921: Unmatched braces: 1 open, 0 close
  Content: this.addMessage('caddie_network', {
  Fix: Verify brace matching

Line 10928: Unmatched braces: 1 open, 0 close
  Content: translation: {
  Fix: Verify brace matching

Line 10932: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10933: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10933: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10935: Unmatched parentheses: 1 open, 0 close
  Content: this.addMessage('dm_ning_prasert', {
  Fix: Verify parentheses matching

Line 10935: Unmatched braces: 1 open, 0 close
  Content: this.addMessage('dm_ning_prasert', {
  Fix: Verify brace matching

Line 10942: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 10942: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 10943: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10945: Unmatched braces: 1 open, 0 close
  Content: addMessage(roomId, messageData) {
  Fix: Verify brace matching

Line 10948: Unmatched braces: 1 open, 0 close
  Content: const message = {
  Fix: Verify brace matching

Line 10954: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10961: Unmatched braces: 1 open, 0 close
  Content: if (messageData.senderId !== this.currentUser.id) {
  Fix: Verify brace matching

Line 10963: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10966: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10968: Unmatched braces: 1 open, 0 close
  Content: sendMessage(roomId, text, language = null) {
  Fix: Verify brace matching

Line 10969: Unmatched braces: 1 open, 0 close
  Content: const message = {
  Fix: Verify brace matching

Line 10976: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10979: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10981: Unmatched braces: 1 open, 0 close
  Content: translateMessage(messageId, targetLanguage) {
  Fix: Verify brace matching

Line 10983: Unmatched braces: 1 open, 0 close
  Content: const translations = {
  Fix: Verify brace matching

Line 10984: Unmatched braces: 1 open, 0 close
  Content: 'Hello everyone!': {
  Fix: Verify brace matching

Line 10988: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 10989: Unmatched braces: 1 open, 0 close
  Content: 'Good morning': {
  Fix: Verify brace matching

Line 10993: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 10994: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 10998: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11000: Unmatched braces: 1 open, 0 close
  Content: getChatRoomsByCategory(category) {
  Fix: Verify brace matching

Line 11002: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11004: Unmatched braces: 1 open, 0 close
  Content: getUserChatRooms() {
  Fix: Verify brace matching

Line 11005: Unmatched parentheses: 2 open, 1 close
  Content: return Object.values(this.chatRooms).filter(room =>
  Fix: Verify parentheses matching

Line 11007: Unmatched braces: 1 open, 0 close
  Content: ).sort((a, b) => {
  Fix: Verify brace matching

Line 11012: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11012: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11013: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11015: Unmatched braces: 1 open, 0 close
  Content: showChatInterface() {
  Fix: Verify brace matching

Line 11017: Unmatched braces: 1 open, 0 close
  Content: if (!this.currentUser) {
  Fix: Verify brace matching

Line 11019: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11204: Unmatched braces: 1 open, 0 close
  Content: if (isMobile) {
  Fix: Verify brace matching

Line 11208: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11212: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11214: Unmatched braces: 1 open, 0 close
  Content: generateChatSidebar() {
  Fix: Verify brace matching

Line 11215: Unmatched braces: 1 open, 0 close
  Content: const categories = {
  Fix: Verify brace matching

Line 11225: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 11229: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(categories).forEach(([categoryKey, category]) => {
  Fix: Verify parentheses matching

Line 11229: Unmatched braces: 1 open, 0 close
  Content: Object.entries(categories).forEach(([categoryKey, category]) => {
  Fix: Verify brace matching

Line 11230: Unmatched parentheses: 2 open, 1 close
  Content: const rooms = this.getChatRoomsByCategory(categoryKey).filter(room =>
  Fix: Verify parentheses matching

Line 11232: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 11234: Unmatched braces: 1 open, 0 close
  Content: if (rooms.length > 0) {
  Fix: Verify brace matching

Line 11241: Unmatched parentheses: 1 open, 0 close
  Content: ${rooms.map(room => {
  Fix: Verify parentheses matching

Line 11241: Unmatched braces: 2 open, 0 close
  Content: ${rooms.map(room => {
  Fix: Verify brace matching

Line 11246: Unmatched parentheses: 1 open, 0 close
  Content: ? (lastMessage.content.length > 30
  Fix: Verify parentheses matching

Line 11248: Unmatched parentheses: 0 open, 1 close
  Content: : lastMessage.content)
  Fix: Verify parentheses matching

Line 11262: Unmatched braces: 1 open, 0 close
  Content: ${room.unreadCount ? `
  Fix: Verify brace matching

Line 11266: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 11268: Unmatched parentheses: 1 open, 2 close
  Content: `;}).join('')}
  Fix: Verify parentheses matching

Line 11268: Unmatched braces: 0 open, 2 close
  Content: `;}).join('')}
  Fix: Verify brace matching

Line 11271: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11272: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11272: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11275: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11278: Unmatched braces: 1 open, 0 close
  Content: refreshChatSidebar() {
  Fix: Verify brace matching

Line 11281: Unmatched braces: 1 open, 0 close
  Content: if (desktopSidebar) {
  Fix: Verify brace matching

Line 11283: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11287: Unmatched braces: 1 open, 0 close
  Content: if (mobileSidebar) {
  Fix: Verify brace matching

Line 11289: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11290: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11292: Unmatched braces: 1 open, 0 close
  Content: openChatRoom(roomId) {
  Fix: Verify brace matching

Line 11326: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11328: Unmatched braces: 1 open, 0 close
  Content: displayMessages(roomId) {
  Fix: Verify brace matching

Line 11332: Unmatched braces: 1 open, 0 close
  Content: if (!room || !room.messages.length) {
  Fix: Verify brace matching

Line 11340: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11342: Unmatched parentheses: 1 open, 0 close
  Content: messagesContainer.innerHTML = room.messages.map(message => `
  Fix: Verify parentheses matching

Line 11345: Unmatched braces: 1 open, 0 close
  Content: ${message.senderId !== this.currentUser.id ? `
  Fix: Verify brace matching

Line 11347: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 11349: Unmatched braces: 1 open, 0 close
  Content: ${message.language !== this.currentUser.language && message.translation ? `
  Fix: Verify brace matching

Line 11359: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 11365: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 11369: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11371: Unmatched braces: 1 open, 0 close
  Content: sendCurrentMessage() {
  Fix: Verify brace matching

Line 11382: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11384: Unmatched braces: 1 open, 0 close
  Content: toggleTranslation(messageId) {
  Fix: Verify brace matching

Line 11387: Unmatched braces: 1 open, 0 close
  Content: if (desktopTranslationDiv) {
  Fix: Verify brace matching

Line 11390: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11402: Unmatched braces: 1 open, 0 close
  Content: if (translatedText.style.display === 'none') {
  Fix: Verify brace matching

Line 11409: Unmatched braces: 1 open, 0 close
  Content: if (currentLang === 'th') {
  Fix: Verify brace matching

Line 11417: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11428: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11429: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11431: Unmatched braces: 1 open, 0 close
  Content: simulateTranslation(text, targetLang) {
  Fix: Verify brace matching

Line 11433: Unmatched braces: 1 open, 0 close
  Content: const translations = {
  Fix: Verify brace matching

Line 11434: Unmatched braces: 1 open, 0 close
  Content: th: {
  Fix: Verify brace matching

Line 11492: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11493: Unmatched braces: 1 open, 0 close
  Content: ko: {
  Fix: Verify brace matching

Line 11551: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11552: Unmatched braces: 1 open, 0 close
  Content: ja: {
  Fix: Verify brace matching

Line 11610: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11611: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 11617: Unmatched braces: 1 open, 0 close
  Content: for (const [english, foreign] of Object.entries(langTranslations)) {
  Fix: Verify brace matching

Line 11620: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11623: Unmatched braces: 1 open, 0 close
  Content: if (translated === text.toLowerCase()) {
  Fix: Verify brace matching

Line 11625: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11628: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11631: Unmatched braces: 1 open, 0 close
  Content: initializeChatSystem() {
  Fix: Verify brace matching

Line 11633: Unmatched braces: 1 open, 0 close
  Content: this.currentUser = {
  Fix: Verify brace matching

Line 11640: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 11643: Unmatched braces: 1 open, 0 close
  Content: this.chatRooms = {
  Fix: Verify brace matching

Line 11644: Unmatched braces: 1 open, 0 close
  Content: 'golf_general': {
  Fix: Verify brace matching

Line 11651: Unmatched brackets: 1 open, 0 close
  Content: messages: [
  Fix: Verify bracket matching

Line 11652: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11658: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11659: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11665: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11666: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11672: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11673: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 11676: Unmatched braces: 1 open, 0 close
  Content: lastMessage: {
  Fix: Verify brace matching

Line 11679: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11680: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11681: Unmatched braces: 1 open, 0 close
  Content: 'caddie_support': {
  Fix: Verify brace matching

Line 11688: Unmatched brackets: 1 open, 0 close
  Content: messages: [
  Fix: Verify bracket matching

Line 11689: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11695: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11696: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11702: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11703: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 11706: Unmatched braces: 1 open, 0 close
  Content: lastMessage: {
  Fix: Verify brace matching

Line 11709: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11710: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11711: Unmatched braces: 1 open, 0 close
  Content: 'direct_manager': {
  Fix: Verify brace matching

Line 11718: Unmatched brackets: 1 open, 0 close
  Content: messages: [
  Fix: Verify bracket matching

Line 11719: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 11725: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11726: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 11729: Unmatched braces: 1 open, 0 close
  Content: lastMessage: {
  Fix: Verify brace matching

Line 11732: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11733: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11734: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 11737: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11740: Unmatched braces: 1 open, 0 close
  Content: generateMobileChatSidebar() {
  Fix: Verify brace matching

Line 11741: Unmatched braces: 1 open, 0 close
  Content: const categories = {
  Fix: Verify brace matching

Line 11751: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 11755: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(categories).forEach(([categoryKey, category]) => {
  Fix: Verify parentheses matching

Line 11755: Unmatched braces: 1 open, 0 close
  Content: Object.entries(categories).forEach(([categoryKey, category]) => {
  Fix: Verify brace matching

Line 11756: Unmatched parentheses: 2 open, 1 close
  Content: const rooms = this.getChatRoomsByCategory(categoryKey).filter(room =>
  Fix: Verify parentheses matching

Line 11758: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 11760: Unmatched braces: 1 open, 0 close
  Content: if (rooms.length > 0) {
  Fix: Verify brace matching

Line 11769: Unmatched parentheses: 1 open, 0 close
  Content: ${rooms.map(room => {
  Fix: Verify parentheses matching

Line 11769: Unmatched braces: 2 open, 0 close
  Content: ${rooms.map(room => {
  Fix: Verify brace matching

Line 11774: Unmatched parentheses: 1 open, 0 close
  Content: ? (lastMessage.content.length > 35
  Fix: Verify parentheses matching

Line 11776: Unmatched parentheses: 0 open, 1 close
  Content: : lastMessage.content)
  Fix: Verify parentheses matching

Line 11792: Unmatched braces: 1 open, 0 close
  Content: ${room.unreadCount ? `
  Fix: Verify brace matching

Line 11796: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 11798: Unmatched parentheses: 1 open, 2 close
  Content: `;}).join('')}
  Fix: Verify parentheses matching

Line 11798: Unmatched braces: 0 open, 2 close
  Content: `;}).join('')}
  Fix: Verify brace matching

Line 11801: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11802: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11802: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11804: Unmatched braces: 1 open, 0 close
  Content: if (html === '') {
  Fix: Verify brace matching

Line 11811: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11814: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11816: Unmatched braces: 1 open, 0 close
  Content: openMobileChatRoom(roomId) {
  Fix: Verify brace matching

Line 11829: Unmatched braces: 1 open, 0 close
  Content: if (chatRoomView) {
  Fix: Verify brace matching

Line 11832: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11839: Unmatched braces: 1 open, 0 close
  Content: if (roomMembers) {
  Fix: Verify brace matching

Line 11841: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11848: Unmatched braces: 1 open, 0 close
  Content: if (input) {
  Fix: Verify brace matching

Line 11850: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11854: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11856: Unmatched braces: 1 open, 0 close
  Content: backToChatList() {
  Fix: Verify brace matching

Line 11861: Unmatched braces: 1 open, 0 close
  Content: if (chatRoomView) {
  Fix: Verify brace matching

Line 11864: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11867: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11869: Unmatched braces: 1 open, 0 close
  Content: renderMobileChatMessages(roomId) {
  Fix: Verify brace matching

Line 11876: Unmatched braces: 1 open, 0 close
  Content: if (room.messages && room.messages.length > 0) {
  Fix: Verify brace matching

Line 11877: Unmatched parentheses: 1 open, 0 close
  Content: messagesContainer.innerHTML = room.messages.map(message => `
  Fix: Verify parentheses matching

Line 11880: Unmatched braces: 1 open, 0 close
  Content: <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
  Fix: Verify brace matching

Line 11884: Unmatched braces: 1 open, 2 close
  Content: }" data-message-id="${message.id}">
  Fix: Verify brace matching

Line 11898: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 11906: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11910: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11912: Unmatched braces: 1 open, 0 close
  Content: initializeMobileChat() {
  Fix: Verify brace matching

Line 11918: Unmatched braces: 1 open, 0 close
  Content: if (textarea) {
  Fix: Verify brace matching

Line 11923: Unmatched parentheses: 2 open, 1 close
  Content: textarea.addEventListener('focus', () => {
  Fix: Verify parentheses matching

Line 11923: Unmatched braces: 1 open, 0 close
  Content: textarea.addEventListener('focus', () => {
  Fix: Verify brace matching

Line 11924: Unmatched braces: 1 open, 0 close
  Content: if (window.innerWidth <= 768) {
  Fix: Verify brace matching

Line 11926: Unmatched braces: 1 open, 0 close
  Content: if (chatRoomView) {
  Fix: Verify brace matching

Line 11928: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11930: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 11930: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 11932: Unmatched braces: 1 open, 0 close
  Content: if (chatMessages) {
  Fix: Verify brace matching

Line 11934: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11935: Unmatched parentheses: 0 open, 1 close
  Content: }, 300);
  Fix: Verify parentheses matching

Line 11935: Unmatched braces: 0 open, 1 close
  Content: }, 300);
  Fix: Verify brace matching

Line 11936: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11937: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11937: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11940: Unmatched parentheses: 2 open, 1 close
  Content: textarea.addEventListener('blur', () => {
  Fix: Verify parentheses matching

Line 11940: Unmatched braces: 1 open, 0 close
  Content: textarea.addEventListener('blur', () => {
  Fix: Verify brace matching

Line 11941: Unmatched braces: 1 open, 0 close
  Content: if (window.innerWidth <= 768) {
  Fix: Verify brace matching

Line 11942: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 11942: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 11944: Unmatched braces: 1 open, 0 close
  Content: if (chatRoomView) {
  Fix: Verify brace matching

Line 11946: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11947: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 11947: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 11948: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11949: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11949: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11950: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11953: Unmatched braces: 1 open, 0 close
  Content: if (window.innerWidth <= 768) {
  Fix: Verify brace matching

Line 11955: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11958: Unmatched parentheses: 2 open, 1 close
  Content: window.addEventListener('resize', () => {
  Fix: Verify parentheses matching

Line 11958: Unmatched braces: 1 open, 0 close
  Content: window.addEventListener('resize', () => {
  Fix: Verify brace matching

Line 11962: Unmatched braces: 1 open, 0 close
  Content: if (modal) {
  Fix: Verify brace matching

Line 11966: Unmatched braces: 1 open, 0 close
  Content: if (isMobile) {
  Fix: Verify brace matching

Line 11976: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11977: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11978: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11978: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11981: Unmatched braces: 1 open, 0 close
  Content: if (window.visualViewport) {
  Fix: Verify brace matching

Line 11982: Unmatched parentheses: 2 open, 1 close
  Content: window.visualViewport.addEventListener('resize', () => {
  Fix: Verify parentheses matching

Line 11982: Unmatched braces: 1 open, 0 close
  Content: window.visualViewport.addEventListener('resize', () => {
  Fix: Verify brace matching

Line 11984: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 11984: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 11985: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 11986: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11988: Unmatched braces: 1 open, 0 close
  Content: setViewportHeight() {
  Fix: Verify brace matching

Line 11992: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 11994: Unmatched braces: 1 open, 0 close
  Content: handleVisualViewportChange() {
  Fix: Verify brace matching

Line 11998: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12000: Unmatched braces: 1 open, 0 close
  Content: addMobileTouchInteractions() {
  Fix: Verify brace matching

Line 12006: Unmatched braces: 1 open, 0 close
  Content: if (chatRoomView) {
  Fix: Verify brace matching

Line 12007: Unmatched parentheses: 2 open, 1 close
  Content: chatRoomView.addEventListener('touchstart', (e) => {
  Fix: Verify parentheses matching

Line 12007: Unmatched braces: 1 open, 0 close
  Content: chatRoomView.addEventListener('touchstart', (e) => {
  Fix: Verify brace matching

Line 12010: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12010: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12012: Unmatched parentheses: 2 open, 1 close
  Content: chatRoomView.addEventListener('touchend', (e) => {
  Fix: Verify parentheses matching

Line 12012: Unmatched braces: 1 open, 0 close
  Content: chatRoomView.addEventListener('touchend', (e) => {
  Fix: Verify brace matching

Line 12019: Unmatched braces: 1 open, 0 close
  Content: if (Math.abs(diffX) > Math.abs(diffY) && diffX < -50) {
  Fix: Verify brace matching

Line 12021: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12022: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12022: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12023: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12027: Unmatched parentheses: 1 open, 0 close
  Content: buttons.forEach(button => {
  Fix: Verify parentheses matching

Line 12027: Unmatched braces: 1 open, 0 close
  Content: buttons.forEach(button => {
  Fix: Verify brace matching

Line 12028: Unmatched parentheses: 2 open, 1 close
  Content: button.addEventListener('click', () => {
  Fix: Verify parentheses matching

Line 12028: Unmatched braces: 1 open, 0 close
  Content: button.addEventListener('click', () => {
  Fix: Verify brace matching

Line 12029: Unmatched braces: 1 open, 0 close
  Content: if (navigator.vibrate) {
  Fix: Verify brace matching

Line 12031: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12032: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12032: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12033: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12033: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12034: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12036: Unmatched braces: 1 open, 0 close
  Content: autoResizeTextarea(textarea) {
  Fix: Verify brace matching

Line 12039: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12041: Unmatched braces: 1 open, 0 close
  Content: handleMobileInputKeypress(event) {
  Fix: Verify brace matching

Line 12042: Unmatched braces: 1 open, 0 close
  Content: if (event.key === 'Enter' && !event.shiftKey) {
  Fix: Verify brace matching

Line 12045: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12046: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12048: Unmatched braces: 1 open, 0 close
  Content: sendMobileMessage() {
  Fix: Verify brace matching

Line 12059: Unmatched braces: 1 open, 0 close
  Content: const message = {
  Fix: Verify brace matching

Line 12065: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 12083: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12085: Unmatched braces: 1 open, 0 close
  Content: formatTime(timestamp) {
  Fix: Verify brace matching

Line 12094: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12096: Unmatched braces: 1 open, 0 close
  Content: showChatSettings() {
  Fix: Verify brace matching

Line 12099: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12101: Unmatched braces: 1 open, 0 close
  Content: showMobileChatMenu() {
  Fix: Verify brace matching

Line 12104: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12106: Unmatched braces: 1 open, 0 close
  Content: showMobileAttachMenu() {
  Fix: Verify brace matching

Line 12109: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12112: Unmatched braces: 1 open, 0 close
  Content: searchContacts(query) {
  Fix: Verify brace matching

Line 12113: Unmatched braces: 1 open, 0 close
  Content: if (!query || query.trim() === '') {
  Fix: Verify brace matching

Line 12117: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12120: Unmatched parentheses: 2 open, 1 close
  Content: const results = Object.values(this.chatRooms).filter(room => {
  Fix: Verify parentheses matching

Line 12120: Unmatched braces: 1 open, 0 close
  Content: const results = Object.values(this.chatRooms).filter(room => {
  Fix: Verify brace matching

Line 12124: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12124: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12127: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12130: Unmatched braces: 1 open, 0 close
  Content: displaySearchResults(results) {
  Fix: Verify brace matching

Line 12134: Unmatched braces: 1 open, 0 close
  Content: const generateResultsHTML = (results) => {
  Fix: Verify brace matching

Line 12135: Unmatched braces: 1 open, 0 close
  Content: if (results.length === 0) {
  Fix: Verify brace matching

Line 12137: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12139: Unmatched parentheses: 1 open, 0 close
  Content: return results.map(room => {
  Fix: Verify parentheses matching

Line 12139: Unmatched braces: 1 open, 0 close
  Content: return results.map(room => {
  Fix: Verify brace matching

Line 12163: Unmatched parentheses: 1 open, 2 close
  Content: }).join('');
  Fix: Verify parentheses matching

Line 12163: Unmatched braces: 0 open, 1 close
  Content: }).join('');
  Fix: Verify brace matching

Line 12164: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 12167: Unmatched braces: 1 open, 0 close
  Content: if (sidebarContainer) {
  Fix: Verify brace matching

Line 12169: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12172: Unmatched braces: 1 open, 0 close
  Content: if (mobileSidebarContainer) {
  Fix: Verify brace matching

Line 12174: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12175: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12178: Unmatched braces: 1 open, 0 close
  Content: showNewChatModal() {
  Fix: Verify brace matching

Line 12269: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12272: Unmatched braces: 1 open, 0 close
  Content: generateContactsList() {
  Fix: Verify brace matching

Line 12273: Unmatched brackets: 1 open, 0 close
  Content: const allContacts = [
  Fix: Verify bracket matching

Line 12295: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 12297: Unmatched parentheses: 1 open, 0 close
  Content: return allContacts.map(contact => `
  Fix: Verify parentheses matching

Line 12323: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 12324: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12327: Unmatched braces: 1 open, 0 close
  Content: switchChatMode(mode) {
  Fix: Verify brace matching

Line 12335: Unmatched braces: 1 open, 0 close
  Content: if (mode === 'direct') {
  Fix: Verify brace matching

Line 12348: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12351: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12354: Unmatched braces: 1 open, 0 close
  Content: handleContactSelection(contactId, contactName, avatar, role) {
  Fix: Verify brace matching

Line 12355: Unmatched braces: 1 open, 0 close
  Content: if (this.chatMode === 'direct') {
  Fix: Verify brace matching

Line 12357: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12359: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12362: Unmatched braces: 1 open, 0 close
  Content: toggleContactSelection(contactId, contactName, avatar, role, isSelected) {
  Fix: Verify brace matching

Line 12365: Unmatched braces: 1 open, 0 close
  Content: if (isSelected) {
  Fix: Verify brace matching

Line 12366: Unmatched braces: 1 open, 0 close
  Content: if (!this.selectedContacts.find(c => c.id === contactId)) {
  Fix: Verify brace matching

Line 12368: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12371: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12375: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12378: Unmatched braces: 1 open, 0 close
  Content: updateSelectedContactsDisplay() {
  Fix: Verify brace matching

Line 12386: Unmatched parentheses: 1 open, 0 close
  Content: selectedList.innerHTML = this.selectedContacts.map(contact => `
  Fix: Verify parentheses matching

Line 12394: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 12395: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12398: Unmatched braces: 1 open, 0 close
  Content: removeSelectedContact(contactId) {
  Fix: Verify brace matching

Line 12407: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12410: Unmatched braces: 1 open, 0 close
  Content: clearSelectedContacts() {
  Fix: Verify brace matching

Line 12414: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.contact-item input[type="checkbox"]').forEach(cb => {
  Fix: Verify parentheses matching

Line 12414: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.contact-item input[type="checkbox"]').forEach(cb => {
  Fix: Verify brace matching

Line 12416: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12416: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12420: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12423: Unmatched braces: 1 open, 0 close
  Content: updateCreateButton() {
  Fix: Verify brace matching

Line 12429: Unmatched braces: 1 open, 0 close
  Content: if (this.chatMode === 'direct') {
  Fix: Verify brace matching

Line 12433: Unmatched braces: 1 open, 0 close
  Content: if (this.selectedContacts.length === 0) {
  Fix: Verify brace matching

Line 12442: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12443: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12444: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12447: Unmatched braces: 1 open, 0 close
  Content: createSelectedChat() {
  Fix: Verify brace matching

Line 12450: Unmatched braces: 1 open, 0 close
  Content: if (this.selectedContacts.length === 1) {
  Fix: Verify brace matching

Line 12457: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12458: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12461: Unmatched braces: 1 open, 0 close
  Content: createGroupChat() {
  Fix: Verify brace matching

Line 12464: Unmatched braces: 1 open, 0 close
  Content: if (!groupName) {
  Fix: Verify brace matching

Line 12467: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12469: Unmatched braces: 1 open, 0 close
  Content: if (this.selectedContacts.length < 2) {
  Fix: Verify brace matching

Line 12472: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12479: Unmatched braces: 1 open, 0 close
  Content: this.chatRooms[roomId] = {
  Fix: Verify brace matching

Line 12490: Unmatched brackets: 1 open, 0 close
  Content: messages: [{
  Fix: Verify bracket matching

Line 12490: Unmatched braces: 1 open, 0 close
  Content: messages: [{
  Fix: Verify brace matching

Line 12497: Unmatched brackets: 0 open, 1 close
  Content: }],
  Fix: Verify bracket matching

Line 12497: Unmatched braces: 0 open, 1 close
  Content: }],
  Fix: Verify brace matching

Line 12501: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 12511: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12514: Unmatched braces: 1 open, 0 close
  Content: requestToJoinGroup(roomId) {
  Fix: Verify brace matching

Line 12516: Unmatched braces: 1 open, 0 close
  Content: if (!room || room.type !== 'group') {
  Fix: Verify brace matching

Line 12519: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12522: Unmatched braces: 1 open, 0 close
  Content: if (room.members.includes(this.currentUser.id)) {
  Fix: Verify brace matching

Line 12525: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12528: Unmatched braces: 1 open, 0 close
  Content: if (room.joinRequests && room.joinRequests.find(req => req.userId === this.currentUser.id)) {
  Fix: Verify brace matching

Line 12531: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12534: Unmatched braces: 1 open, 0 close
  Content: if (!room.joinRequests) {
  Fix: Verify brace matching

Line 12536: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12539: Unmatched parentheses: 1 open, 0 close
  Content: room.joinRequests.push({
  Fix: Verify parentheses matching

Line 12539: Unmatched braces: 1 open, 0 close
  Content: room.joinRequests.push({
  Fix: Verify brace matching

Line 12546: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12546: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12550: Unmatched parentheses: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify parentheses matching

Line 12550: Unmatched braces: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify brace matching

Line 12557: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12557: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12560: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12563: Unmatched braces: 1 open, 0 close
  Content: approveJoinRequest(roomId, requestId) {
  Fix: Verify brace matching

Line 12571: Unmatched braces: 1 open, 0 close
  Content: if (!room.admins.includes(this.currentUser.id)) {
  Fix: Verify brace matching

Line 12574: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12583: Unmatched parentheses: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify parentheses matching

Line 12583: Unmatched braces: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify brace matching

Line 12590: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12590: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12598: Unmatched braces: 1 open, 0 close
  Content: if (this.currentRoom === roomId) {
  Fix: Verify brace matching

Line 12600: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12601: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12604: Unmatched braces: 1 open, 0 close
  Content: rejectJoinRequest(roomId, requestId) {
  Fix: Verify brace matching

Line 12612: Unmatched braces: 1 open, 0 close
  Content: if (!room.admins.includes(this.currentUser.id)) {
  Fix: Verify brace matching

Line 12615: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12621: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12624: Unmatched braces: 1 open, 0 close
  Content: showJoinRequests(roomId) {
  Fix: Verify brace matching

Line 12626: Unmatched braces: 1 open, 0 close
  Content: if (!room || !room.joinRequests || room.joinRequests.length === 0) {
  Fix: Verify brace matching

Line 12629: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12632: Unmatched braces: 1 open, 0 close
  Content: if (!room.admins.includes(this.currentUser.id)) {
  Fix: Verify brace matching

Line 12635: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12654: Unmatched parentheses: 1 open, 0 close
  Content: ${room.joinRequests.map(request => `
  Fix: Verify parentheses matching

Line 12654: Unmatched braces: 1 open, 0 close
  Content: ${room.joinRequests.map(request => `
  Fix: Verify brace matching

Line 12672: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 12672: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 12678: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12681: Unmatched braces: 1 open, 0 close
  Content: closeJoinRequestsModal() {
  Fix: Verify brace matching

Line 12683: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12686: Unmatched braces: 1 open, 0 close
  Content: showBrowseGroupsModal() {
  Fix: Verify brace matching

Line 12687: Unmatched parentheses: 2 open, 1 close
  Content: const availableGroups = Object.values(this.chatRooms).filter(room =>
  Fix: Verify parentheses matching

Line 12691: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 12693: Unmatched braces: 1 open, 0 close
  Content: if (availableGroups.length === 0) {
  Fix: Verify brace matching

Line 12696: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12721: Unmatched parentheses: 1 open, 0 close
  Content: ${availableGroups.map(group => {
  Fix: Verify parentheses matching

Line 12721: Unmatched braces: 2 open, 0 close
  Content: ${availableGroups.map(group => {
  Fix: Verify brace matching

Line 12739: Unmatched braces: 1 open, 0 close
  Content: ${hasRequest ?
  Fix: Verify brace matching

Line 12745: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12750: Unmatched parentheses: 1 open, 2 close
  Content: }).join('')}
  Fix: Verify parentheses matching

Line 12750: Unmatched braces: 0 open, 2 close
  Content: }).join('')}
  Fix: Verify brace matching

Line 12756: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12759: Unmatched braces: 1 open, 0 close
  Content: filterBrowseGroups(query) {
  Fix: Verify brace matching

Line 12763: Unmatched parentheses: 1 open, 0 close
  Content: groupItems.forEach(item => {
  Fix: Verify parentheses matching

Line 12763: Unmatched braces: 1 open, 0 close
  Content: groupItems.forEach(item => {
  Fix: Verify brace matching

Line 12767: Unmatched braces: 1 open, 0 close
  Content: if (name.includes(lowerQuery) || description.includes(lowerQuery)) {
  Fix: Verify brace matching

Line 12771: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12772: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12772: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12773: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12776: Unmatched braces: 1 open, 0 close
  Content: closeBrowseGroupsModal() {
  Fix: Verify brace matching

Line 12778: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12781: Unmatched braces: 1 open, 0 close
  Content: showChatOptions(roomId) {
  Fix: Verify brace matching

Line 12812: Unmatched braces: 1 open, 0 close
  Content: ${room.type === 'group' ? `
  Fix: Verify brace matching

Line 12819: Unmatched braces: 1 open, 0 close
  Content: ${isGroupAdmin ? `
  Fix: Verify brace matching

Line 12829: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 12831: Unmatched braces: 1 open, 0 close
  Content: ${isGroupMember && !isGroupAdmin ? `
  Fix: Verify brace matching

Line 12837: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 12838: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 12857: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12860: Unmatched braces: 1 open, 0 close
  Content: closeChatOptionsModal() {
  Fix: Verify brace matching

Line 12862: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12865: Unmatched braces: 1 open, 0 close
  Content: showChatInfo(roomId) {
  Fix: Verify brace matching

Line 12872: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12875: Unmatched braces: 1 open, 0 close
  Content: showGroupMembers(roomId) {
  Fix: Verify brace matching

Line 12883: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12886: Unmatched braces: 1 open, 0 close
  Content: clearChatHistory(roomId) {
  Fix: Verify brace matching

Line 12892: Unmatched braces: 1 open, 0 close
  Content: if (confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {
  Fix: Verify brace matching

Line 12896: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12897: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12900: Unmatched braces: 1 open, 0 close
  Content: toggleChatMute(roomId) {
  Fix: Verify brace matching

Line 12908: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12911: Unmatched braces: 1 open, 0 close
  Content: leaveGroup(roomId) {
  Fix: Verify brace matching

Line 12917: Unmatched braces: 2 open, 1 close
  Content: if (confirm(`Are you sure you want to leave "${room.name}"?`)) {
  Fix: Verify brace matching

Line 12922: Unmatched parentheses: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify parentheses matching

Line 12922: Unmatched braces: 1 open, 0 close
  Content: room.messages.push({
  Fix: Verify brace matching

Line 12929: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12929: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12934: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12935: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12938: Unmatched braces: 1 open, 0 close
  Content: filterNewChatContacts(query) {
  Fix: Verify brace matching

Line 12942: Unmatched parentheses: 1 open, 0 close
  Content: contactItems.forEach(item => {
  Fix: Verify parentheses matching

Line 12942: Unmatched braces: 1 open, 0 close
  Content: contactItems.forEach(item => {
  Fix: Verify brace matching

Line 12946: Unmatched braces: 1 open, 0 close
  Content: if (name.includes(lowerQuery) || role.includes(lowerQuery)) {
  Fix: Verify brace matching

Line 12950: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12951: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 12951: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 12952: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12955: Unmatched braces: 1 open, 0 close
  Content: startNewChatWith(contactId, contactName) {
  Fix: Verify brace matching

Line 12959: Unmatched braces: 1 open, 0 close
  Content: if (!this.chatRooms[roomId]) {
  Fix: Verify brace matching

Line 12960: Unmatched braces: 1 open, 0 close
  Content: this.chatRooms[roomId] = {
  Fix: Verify brace matching

Line 12974: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 12975: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12985: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 12988: Unmatched braces: 1 open, 0 close
  Content: selectChatRoomSmart(roomId) {
  Fix: Verify brace matching

Line 12991: Unmatched braces: 1 open, 0 close
  Content: if (isMobile) {
  Fix: Verify brace matching

Line 12995: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 12998: Unmatched braces: 1 open, 0 close
  Content: if (!this.currentRoom1) {
  Fix: Verify brace matching

Line 13013: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13014: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13017: Unmatched braces: 1 open, 0 close
  Content: selectChatRoom(roomId, windowNumber = 1) {
  Fix: Verify brace matching

Line 13020: Unmatched braces: 1 open, 0 close
  Content: if (!room) {
  Fix: Verify brace matching

Line 13023: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13026: Unmatched braces: 1 open, 0 close
  Content: if (room.unreadCount > 0) {
  Fix: Verify brace matching

Line 13029: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13037: Unmatched braces: 1 open, 0 close
  Content: if (isMobile) {
  Fix: Verify brace matching

Line 13042: Unmatched braces: 1 open, 0 close
  Content: if (!chatView) {
  Fix: Verify brace matching

Line 13047: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13052: Unmatched braces: 1 open, 0 close
  Content: if (windowNumber === 1) {
  Fix: Verify brace matching

Line 13056: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13059: Unmatched braces: 1 open, 0 close
  Content: if (chatWindow) {
  Fix: Verify brace matching

Line 13061: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13062: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13063: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13066: Unmatched braces: 1 open, 0 close
  Content: showChatWindowMenu(event, roomId) {
  Fix: Verify brace matching

Line 13103: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 13103: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 13105: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 13105: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 13106: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13109: Unmatched braces: 1 open, 0 close
  Content: closeChatWindowMenu() {
  Fix: Verify brace matching

Line 13111: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13114: Unmatched braces: 1 open, 0 close
  Content: closeChatWindow(windowNumber) {
  Fix: Verify brace matching

Line 13115: Unmatched braces: 1 open, 0 close
  Content: if (windowNumber === 1) {
  Fix: Verify brace matching

Line 13119: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13122: Unmatched braces: 1 open, 0 close
  Content: if (chatWindow) {
  Fix: Verify brace matching

Line 13139: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13140: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13143: Unmatched braces: 1 open, 0 close
  Content: generateMobileChatView(room) {
  Fix: Verify brace matching

Line 13159: Unmatched braces: 1 open, 0 close
  Content: ${room.type === 'group' && room.admins && room.admins.includes(this.currentUser.id) && room.joinRequ
  Fix: Verify brace matching

Line 13164: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13189: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13192: Unmatched braces: 1 open, 0 close
  Content: generateDesktopChatView(room, windowNumber = 1) {
  Fix: Verify brace matching

Line 13206: Unmatched braces: 1 open, 0 close
  Content: ${room.type === 'group' && room.admins && room.admins.includes(this.currentUser.id) && room.joinRequ
  Fix: Verify brace matching

Line 13211: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13237: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13240: Unmatched braces: 1 open, 0 close
  Content: showMobileChatList() {
  Fix: Verify brace matching

Line 13244: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13247: Unmatched braces: 1 open, 0 close
  Content: generateMessageHTML(message) {
  Fix: Verify brace matching

Line 13258: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13261: Unmatched braces: 1 open, 0 close
  Content: sendMessageFromInput(inputId, roomId, windowNumber = null) {
  Fix: Verify brace matching

Line 13270: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13273: Unmatched braces: 1 open, 0 close
  Content: sendMessage(content, roomId, windowNumber = null) {
  Fix: Verify brace matching

Line 13279: Unmatched braces: 1 open, 0 close
  Content: const message = {
  Fix: Verify brace matching

Line 13286: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13296: Unmatched braces: 1 open, 0 close
  Content: if (windowNumber) {
  Fix: Verify brace matching

Line 13301: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13302: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13305: Unmatched braces: 1 open, 0 close
  Content: closeNewChatModal() {
  Fix: Verify brace matching

Line 13307: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13309: Unmatched braces: 1 open, 0 close
  Content: closeChatInterface() {
  Fix: Verify brace matching

Line 13311: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13313: Unmatched braces: 1 open, 0 close
  Content: t(key) {
  Fix: Verify brace matching

Line 13316: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13319: Unmatched braces: 1 open, 0 close
  Content: updateBadge() {
  Fix: Verify brace matching

Line 13323: Unmatched parentheses: 1 open, 0 close
  Content: badges.forEach(badge => {
  Fix: Verify parentheses matching

Line 13323: Unmatched braces: 1 open, 0 close
  Content: badges.forEach(badge => {
  Fix: Verify brace matching

Line 13324: Unmatched braces: 1 open, 0 close
  Content: if (totalUnread > 0) {
  Fix: Verify brace matching

Line 13329: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13330: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 13330: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 13331: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13334: Unmatched braces: 1 open, 0 close
  Content: getTotalUnreadCount() {
  Fix: Verify brace matching

Line 13336: Unmatched parentheses: 2 open, 1 close
  Content: Object.values(this.chatRooms).forEach(room => {
  Fix: Verify parentheses matching

Line 13336: Unmatched braces: 1 open, 0 close
  Content: Object.values(this.chatRooms).forEach(room => {
  Fix: Verify brace matching

Line 13338: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 13338: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 13340: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13341: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13344: Unmatched braces: 1 open, 0 close
  Content: const CaddySystem = {
  Fix: Verify brace matching

Line 13345: Unmatched brackets: 1 open, 0 close
  Content: allCaddys: [
  Fix: Verify bracket matching

Line 13520: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 13525: Unmatched braces: 1 open, 0 close
  Content: getRandomPromotionalCaddys(count = 4) {
  Fix: Verify brace matching

Line 13527: Unmatched parentheses: 2 open, 1 close
  Content: return shuffled.slice(0, count).map(caddie => {
  Fix: Verify parentheses matching

Line 13527: Unmatched braces: 1 open, 0 close
  Content: return shuffled.slice(0, count).map(caddie => {
  Fix: Verify brace matching

Line 13531: Unmatched braces: 1 open, 0 close
  Content: return {
  Fix: Verify brace matching

Line 13533: Unmatched braces: 1 open, 0 close
  Content: promotedCourse: actualCourse || {
  Fix: Verify brace matching

Line 13539: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13540: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13541: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 13541: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 13542: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13544: Unmatched braces: 1 open, 0 close
  Content: addToWaitlist(caddieId, golferId, golferInfo) {
  Fix: Verify brace matching

Line 13545: Unmatched braces: 1 open, 0 close
  Content: if (!this.waitlists[caddieId]) {
  Fix: Verify brace matching

Line 13547: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13549: Unmatched braces: 1 open, 0 close
  Content: const waitlistEntry = {
  Fix: Verify brace matching

Line 13554: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13558: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13560: Unmatched braces: 1 open, 0 close
  Content: sendTimedOffer(caddieId, golferId) {
  Fix: Verify brace matching

Line 13564: Unmatched braces: 1 open, 0 close
  Content: this.activeOffers[offerId] = {
  Fix: Verify brace matching

Line 13570: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13575: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 13575: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 13576: Unmatched braces: 1 open, 0 close
  Content: if (this.activeOffers[offerId]?.status === 'pending') {
  Fix: Verify brace matching

Line 13578: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13579: Unmatched parentheses: 0 open, 1 close
  Content: }, 10 * 60 * 1000);
  Fix: Verify parentheses matching

Line 13579: Unmatched braces: 0 open, 1 close
  Content: }, 10 * 60 * 1000);
  Fix: Verify brace matching

Line 13582: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13584: Unmatched braces: 1 open, 0 close
  Content: showOfferModal(offerId) {
  Fix: Verify brace matching

Line 13651: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13653: Unmatched braces: 1 open, 0 close
  Content: startCountdown(offerId) {
  Fix: Verify brace matching

Line 13657: Unmatched braces: 1 open, 0 close
  Content: const updateCountdown = () => {
  Fix: Verify brace matching

Line 13661: Unmatched braces: 1 open, 0 close
  Content: if (timeLeft <= 0) {
  Fix: Verify brace matching

Line 13664: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13669: Unmatched braces: 1 open, 0 close
  Content: if (countdownElement) {
  Fix: Verify brace matching

Line 13671: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13672: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13677: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13679: Unmatched braces: 1 open, 0 close
  Content: acceptOffer(offerId) {
  Fix: Verify brace matching

Line 13691: Unmatched braces: 1 open, 0 close
  Content: if (currentUser && bookingCart.caddies && bookingCart.caddies.length > 0) {
  Fix: Verify brace matching

Line 13693: Unmatched parentheses: 1 open, 0 close
  Content: const existingCaddyIndex = bookingCart.caddies.findIndex(c =>
  Fix: Verify parentheses matching

Line 13696: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 13698: Unmatched braces: 1 open, 0 close
  Content: if (existingCaddyIndex >= 0) {
  Fix: Verify brace matching

Line 13704: Unmatched braces: 1 open, 0 close
  Content: if (prevCaddieObj) {
  Fix: Verify brace matching

Line 13707: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13710: Unmatched braces: 1 open, 0 close
  Content: bookingCart.caddies[existingCaddyIndex] = {
  Fix: Verify brace matching

Line 13720: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13730: Unmatched parentheses: 1 open, 0 close
  Content: this.notifyCaddyOfBooking(newCaddie.id, {
  Fix: Verify parentheses matching

Line 13730: Unmatched braces: 1 open, 0 close
  Content: this.notifyCaddyOfBooking(newCaddie.id, {
  Fix: Verify brace matching

Line 13735: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 13735: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 13741: Unmatched braces: 1 open, 0 close
  Content: newCaddie.currentBooking = {
  Fix: Verify brace matching

Line 13746: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13753: Unmatched braces: 1 open, 0 close
  Content: if (offer.countdownInterval) {
  Fix: Verify brace matching

Line 13755: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13760: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13761: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13772: Unmatched braces: 1 open, 0 close
  Content: if (offer.countdownInterval) {
  Fix: Verify brace matching

Line 13774: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13780: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13782: Unmatched braces: 1 open, 0 close
  Content: declineOffer(offerId) {
  Fix: Verify brace matching

Line 13794: Unmatched braces: 1 open, 0 close
  Content: if (offer.countdownInterval) {
  Fix: Verify brace matching

Line 13796: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13802: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13804: Unmatched braces: 1 open, 0 close
  Content: expireOffer(offerId) {
  Fix: Verify brace matching

Line 13816: Unmatched braces: 1 open, 0 close
  Content: if (offer.countdownInterval) {
  Fix: Verify brace matching

Line 13818: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13824: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13826: Unmatched braces: 1 open, 0 close
  Content: removeFromWaitlist(caddieId, golferId) {
  Fix: Verify brace matching

Line 13827: Unmatched braces: 1 open, 0 close
  Content: if (this.waitlists[caddieId]) {
  Fix: Verify brace matching

Line 13829: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13830: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13832: Unmatched braces: 1 open, 0 close
  Content: processNextInWaitlist(caddieId) {
  Fix: Verify brace matching

Line 13833: Unmatched braces: 1 open, 0 close
  Content: if (this.waitlists[caddieId] && this.waitlists[caddieId].length > 0) {
  Fix: Verify brace matching

Line 13836: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13837: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13839: Unmatched braces: 1 open, 0 close
  Content: showCaddyBookingFlow(caddieId) {
  Fix: Verify brace matching

Line 13840: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 13842: Unmatched braces: 1 open, 0 close
  Content: if (!caddie) {
  Fix: Verify brace matching

Line 13846: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13849: Unmatched braces: 1 open, 0 close
  Content: if (!course) {
  Fix: Verify brace matching

Line 13853: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13859: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 13859: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 13861: Unmatched braces: 1 open, 0 close
  Content: if (courseElement) {
  Fix: Verify brace matching

Line 13863: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13867: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 13867: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 13873: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13874: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13876: Unmatched braces: 1 open, 0 close
  Content: showCourseInfoModal(course, caddie = null) {
  Fix: Verify brace matching

Line 13905: Unmatched braces: 1 open, 0 close
  Content: ${caddie ? `
  Fix: Verify brace matching

Line 13919: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 13949: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13951: Unmatched braces: 1 open, 0 close
  Content: notifyCaddyOfBooking(caddieId, bookingDetails) {
  Fix: Verify brace matching

Line 13953: Unmatched braces: 1 open, 0 close
  Content: if (!caddie) {
  Fix: Verify brace matching

Line 13956: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13967: Unmatched braces: 1 open, 0 close
  Content: if (!caddie.notifications) {
  Fix: Verify brace matching

Line 13969: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13971: Unmatched parentheses: 1 open, 0 close
  Content: caddie.notifications.push({
  Fix: Verify parentheses matching

Line 13971: Unmatched braces: 1 open, 0 close
  Content: caddie.notifications.push({
  Fix: Verify brace matching

Line 13979: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 13979: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 13982: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 13983: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 13986: Unmatched braces: 1 open, 0 close
  Content: const BookingSystem = {
  Fix: Verify brace matching

Line 13987: Unmatched braces: 1 open, 0 close
  Content: currentBooking: {
  Fix: Verify brace matching

Line 13996: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 13998: Unmatched braces: 1 open, 0 close
  Content: get caddieDatabase() {
  Fix: Verify brace matching

Line 14000: Unmatched parentheses: 2 open, 0 close
  Content: return CaddySystem.allCaddys.map(caddie => ({
  Fix: Verify parentheses matching

Line 14000: Unmatched braces: 1 open, 0 close
  Content: return CaddySystem.allCaddys.map(caddie => ({
  Fix: Verify brace matching

Line 14014: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 14014: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 14015: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14017: Unmatched brackets: 1 open, 0 close
  Content: serviceOptions: [
  Fix: Verify bracket matching

Line 14023: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 14025: Unmatched braces: 1 open, 0 close
  Content: updateSummary() {
  Fix: Verify brace matching

Line 14032: Unmatched braces: 1 open, 0 close
  Content: if (!booking.course || !booking.date || !booking.time) {
  Fix: Verify brace matching

Line 14036: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14053: Unmatched parentheses: 1 open, 0 close
  Content: ${booking.caddies.map(caddie => `
  Fix: Verify parentheses matching

Line 14053: Unmatched braces: 1 open, 0 close
  Content: ${booking.caddies.map(caddie => `
  Fix: Verify brace matching

Line 14058: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 14058: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 14059: Unmatched parentheses: 1 open, 0 close
  Content: ${booking.services.map(service => `
  Fix: Verify parentheses matching

Line 14059: Unmatched braces: 1 open, 0 close
  Content: ${booking.services.map(service => `
  Fix: Verify brace matching

Line 14064: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 14064: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 14080: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14081: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14084: Unmatched braces: 1 open, 0 close
  Content: function selectCourseOld(element, courseType) {
  Fix: Verify brace matching

Line 14086: Unmatched braces: 1 open, 0 close
  Content: const courseMap = {
  Fix: Verify brace matching

Line 14090: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14093: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14095: Unmatched braces: 1 open, 0 close
  Content: function selectCaddy(caddieId, fromPromotion = false) {
  Fix: Verify brace matching

Line 14100: Unmatched braces: 1 open, 0 close
  Content: if (!caddie.availability) {
  Fix: Verify brace matching

Line 14103: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14106: Unmatched braces: 1 open, 0 close
  Content: if (fromPromotion) {
  Fix: Verify brace matching

Line 14110: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14115: Unmatched braces: 1 open, 0 close
  Content: if (existingIndex >= 0) {
  Fix: Verify brace matching

Line 14117: Unmatched braces: 1 open, 0 close
  Content: if (caddieElement) {
  Fix: Verify brace matching

Line 14120: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14123: Unmatched braces: 1 open, 0 close
  Content: if (caddieElement) {
  Fix: Verify brace matching

Line 14126: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14127: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14130: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14132: Unmatched braces: 1 open, 0 close
  Content: function showCaddyWaitlistModal(caddie) {
  Fix: Verify brace matching

Line 14180: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14182: Unmatched braces: 1 open, 0 close
  Content: function joinCaddyWaitlist(caddieId) {
  Fix: Verify brace matching

Line 14183: Unmatched braces: 1 open, 0 close
  Content: const golferInfo = {
  Fix: Verify brace matching

Line 14186: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14214: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 14214: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 14215: Unmatched braces: 1 open, 0 close
  Content: if (confirmationModal.parentNode) {
  Fix: Verify brace matching

Line 14217: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14218: Unmatched parentheses: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify parentheses matching

Line 14218: Unmatched braces: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify brace matching

Line 14219: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14221: Unmatched braces: 1 open, 0 close
  Content: function loadPromotionalCaddys() {
  Fix: Verify brace matching

Line 14276: Unmatched braces: 1 open, 0 close
  Content: ${caddie.availability === 'available' ?
  Fix: Verify brace matching

Line 14285: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14294: Unmatched braces: 1 open, 0 close
  Content: if (mobileContainer) {
  Fix: Verify brace matching

Line 14295: Unmatched parentheses: 1 open, 0 close
  Content: mobileContainer.innerHTML = promotionalCaddys.map(caddie =>
  Fix: Verify parentheses matching

Line 14297: Unmatched parentheses: 1 open, 2 close
  Content: ).join('');
  Fix: Verify parentheses matching

Line 14298: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14301: Unmatched braces: 1 open, 0 close
  Content: if (desktopContainer) {
  Fix: Verify brace matching

Line 14302: Unmatched parentheses: 1 open, 0 close
  Content: desktopContainer.innerHTML = promotionalCaddys.map(caddie =>
  Fix: Verify parentheses matching

Line 14304: Unmatched parentheses: 1 open, 2 close
  Content: ).join('');
  Fix: Verify parentheses matching

Line 14305: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14306: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14308: Unmatched braces: 1 open, 0 close
  Content: function refreshPromotionalCaddys() {
  Fix: Verify brace matching

Line 14323: Unmatched braces: 1 open, 0 close
  Content: if (mobileContainer) {
  Fix: Verify brace matching

Line 14325: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14326: Unmatched braces: 1 open, 0 close
  Content: if (desktopContainer) {
  Fix: Verify brace matching

Line 14328: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14331: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 14331: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 14333: Unmatched parentheses: 0 open, 1 close
  Content: }, 800);
  Fix: Verify parentheses matching

Line 14333: Unmatched braces: 0 open, 1 close
  Content: }, 800);
  Fix: Verify brace matching

Line 14334: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14337: Unmatched braces: 1 open, 0 close
  Content: function testCaddyAvailability() {
  Fix: Verify brace matching

Line 14339: Unmatched braces: 1 open, 0 close
  Content: if (bookedCaddys.length > 0) {
  Fix: Verify brace matching

Line 14347: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14348: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14350: Unmatched braces: 1 open, 0 close
  Content: function toggleService(serviceId) {
  Fix: Verify brace matching

Line 14357: Unmatched braces: 1 open, 0 close
  Content: if (existingIndex >= 0) {
  Fix: Verify brace matching

Line 14365: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14368: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14370: Unmatched braces: 1 open, 0 close
  Content: function selectPaymentMethod(method) {
  Fix: Verify brace matching

Line 14372: Unmatched braces: 1 open, 0 close
  Content: if (!bookingCart.paymentMethod) {
  Fix: Verify brace matching

Line 14376: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14382: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.payment-option').forEach(opt => {
  Fix: Verify parentheses matching

Line 14382: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.payment-option').forEach(opt => {
  Fix: Verify brace matching

Line 14385: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14385: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14387: Unmatched braces: 1 open, 0 close
  Content: if (selectedOption) {
  Fix: Verify brace matching

Line 14390: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14396: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14398: Unmatched braces: 1 open, 0 close
  Content: function resetBookingForm() {
  Fix: Verify brace matching

Line 14399: Unmatched braces: 1 open, 0 close
  Content: BookingSystem.currentBooking = {
  Fix: Verify brace matching

Line 14402: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14403: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.course-option, .payment-option').forEach(option => {
  Fix: Verify parentheses matching

Line 14403: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.course-option, .payment-option').forEach(option => {
  Fix: Verify brace matching

Line 14406: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14406: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14407: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('[data-caddie], [data-service]').forEach(option => {
  Fix: Verify parentheses matching

Line 14407: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('[data-caddie], [data-service]').forEach(option => {
  Fix: Verify brace matching

Line 14410: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14410: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14414: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14417: Unmatched braces: 1 open, 0 close
  Content: function confirmBookingOld() {
  Fix: Verify brace matching

Line 14424: Unmatched braces: 1 open, 0 close
  Content: if (!booking.course || !booking.date || !booking.time) {
  Fix: Verify brace matching

Line 14427: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14429: Unmatched braces: 1 open, 0 close
  Content: if (!booking.paymentMethod) {
  Fix: Verify brace matching

Line 14432: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14436: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 14436: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 14444: Unmatched parentheses: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify parentheses matching

Line 14444: Unmatched braces: 0 open, 1 close
  Content: }, 3000);
  Fix: Verify brace matching

Line 14445: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14447: Unmatched braces: 1 open, 0 close
  Content: function cancelBooking() {
  Fix: Verify brace matching

Line 14450: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14458: Unmatched braces: 1 open, 0 close
  Content: const GPSNavigationSystem = {
  Fix: Verify brace matching

Line 14460: Unmatched braces: 1 open, 0 close
  Content: courseData: {
  Fix: Verify brace matching

Line 14466: Unmatched brackets: 1 open, 0 close
  Content: holes: [
  Fix: Verify bracket matching

Line 14485: Unmatched brackets: 0 open, 1 close
  Content: ]
  Fix: Verify bracket matching

Line 14486: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14489: Unmatched braces: 1 open, 0 close
  Content: paceOfPlay: {
  Fix: Verify brace matching

Line 14493: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14494: Unmatched braces: 1 open, 0 close
  Content: weatherConditions: {
  Fix: Verify brace matching

Line 14500: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14501: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14503: Unmatched braces: 1 open, 0 close
  Content: function getCurrentLocation() {
  Fix: Verify brace matching

Line 14506: Unmatched braces: 1 open, 0 close
  Content: if (!navigator.geolocation) {
  Fix: Verify brace matching

Line 14510: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14512: Unmatched parentheses: 1 open, 0 close
  Content: navigator.geolocation.getCurrentPosition(
  Fix: Verify parentheses matching

Line 14513: Unmatched braces: 1 open, 0 close
  Content: (position) => {
  Fix: Verify brace matching

Line 14514: Unmatched braces: 1 open, 0 close
  Content: GPSNavigationSystem.currentPosition = {
  Fix: Verify brace matching

Line 14519: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14526: Unmatched braces: 1 open, 0 close
  Content: if (googleMap) {
  Fix: Verify brace matching

Line 14529: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14533: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14534: Unmatched braces: 1 open, 0 close
  Content: (error) => {
  Fix: Verify brace matching

Line 14537: Unmatched braces: 1 open, 0 close
  Content: switch(error.code) {
  Fix: Verify brace matching

Line 14547: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14550: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14551: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 14555: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14556: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 14557: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14559: Unmatched braces: 1 open, 0 close
  Content: function startGPSTracking() {
  Fix: Verify brace matching

Line 14560: Unmatched braces: 1 open, 0 close
  Content: if (!navigator.geolocation) {
  Fix: Verify brace matching

Line 14563: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14569: Unmatched braces: 1 open, 0 close
  Content: const trackingOptions = {
  Fix: Verify brace matching

Line 14573: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14575: Unmatched parentheses: 1 open, 0 close
  Content: const trackingId = navigator.geolocation.watchPosition(
  Fix: Verify parentheses matching

Line 14576: Unmatched braces: 1 open, 0 close
  Content: (position) => {
  Fix: Verify brace matching

Line 14577: Unmatched braces: 1 open, 0 close
  Content: GPSNavigationSystem.currentPosition = {
  Fix: Verify brace matching

Line 14584: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14590: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 14593: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 14597: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14599: Unmatched braces: 1 open, 0 close
  Content: function stopGPSTracking() {
  Fix: Verify brace matching

Line 14600: Unmatched braces: 1 open, 0 close
  Content: if (GPSNavigationSystem.trackingId) {
  Fix: Verify brace matching

Line 14604: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14605: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14607: Unmatched braces: 1 open, 0 close
  Content: function detectCurrentHole() {
  Fix: Verify brace matching

Line 14614: Unmatched parentheses: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify parentheses matching

Line 14614: Unmatched braces: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify brace matching

Line 14615: Unmatched parentheses: 1 open, 0 close
  Content: const distance = calculateDistance(
  Fix: Verify parentheses matching

Line 14618: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 14620: Unmatched braces: 1 open, 0 close
  Content: if (distance < minDistance) {
  Fix: Verify brace matching

Line 14623: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14624: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14624: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14626: Unmatched braces: 1 open, 0 close
  Content: if (GPSNavigationSystem.currentHole !== closestHole) {
  Fix: Verify brace matching

Line 14630: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14631: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14633: Unmatched braces: 1 open, 0 close
  Content: function calculateDistances() {
  Fix: Verify brace matching

Line 14642: Unmatched parentheses: 1 open, 0 close
  Content: updateDistanceDisplay({
  Fix: Verify parentheses matching

Line 14642: Unmatched braces: 1 open, 0 close
  Content: updateDistanceDisplay({
  Fix: Verify brace matching

Line 14647: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14647: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14648: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14650: Unmatched braces: 1 open, 0 close
  Content: function calculateDistance(lat1, lng1, lat2, lng2) {
  Fix: Verify brace matching

Line 14660: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14662: Unmatched braces: 1 open, 0 close
  Content: function updatePaceOfPlay() {
  Fix: Verify brace matching

Line 14679: Unmatched braces: 1 open, 0 close
  Content: if (actualElapsedMinutes > expectedElapsedMinutes + 15) {
  Fix: Verify brace matching

Line 14685: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14689: Unmatched parentheses: 1 open, 0 close
  Content: paceElements.forEach(el => {
  Fix: Verify parentheses matching

Line 14689: Unmatched braces: 1 open, 0 close
  Content: paceElements.forEach(el => {
  Fix: Verify brace matching

Line 14690: Unmatched braces: 1 open, 0 close
  Content: if (el) {
  Fix: Verify brace matching

Line 14693: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14694: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14694: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14698: Unmatched parentheses: 1 open, 0 close
  Content: progressBars.forEach(bar => {
  Fix: Verify parentheses matching

Line 14698: Unmatched braces: 1 open, 0 close
  Content: progressBars.forEach(bar => {
  Fix: Verify brace matching

Line 14699: Unmatched braces: 1 open, 0 close
  Content: if (bar) {
  Fix: Verify brace matching

Line 14702: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14703: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14703: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14707: Unmatched parentheses: 1 open, 0 close
  Content: elapsedElements.forEach(el => {
  Fix: Verify parentheses matching

Line 14707: Unmatched braces: 1 open, 0 close
  Content: elapsedElements.forEach(el => {
  Fix: Verify brace matching

Line 14708: Unmatched braces: 1 open, 0 close
  Content: if (el) {
  Fix: Verify brace matching

Line 14712: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14713: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14713: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14714: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14716: Unmatched braces: 1 open, 0 close
  Content: function updateLocationDisplay() {
  Fix: Verify brace matching

Line 14720: Unmatched braces: 1 open, 0 close
  Content: const elements = {
  Fix: Verify brace matching

Line 14725: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14727: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify parentheses matching

Line 14727: Unmatched braces: 1 open, 0 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify brace matching

Line 14730: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14730: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14731: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14733: Unmatched braces: 1 open, 0 close
  Content: function updateHoleDisplay() {
  Fix: Verify brace matching

Line 14737: Unmatched braces: 1 open, 0 close
  Content: const elements = {
  Fix: Verify brace matching

Line 14742: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14744: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify parentheses matching

Line 14744: Unmatched braces: 1 open, 0 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify brace matching

Line 14747: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14747: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14750: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14752: Unmatched braces: 1 open, 0 close
  Content: function updateDistanceDisplay(distances) {
  Fix: Verify brace matching

Line 14753: Unmatched braces: 1 open, 0 close
  Content: const elements = {
  Fix: Verify brace matching

Line 14759: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 14761: Unmatched parentheses: 3 open, 2 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify parentheses matching

Line 14761: Unmatched braces: 1 open, 0 close
  Content: Object.entries(elements).forEach(([id, value]) => {
  Fix: Verify brace matching

Line 14764: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14764: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14765: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14767: Unmatched braces: 1 open, 0 close
  Content: function renderHoleLayout() {
  Fix: Verify brace matching

Line 14791: Unmatched braces: 1 open, 0 close
  Content: ${GPSNavigationSystem.currentPosition ? `
  Fix: Verify brace matching

Line 14794: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 14802: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14804: Unmatched braces: 1 open, 0 close
  Content: function showWeatherInfo() {
  Fix: Verify brace matching

Line 14806: Unmatched parentheses: 1 open, 0 close
  Content: NotificationManager.show(
  Fix: Verify parentheses matching

Line 14809: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 14810: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14812: Unmatched braces: 1 open, 0 close
  Content: function measureDistance() {
  Fix: Verify brace matching

Line 14814: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14816: Unmatched braces: 1 open, 0 close
  Content: function findNearestCart() {
  Fix: Verify brace matching

Line 14819: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 14819: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 14822: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 14822: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 14823: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14825: Unmatched braces: 1 open, 0 close
  Content: function callMarshal() {
  Fix: Verify brace matching

Line 14828: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 14828: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 14831: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 14831: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 14832: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14835: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 14835: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 14838: Unmatched braces: 1 open, 0 close
  Content: if (dateInput) {
  Fix: Verify brace matching

Line 14842: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14845: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.course-option').forEach(option => {
  Fix: Verify parentheses matching

Line 14845: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.course-option').forEach(option => {
  Fix: Verify brace matching

Line 14846: Unmatched parentheses: 2 open, 1 close
  Content: option.addEventListener('click', function() {
  Fix: Verify parentheses matching

Line 14846: Unmatched braces: 1 open, 0 close
  Content: option.addEventListener('click', function() {
  Fix: Verify brace matching

Line 14848: Unmatched parentheses: 2 open, 1 close
  Content: document.querySelectorAll('.course-option').forEach(opt => {
  Fix: Verify parentheses matching

Line 14848: Unmatched braces: 1 open, 0 close
  Content: document.querySelectorAll('.course-option').forEach(opt => {
  Fix: Verify brace matching

Line 14851: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14851: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14858: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14858: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14859: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14859: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14862: Unmatched parentheses: 1 open, 0 close
  Content: ['bookingDate', 'bookingTime', 'playerCount'].forEach(id => {
  Fix: Verify parentheses matching

Line 14862: Unmatched braces: 1 open, 0 close
  Content: ['bookingDate', 'bookingTime', 'playerCount'].forEach(id => {
  Fix: Verify brace matching

Line 14864: Unmatched braces: 1 open, 0 close
  Content: if (element) {
  Fix: Verify brace matching

Line 14865: Unmatched parentheses: 2 open, 1 close
  Content: element.addEventListener('change', function() {
  Fix: Verify parentheses matching

Line 14865: Unmatched braces: 1 open, 0 close
  Content: element.addEventListener('change', function() {
  Fix: Verify brace matching

Line 14874: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14874: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14875: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14876: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14876: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14877: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14877: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14879: Unmatched braces: 1 open, 0 close
  Content: function updateBookingSummary() {
  Fix: Verify brace matching

Line 14890: Unmatched braces: 1 open, 0 close
  Content: if (!selectedCourse || !date || !time || !players) {
  Fix: Verify brace matching

Line 14894: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14900: Unmatched parentheses: 2 open, 1 close
  Content: const formattedDate = new Date(date).toLocaleDateString('en-US', {
  Fix: Verify parentheses matching

Line 14900: Unmatched braces: 1 open, 0 close
  Content: const formattedDate = new Date(date).toLocaleDateString('en-US', {
  Fix: Verify brace matching

Line 14904: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14904: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14932: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14938: Unmatched braces: 1 open, 0 close
  Content: function addToCart(name, price, sku) {
  Fix: Verify brace matching

Line 14941: Unmatched braces: 1 open, 0 close
  Content: if (existingItem) {
  Fix: Verify brace matching

Line 14944: Unmatched parentheses: 1 open, 0 close
  Content: proshopCart.push({
  Fix: Verify parentheses matching

Line 14944: Unmatched braces: 1 open, 0 close
  Content: proshopCart.push({
  Fix: Verify brace matching

Line 14949: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 14949: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 14950: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14954: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14956: Unmatched braces: 1 open, 0 close
  Content: function removeFromCart(sku) {
  Fix: Verify brace matching

Line 14960: Unmatched braces: 1 open, 0 close
  Content: if (proshopCart.length === 0) {
  Fix: Verify brace matching

Line 14962: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14963: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14965: Unmatched braces: 1 open, 0 close
  Content: function updateCartQuantity(sku, quantity) {
  Fix: Verify brace matching

Line 14967: Unmatched braces: 1 open, 0 close
  Content: if (item) {
  Fix: Verify brace matching

Line 14968: Unmatched braces: 1 open, 0 close
  Content: if (quantity <= 0) {
  Fix: Verify brace matching

Line 14973: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14974: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14975: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14977: Unmatched braces: 1 open, 0 close
  Content: function updateCartDisplay() {
  Fix: Verify brace matching

Line 14983: Unmatched braces: 1 open, 0 close
  Content: if (proshopCart.length === 0) {
  Fix: Verify brace matching

Line 14995: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 14997: Unmatched parentheses: 1 open, 0 close
  Content: const cartHtml = proshopCart.map(item => `
  Fix: Verify parentheses matching

Line 15015: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 15026: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15028: Unmatched braces: 1 open, 0 close
  Content: function clearCart() {
  Fix: Verify brace matching

Line 15032: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15034: Unmatched braces: 1 open, 0 close
  Content: function enablePaymentButtons() {
  Fix: Verify brace matching

Line 15037: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15039: Unmatched braces: 1 open, 0 close
  Content: function disablePaymentButtons() {
  Fix: Verify brace matching

Line 15042: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15044: Unmatched braces: 1 open, 0 close
  Content: function processPayment(method) {
  Fix: Verify brace matching

Line 15065: Unmatched parentheses: 1 open, 0 close
  Content: ${proshopCart.map(item => `
  Fix: Verify parentheses matching

Line 15065: Unmatched braces: 1 open, 0 close
  Content: ${proshopCart.map(item => `
  Fix: Verify brace matching

Line 15070: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 15070: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 15105: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15107: Unmatched braces: 1 open, 0 close
  Content: function printReceipt(transactionId) {
  Fix: Verify brace matching

Line 15110: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15112: Unmatched braces: 1 open, 0 close
  Content: function closePaymentModal() {
  Fix: Verify brace matching

Line 15114: Unmatched braces: 1 open, 0 close
  Content: if (modal) {
  Fix: Verify brace matching

Line 15116: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15117: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15120: Unmatched braces: 1 open, 0 close
  Content: function filterByCategory(category) {
  Fix: Verify brace matching

Line 15129: Unmatched parentheses: 1 open, 0 close
  Content: products.forEach(product => {
  Fix: Verify parentheses matching

Line 15129: Unmatched braces: 1 open, 0 close
  Content: products.forEach(product => {
  Fix: Verify brace matching

Line 15130: Unmatched braces: 1 open, 0 close
  Content: if (category === 'all' || product.dataset.category === category) {
  Fix: Verify brace matching

Line 15134: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15135: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15135: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15136: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15139: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 15139: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 15141: Unmatched parentheses: 1 open, 0 close
  Content: categoryTabs.forEach(tab => {
  Fix: Verify parentheses matching

Line 15141: Unmatched braces: 1 open, 0 close
  Content: categoryTabs.forEach(tab => {
  Fix: Verify brace matching

Line 15143: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15143: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15147: Unmatched braces: 1 open, 0 close
  Content: if (searchInput) {
  Fix: Verify brace matching

Line 15148: Unmatched parentheses: 2 open, 1 close
  Content: searchInput.addEventListener('input', function(e) {
  Fix: Verify parentheses matching

Line 15148: Unmatched braces: 1 open, 0 close
  Content: searchInput.addEventListener('input', function(e) {
  Fix: Verify brace matching

Line 15152: Unmatched parentheses: 1 open, 0 close
  Content: products.forEach(product => {
  Fix: Verify parentheses matching

Line 15152: Unmatched braces: 1 open, 0 close
  Content: products.forEach(product => {
  Fix: Verify brace matching

Line 15154: Unmatched braces: 1 open, 0 close
  Content: if (productName.includes(searchTerm)) {
  Fix: Verify brace matching

Line 15158: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15159: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15159: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15160: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15160: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15161: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15162: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15162: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15167: Unmatched braces: 1 open, 0 close
  Content: const MaintenanceSystem = {
  Fix: Verify brace matching

Line 15172: Unmatched braces: 1 open, 0 close
  Content: updateHoleNumbers() {
  Fix: Verify brace matching

Line 15180: Unmatched braces: 1 open, 0 close
  Content: if (courseSection === 'A') {
  Fix: Verify brace matching

Line 15181: Unmatched braces: 1 open, 0 close
  Content: for (let i = 1; i <= 9; i++) {
  Fix: Verify brace matching

Line 15183: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15185: Unmatched braces: 1 open, 0 close
  Content: for (let i = 10; i <= 18; i++) {
  Fix: Verify brace matching

Line 15187: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15194: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15195: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15198: Unmatched braces: 1 open, 0 close
  Content: handlePhotoUpload(files) {
  Fix: Verify brace matching

Line 15202: Unmatched parentheses: 3 open, 2 close
  Content: Array.from(files).forEach((file, index) => {
  Fix: Verify parentheses matching

Line 15202: Unmatched braces: 1 open, 0 close
  Content: Array.from(files).forEach((file, index) => {
  Fix: Verify brace matching

Line 15203: Unmatched braces: 1 open, 0 close
  Content: if (file.type.startsWith('image/')) {
  Fix: Verify brace matching

Line 15205: Unmatched braces: 1 open, 0 close
  Content: reader.onload = (e) => {
  Fix: Verify brace matching

Line 15207: Unmatched parentheses: 1 open, 0 close
  Content: this.uploadedPhotos.push({
  Fix: Verify parentheses matching

Line 15207: Unmatched braces: 1 open, 0 close
  Content: this.uploadedPhotos.push({
  Fix: Verify brace matching

Line 15212: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15212: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15227: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15229: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15230: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15230: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15231: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15234: Unmatched braces: 1 open, 0 close
  Content: removePhoto(photoId) {
  Fix: Verify brace matching

Line 15238: Unmatched braces: 1 open, 0 close
  Content: if (previewContainer) {
  Fix: Verify brace matching

Line 15241: Unmatched parentheses: 1 open, 0 close
  Content: this.uploadedPhotos.forEach(photo => {
  Fix: Verify parentheses matching

Line 15241: Unmatched braces: 1 open, 0 close
  Content: this.uploadedPhotos.forEach(photo => {
  Fix: Verify brace matching

Line 15255: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15255: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15256: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15257: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15260: Unmatched braces: 1 open, 0 close
  Content: submitCourseUpdate() {
  Fix: Verify brace matching

Line 15267: Unmatched braces: 1 open, 0 close
  Content: if (!courseSection || !areaType || !issueDescription) {
  Fix: Verify brace matching

Line 15270: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15272: Unmatched braces: 1 open, 0 close
  Content: const update = {
  Fix: Verify brace matching

Line 15283: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15294: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15297: Unmatched braces: 1 open, 0 close
  Content: notifyStaffOfUpdate(update) {
  Fix: Verify brace matching

Line 15298: Unmatched braces: 1 open, 0 close
  Content: if (typeof ChatSystem !== 'undefined' && ChatSystem.chatRooms) {
  Fix: Verify brace matching

Line 15299: Unmatched braces: 1 open, 0 close
  Content: const message = {
  Fix: Verify brace matching

Line 15307: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15310: Unmatched braces: 1 open, 0 close
  Content: if (ChatSystem.chatRooms['staff_coordination']) {
  Fix: Verify brace matching

Line 15313: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15316: Unmatched braces: 1 open, 0 close
  Content: if (ChatSystem.updateBadge) {
  Fix: Verify brace matching

Line 15318: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15319: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15320: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15323: Unmatched braces: 1 open, 0 close
  Content: clearForm() {
  Fix: Verify brace matching

Line 15331: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15334: Unmatched braces: 1 open, 0 close
  Content: renderRecentUpdates() {
  Fix: Verify brace matching

Line 15338: Unmatched braces: 1 open, 0 close
  Content: if (this.courseUpdates.length === 0) {
  Fix: Verify brace matching

Line 15346: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15348: Unmatched parentheses: 1 open, 0 close
  Content: container.innerHTML = this.courseUpdates.map(update => `
  Fix: Verify parentheses matching

Line 15370: Unmatched braces: 1 open, 0 close
  Content: ${update.photos.length > 0 ? `
  Fix: Verify brace matching

Line 15372: Unmatched parentheses: 1 open, 0 close
  Content: ${update.photos.map(photo => `
  Fix: Verify parentheses matching

Line 15372: Unmatched braces: 1 open, 0 close
  Content: ${update.photos.map(photo => `
  Fix: Verify brace matching

Line 15376: Unmatched parentheses: 1 open, 2 close
  Content: `).join('')}
  Fix: Verify parentheses matching

Line 15376: Unmatched braces: 0 open, 1 close
  Content: `).join('')}
  Fix: Verify brace matching

Line 15378: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 15385: Unmatched parentheses: 1 open, 2 close
  Content: `).join('');
  Fix: Verify parentheses matching

Line 15386: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15389: Unmatched braces: 1 open, 0 close
  Content: showPhotoModal(photoData, photoName) {
  Fix: Verify brace matching

Line 15407: Unmatched parentheses: 2 open, 1 close
  Content: modal.addEventListener('click', (e) => {
  Fix: Verify parentheses matching

Line 15407: Unmatched braces: 1 open, 0 close
  Content: modal.addEventListener('click', (e) => {
  Fix: Verify brace matching

Line 15408: Unmatched braces: 1 open, 0 close
  Content: if (e.target === modal) {
  Fix: Verify brace matching

Line 15410: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15411: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15411: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15412: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15415: Unmatched braces: 1 open, 0 close
  Content: getPriorityColor(priority) {
  Fix: Verify brace matching

Line 15416: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 15421: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15423: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15425: Unmatched braces: 1 open, 0 close
  Content: getPriorityBadgeColor(priority) {
  Fix: Verify brace matching

Line 15426: Unmatched braces: 1 open, 0 close
  Content: const colors = {
  Fix: Verify brace matching

Line 15431: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15433: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15435: Unmatched braces: 1 open, 0 close
  Content: getAreaIcon(areaType) {
  Fix: Verify brace matching

Line 15436: Unmatched braces: 1 open, 0 close
  Content: const icons = {
  Fix: Verify brace matching

Line 15444: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15446: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15448: Unmatched braces: 1 open, 0 close
  Content: formatTimestamp(timestamp) {
  Fix: Verify brace matching

Line 15455: Unmatched braces: 1 open, 0 close
  Content: if (diffDays > 0) {
  Fix: Verify brace matching

Line 15462: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15463: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15466: Unmatched braces: 1 open, 0 close
  Content: loadSampleData() {
  Fix: Verify brace matching

Line 15467: Unmatched brackets: 1 open, 0 close
  Content: this.courseUpdates = [
  Fix: Verify bracket matching

Line 15468: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 15479: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15480: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 15491: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15492: Unmatched brackets: 0 open, 1 close
  Content: ];
  Fix: Verify bracket matching

Line 15493: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15494: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15497: Unmatched braces: 1 open, 0 close
  Content: function handlePhotoUpload(event) {
  Fix: Verify brace matching

Line 15499: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15501: Unmatched braces: 1 open, 0 close
  Content: function submitCourseUpdate() {
  Fix: Verify brace matching

Line 15503: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15506: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 15506: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 15508: Unmatched braces: 1 open, 0 close
  Content: if (courseSelect) {
  Fix: Verify brace matching

Line 15510: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15513: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 15513: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 15516: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 15516: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 15517: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15517: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15522: Unmatched braces: 1 open, 0 close
  Content: function demonstrateNingBooking() {
  Fix: Verify brace matching

Line 15524: Unmatched braces: 1 open, 0 close
  Content: if (!ningCaddy) {
  Fix: Verify brace matching

Line 15527: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15529: Unmatched braces: 1 open, 0 close
  Content: if (ningCaddy.availability === 'booked') {
  Fix: Verify brace matching

Line 15532: Unmatched parentheses: 1 open, 0 close
  Content: const confirmJoin = confirm(`Ning Prasert is currently booked until 13:00 today.
  Fix: Verify parentheses matching

Line 15537: Unmatched parentheses: 0 open, 1 close
  Content: Would you like to join the waitlist?`);
  Fix: Verify parentheses matching

Line 15539: Unmatched braces: 1 open, 0 close
  Content: if (confirmJoin) {
  Fix: Verify brace matching

Line 15542: Unmatched parentheses: 1 open, 0 close
  Content: alert(`Successfully added to Ning's waitlist at position #${waitlistPosition}!
  Fix: Verify parentheses matching

Line 15544: Unmatched parentheses: 0 open, 1 close
  Content: You will be notified when she becomes available.`);
  Fix: Verify parentheses matching

Line 15545: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15548: Unmatched parentheses: 1 open, 0 close
  Content: alert(`Ning Prasert is available for immediate booking!
  Fix: Verify parentheses matching

Line 15552: Unmatched parentheses: 0 open, 1 close
  Content: Specialty: ${ningCaddy.specialty}`);
  Fix: Verify parentheses matching

Line 15553: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15554: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15556: Unmatched braces: 1 open, 0 close
  Content: function showNingAvailability() {
  Fix: Verify brace matching

Line 15567: Unmatched braces: 1 open, 0 close
  Content: if (ningCaddy.currentBooking) {
  Fix: Verify brace matching

Line 15574: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15576: Unmatched braces: 1 open, 0 close
  Content: if (waitlist.length > 0) {
  Fix: Verify brace matching

Line 15580: Unmatched parentheses: 2 open, 1 close
  Content: waitlist.forEach((person, index) => {
  Fix: Verify parentheses matching

Line 15580: Unmatched braces: 1 open, 0 close
  Content: waitlist.forEach((person, index) => {
  Fix: Verify brace matching

Line 15582: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15582: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15583: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15586: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15589: Unmatched braces: 1 open, 0 close
  Content: const EnhancedBookingManager = {
  Fix: Verify brace matching

Line 15590: Unmatched braces: 1 open, 0 close
  Content: waitlists: {
  Fix: Verify brace matching

Line 15591: Unmatched brackets: 1 open, 0 close
  Content: 'pat001': [ // Ning Prasert - has waitlist due to being booked
  Fix: Verify bracket matching

Line 15595: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 15597: Unmatched brackets: 1 open, 0 close
  Content: 'c003': [   // Apinya Thaworn (busy)
  Fix: Verify bracket matching

Line 15601: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 15603: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15605: Unmatched brackets: 1 open, 0 close
  Content: bookings: [
  Fix: Verify bracket matching

Line 15606: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 15616: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15617: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 15627: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15628: Unmatched brackets: 0 open, 1 close
  Content: ],
  Fix: Verify bracket matching

Line 15631: Unmatched braces: 1 open, 0 close
  Content: joinWaitlist(caddieId, event) {
  Fix: Verify brace matching

Line 15634: Unmatched braces: 1 open, 0 close
  Content: const caddieNames = {
  Fix: Verify brace matching

Line 15639: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15643: Unmatched braces: 1 open, 0 close
  Content: if (existingWaitlist) {
  Fix: Verify brace matching

Line 15646: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15649: Unmatched braces: 1 open, 0 close
  Content: const waitlistEntry = {
  Fix: Verify brace matching

Line 15654: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15660: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15663: Unmatched braces: 1 open, 0 close
  Content: updateWaitlistDisplay() {
  Fix: Verify brace matching

Line 15664: Unmatched parentheses: 2 open, 1 close
  Content: Object.keys(this.waitlists).forEach(caddieId => {
  Fix: Verify parentheses matching

Line 15664: Unmatched braces: 1 open, 0 close
  Content: Object.keys(this.waitlists).forEach(caddieId => {
  Fix: Verify brace matching

Line 15667: Unmatched braces: 1 open, 0 close
  Content: if (card && waitlist.length > 0) {
  Fix: Verify brace matching

Line 15670: Unmatched braces: 1 open, 0 close
  Content: if (!waitlistInfo) {
  Fix: Verify brace matching

Line 15674: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15676: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15677: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15677: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15678: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15681: Unmatched braces: 1 open, 0 close
  Content: editBooking(bookingId) {
  Fix: Verify brace matching

Line 15705: Unmatched braces: 1 open, 0 close
  Content: ${booking.type === 'tee_time' ? `
  Fix: Verify brace matching

Line 15715: Unmatched braces: 0 open, 1 close
  Content: ` : ''}
  Fix: Verify brace matching

Line 15724: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15727: Unmatched braces: 1 open, 0 close
  Content: saveBookingChanges(bookingId, modal) {
  Fix: Verify brace matching

Line 15733: Unmatched braces: 1 open, 0 close
  Content: if (booking.type === 'tee_time') {
  Fix: Verify brace matching

Line 15735: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15741: Unmatched braces: 1 open, 0 close
  Content: if (typeof SimpleCloudSync !== 'undefined') {
  Fix: Verify brace matching

Line 15744: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15749: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15752: Unmatched braces: 1 open, 0 close
  Content: cancelBooking(bookingId) {
  Fix: Verify brace matching

Line 15757: Unmatched braces: 1 open, 0 close
  Content: if (confirm(confirmMsg)) {
  Fix: Verify brace matching

Line 15769: Unmatched braces: 1 open, 0 close
  Content: if (booking.type === 'caddie' && booking.caddieId) {
  Fix: Verify brace matching

Line 15771: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15775: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15776: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15779: Unmatched braces: 1 open, 0 close
  Content: notifyNextOnWaitlist(caddieId) {
  Fix: Verify brace matching

Line 15781: Unmatched braces: 1 open, 0 close
  Content: if (waitlist.length > 0) {
  Fix: Verify brace matching

Line 15784: Unmatched parentheses: 2 open, 1 close
  Content: waitlist.forEach((person, index) => {
  Fix: Verify parentheses matching

Line 15784: Unmatched braces: 1 open, 0 close
  Content: waitlist.forEach((person, index) => {
  Fix: Verify brace matching

Line 15786: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15786: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15790: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15791: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15794: Unmatched braces: 1 open, 0 close
  Content: refreshBookingDisplay() {
  Fix: Verify brace matching

Line 15797: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15800: Unmatched braces: 1 open, 0 close
  Content: getGolferWaitlists() {
  Fix: Verify brace matching

Line 15802: Unmatched parentheses: 2 open, 1 close
  Content: Object.keys(this.waitlists).forEach(caddieId => {
  Fix: Verify parentheses matching

Line 15802: Unmatched braces: 1 open, 0 close
  Content: Object.keys(this.waitlists).forEach(caddieId => {
  Fix: Verify brace matching

Line 15804: Unmatched braces: 1 open, 0 close
  Content: if (waitlistEntry) {
  Fix: Verify brace matching

Line 15805: Unmatched braces: 1 open, 0 close
  Content: const caddieNames = {
  Fix: Verify brace matching

Line 15810: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15811: Unmatched parentheses: 1 open, 0 close
  Content: golferWaitlists.push({
  Fix: Verify parentheses matching

Line 15811: Unmatched braces: 1 open, 0 close
  Content: golferWaitlists.push({
  Fix: Verify brace matching

Line 15816: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15816: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15817: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15818: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15818: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15820: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 15823: Unmatched braces: 1 open, 0 close
  Content: getCaddyInfo(caddieId) {
  Fix: Verify brace matching

Line 15827: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15828: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15831: Unmatched braces: 1 open, 0 close
  Content: function joinWaitlist(caddieId, event) {
  Fix: Verify brace matching

Line 15833: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15835: Unmatched braces: 1 open, 0 close
  Content: function editBooking(bookingId) {
  Fix: Verify brace matching

Line 15837: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15839: Unmatched braces: 1 open, 0 close
  Content: function cancelBooking(bookingId) {
  Fix: Verify brace matching

Line 15841: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15844: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 15844: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 15845: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 15845: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 15847: Unmatched parentheses: 0 open, 1 close
  Content: }, 500);
  Fix: Verify parentheses matching

Line 15847: Unmatched braces: 0 open, 1 close
  Content: }, 500);
  Fix: Verify brace matching

Line 15848: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 15848: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 15851: Unmatched braces: 1 open, 0 close
  Content: window.playEmergencySiren = async function () {
  Fix: Verify brace matching

Line 15852: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 15859: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15860: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15862: Unmatched braces: 1 open, 0 close
  Content: window.playFallbackAlert = function () {
  Fix: Verify brace matching

Line 15863: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 15873: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 15873: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 15875: Unmatched parentheses: 0 open, 1 close
  Content: }, 600);
  Fix: Verify parentheses matching

Line 15875: Unmatched braces: 0 open, 1 close
  Content: }, 600);
  Fix: Verify brace matching

Line 15879: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15880: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 15884: Unmatched braces: 1 open, 0 close
  Content: window.login = async function () {
  Fix: Verify brace matching

Line 15890: Unmatched braces: 1 open, 0 close
  Content: if (window.ScreenManager?.navigateTo) {
  Fix: Verify brace matching

Line 15893: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 15896: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 21028: Unmatched braces: 1 open, 0 close
  Content: const GolfScoreSystem = {
  Fix: Verify brace matching

Line 21031: Unmatched braces: 1 open, 0 close
  Content: saveScore(scoreData) {
  Fix: Verify brace matching

Line 21032: Unmatched braces: 1 open, 0 close
  Content: const newScore = {
  Fix: Verify brace matching

Line 21043: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 21052: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21055: Unmatched braces: 1 open, 0 close
  Content: calculateDifferential(scoreData) {
  Fix: Verify brace matching

Line 21063: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21066: Unmatched braces: 1 open, 0 close
  Content: calculateHandicapIndex() {
  Fix: Verify brace matching

Line 21069: Unmatched braces: 1 open, 0 close
  Content: if (validScores.length < 3) {
  Fix: Verify brace matching

Line 21071: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21081: Unmatched braces: 1 open, 0 close
  Content: if (numScores >= 20) {
  Fix: Verify brace matching

Line 21094: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21097: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21099: Unmatched braces: 1 open, 0 close
  Content: updateStatistics() {
  Fix: Verify brace matching

Line 21105: Unmatched parentheses: 1 open, 0 close
  Content: handicapElements.forEach(el => {
  Fix: Verify parentheses matching

Line 21105: Unmatched braces: 1 open, 0 close
  Content: handicapElements.forEach(el => {
  Fix: Verify brace matching

Line 21106: Unmatched braces: 1 open, 0 close
  Content: if (whsHandicap !== null) {
  Fix: Verify brace matching

Line 21112: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21113: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21113: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21119: Unmatched braces: 1 open, 0 close
  Content: if (validScores.length > 0) {
  Fix: Verify brace matching

Line 21122: Unmatched braces: 1 open, 0 close
  Content: if (avgScoreElements[1]) {
  Fix: Verify brace matching

Line 21124: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21128: Unmatched braces: 1 open, 0 close
  Content: if (avgScoreElements[2]) {
  Fix: Verify brace matching

Line 21130: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21135: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21138: Unmatched braces: 1 open, 0 close
  Content: if (avgScoreElements[3]) {
  Fix: Verify brace matching

Line 21140: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21141: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21143: Unmatched braces: 1 open, 0 close
  Content: refreshRecentRounds() {
  Fix: Verify brace matching

Line 21151: Unmatched parentheses: 3 open, 2 close
  Content: this.scores.slice(0, 5).forEach((score, index) => {
  Fix: Verify parentheses matching

Line 21151: Unmatched braces: 1 open, 0 close
  Content: this.scores.slice(0, 5).forEach((score, index) => {
  Fix: Verify brace matching

Line 21153: Unmatched braces: 1 open, 0 close
  Content: if (index === 0) {
  Fix: Verify brace matching

Line 21157: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21158: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21158: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21159: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21161: Unmatched braces: 1 open, 0 close
  Content: createRoundElement(score) {
  Fix: Verify brace matching

Line 21172: Unmatched parentheses: 2 open, 1 close
  Content: const formattedDate = new Date(score.date).toLocaleDateString('en-US', {
  Fix: Verify parentheses matching

Line 21172: Unmatched braces: 1 open, 0 close
  Content: const formattedDate = new Date(score.date).toLocaleDateString('en-US', {
  Fix: Verify brace matching

Line 21175: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21175: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21200: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21201: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 21204: Unmatched braces: 1 open, 0 close
  Content: function showAddScoreModal() {
  Fix: Verify brace matching

Line 21208: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21210: Unmatched braces: 1 open, 0 close
  Content: function closeAddScoreModal() {
  Fix: Verify brace matching

Line 21220: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21222: Unmatched braces: 1 open, 0 close
  Content: function saveGolfScore() {
  Fix: Verify brace matching

Line 21231: Unmatched braces: 1 open, 0 close
  Content: if (!courseName || !scoreValue || !datePlayed) {
  Fix: Verify brace matching

Line 21234: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21237: Unmatched braces: 1 open, 0 close
  Content: if (score < 30 || score > 150) {
  Fix: Verify brace matching

Line 21240: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21243: Unmatched braces: 1 open, 0 close
  Content: if (courseRating && (courseRating < 60 || courseRating > 80)) {
  Fix: Verify brace matching

Line 21246: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21248: Unmatched braces: 1 open, 0 close
  Content: if (slopeRating && (slopeRating < 55 || slopeRating > 155)) {
  Fix: Verify brace matching

Line 21251: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21253: Unmatched parentheses: 1 open, 0 close
  Content: GolfScoreSystem.saveScore({
  Fix: Verify parentheses matching

Line 21253: Unmatched braces: 1 open, 0 close
  Content: GolfScoreSystem.saveScore({
  Fix: Verify brace matching

Line 21261: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21261: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21276: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21279: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 21279: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 21280: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 21280: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 21283: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 21283: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 21284: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21284: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21287: Unmatched braces: 1 open, 0 close
  Content: function addNewRound() {
  Fix: Verify brace matching

Line 21290: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21292: Unmatched braces: 1 open, 0 close
  Content: function viewRoundDetails(roundId) {
  Fix: Verify brace matching

Line 21439: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21442: Unmatched braces: 1 open, 0 close
  Content: function initOpenStreetMap() {
  Fix: Verify brace matching

Line 21444: Unmatched braces: 1 open, 0 close
  Content: if (!window.GPSNavigationSystem || !GPSNavigationSystem.courseData) {
  Fix: Verify brace matching

Line 21447: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21453: Unmatched parentheses: 1 open, 0 close
  Content: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{
  Fix: Verify parentheses matching

Line 21453: Unmatched braces: 4 open, 3 close
  Content: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{
  Fix: Verify brace matching

Line 21456: Unmatched parentheses: 1 open, 2 close
  Content: }).addTo(googleMap);
  Fix: Verify parentheses matching

Line 21456: Unmatched braces: 0 open, 1 close
  Content: }).addTo(googleMap);
  Fix: Verify brace matching

Line 21462: Unmatched parentheses: 2 open, 1 close
  Content: googleMap.on('click', function(event) {
  Fix: Verify parentheses matching

Line 21462: Unmatched braces: 1 open, 0 close
  Content: googleMap.on('click', function(event) {
  Fix: Verify brace matching

Line 21464: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21464: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21467: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 21467: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 21469: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 21469: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 21470: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21473: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 21473: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 21474: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 21474: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 21475: Unmatched braces: 1 open, 0 close
  Content: if (document.getElementById('courseMap')) {
  Fix: Verify brace matching

Line 21477: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21478: Unmatched parentheses: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify parentheses matching

Line 21478: Unmatched braces: 0 open, 1 close
  Content: }, 2000);
  Fix: Verify brace matching

Line 21479: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21479: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21481: Unmatched braces: 1 open, 0 close
  Content: function addHoleMarkers() {
  Fix: Verify brace matching

Line 21487: Unmatched parentheses: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify parentheses matching

Line 21487: Unmatched braces: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify brace matching

Line 21489: Unmatched parentheses: 1 open, 0 close
  Content: const teeIcon = L.divIcon({
  Fix: Verify parentheses matching

Line 21489: Unmatched braces: 1 open, 0 close
  Content: const teeIcon = L.divIcon({
  Fix: Verify brace matching

Line 21494: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21494: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21498: Unmatched parentheses: 1 open, 0 close
  Content: .bindPopup(`
  Fix: Verify parentheses matching

Line 21504: Unmatched parentheses: 0 open, 1 close
  Content: `);
  Fix: Verify parentheses matching

Line 21507: Unmatched parentheses: 1 open, 0 close
  Content: const pinIcon = L.divIcon({
  Fix: Verify parentheses matching

Line 21507: Unmatched braces: 1 open, 0 close
  Content: const pinIcon = L.divIcon({
  Fix: Verify brace matching

Line 21512: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21512: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21519: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21519: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21520: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21522: Unmatched braces: 1 open, 0 close
  Content: function updatePlayerLocation(position) {
  Fix: Verify brace matching

Line 21526: Unmatched braces: 1 open, 0 close
  Content: if (playerMarker) {
  Fix: Verify brace matching

Line 21529: Unmatched parentheses: 1 open, 0 close
  Content: const playerIcon = L.divIcon({
  Fix: Verify parentheses matching

Line 21529: Unmatched braces: 1 open, 0 close
  Content: const playerIcon = L.divIcon({
  Fix: Verify brace matching

Line 21534: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21534: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21541: Unmatched braces: 1 open, 0 close
  Content: if (!document.getElementById('pulse-animation')) {
  Fix: Verify brace matching

Line 21545: Unmatched braces: 1 open, 0 close
  Content: @keyframes pulse {
  Fix: Verify brace matching

Line 21549: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21552: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21553: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21556: Unmatched braces: 1 open, 0 close
  Content: if (position.accuracy) {
  Fix: Verify brace matching

Line 21558: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21562: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21564: Unmatched braces: 1 open, 0 close
  Content: function calculateDistancesToHoles(playerPos) {
  Fix: Verify brace matching

Line 21568: Unmatched parentheses: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify parentheses matching

Line 21568: Unmatched braces: 1 open, 0 close
  Content: GPSNavigationSystem.courseData.holes.forEach(hole => {
  Fix: Verify brace matching

Line 21570: Unmatched parentheses: 1 open, 0 close
  Content: const distanceToPin = googleMap.distance(
  Fix: Verify parentheses matching

Line 21573: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 21575: Unmatched braces: 1 open, 0 close
  Content: if (distanceToPin < minDistance) {
  Fix: Verify brace matching

Line 21578: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21579: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21579: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21581: Unmatched braces: 1 open, 0 close
  Content: if (closestHole) {
  Fix: Verify brace matching

Line 21588: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21589: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21591: Unmatched braces: 1 open, 0 close
  Content: function toggleMapType() {
  Fix: Verify brace matching

Line 21594: Unmatched braces: 1 open, 0 close
  Content: if (currentMapType === 'satellite') {
  Fix: Verify brace matching

Line 21596: Unmatched parentheses: 2 open, 1 close
  Content: googleMap.eachLayer(function(layer) {
  Fix: Verify parentheses matching

Line 21596: Unmatched braces: 1 open, 0 close
  Content: googleMap.eachLayer(function(layer) {
  Fix: Verify brace matching

Line 21597: Unmatched braces: 1 open, 0 close
  Content: if (layer._url && layer._url.includes('arcgisonline')) {
  Fix: Verify brace matching

Line 21599: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21600: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21600: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21601: Unmatched parentheses: 1 open, 0 close
  Content: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  Fix: Verify parentheses matching

Line 21601: Unmatched braces: 5 open, 4 close
  Content: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  Fix: Verify brace matching

Line 21604: Unmatched parentheses: 1 open, 2 close
  Content: }).addTo(googleMap);
  Fix: Verify parentheses matching

Line 21604: Unmatched braces: 0 open, 1 close
  Content: }).addTo(googleMap);
  Fix: Verify brace matching

Line 21609: Unmatched parentheses: 2 open, 1 close
  Content: googleMap.eachLayer(function(layer) {
  Fix: Verify parentheses matching

Line 21609: Unmatched braces: 1 open, 0 close
  Content: googleMap.eachLayer(function(layer) {
  Fix: Verify brace matching

Line 21610: Unmatched braces: 1 open, 0 close
  Content: if (layer._url && layer._url.includes('openstreetmap')) {
  Fix: Verify brace matching

Line 21612: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21613: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21613: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21614: Unmatched parentheses: 1 open, 0 close
  Content: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{
  Fix: Verify parentheses matching

Line 21614: Unmatched braces: 4 open, 3 close
  Content: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{
  Fix: Verify brace matching

Line 21617: Unmatched parentheses: 1 open, 2 close
  Content: }).addTo(googleMap);
  Fix: Verify parentheses matching

Line 21617: Unmatched braces: 0 open, 1 close
  Content: }).addTo(googleMap);
  Fix: Verify brace matching

Line 21620: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21621: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21623: Unmatched braces: 1 open, 0 close
  Content: function centerOnPlayer() {
  Fix: Verify brace matching

Line 21624: Unmatched braces: 1 open, 0 close
  Content: if (!googleMap || !playerMarker) {
  Fix: Verify brace matching

Line 21627: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21630: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21633: Unmatched braces: 1 open, 0 close
  Content: const CaddyTrackingSystem = {
  Fix: Verify brace matching

Line 21640: Unmatched braces: 1 open, 0 close
  Content: startTracking() {
  Fix: Verify brace matching

Line 21664: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21666: Unmatched braces: 1 open, 0 close
  Content: finishTracking() {
  Fix: Verify brace matching

Line 21675: Unmatched braces: 1 open, 0 close
  Content: if (this.trackingInterval) {
  Fix: Verify brace matching

Line 21677: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21692: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21694: Unmatched braces: 1 open, 0 close
  Content: resetTracking() {
  Fix: Verify brace matching

Line 21705: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21707: Unmatched braces: 1 open, 0 close
  Content: startGPSTracking() {
  Fix: Verify brace matching

Line 21710: Unmatched parentheses: 1 open, 0 close
  Content: this.gpsWatchId = navigator.geolocation.watchPosition(
  Fix: Verify parentheses matching

Line 21711: Unmatched braces: 1 open, 0 close
  Content: (position) => {
  Fix: Verify brace matching

Line 21717: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21718: Unmatched braces: 1 open, 0 close
  Content: (error) => {
  Fix: Verify brace matching

Line 21721: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21722: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 21726: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21727: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 21728: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21730: Unmatched braces: 1 open, 0 close
  Content: stopGPSTracking() {
  Fix: Verify brace matching

Line 21731: Unmatched braces: 1 open, 0 close
  Content: if (this.gpsWatchId) {
  Fix: Verify brace matching

Line 21734: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21735: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21737: Unmatched braces: 1 open, 0 close
  Content: startTimeCounter() {
  Fix: Verify brace matching

Line 21738: Unmatched parentheses: 2 open, 1 close
  Content: this.trackingInterval = setInterval(() => {
  Fix: Verify parentheses matching

Line 21738: Unmatched braces: 1 open, 0 close
  Content: this.trackingInterval = setInterval(() => {
  Fix: Verify brace matching

Line 21739: Unmatched braces: 1 open, 0 close
  Content: if (this.startTime) {
  Fix: Verify brace matching

Line 21741: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21742: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 21742: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 21743: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21745: Unmatched braces: 1 open, 0 close
  Content: updateHoleProgression() {
  Fix: Verify brace matching

Line 21751: Unmatched braces: 1 open, 0 close
  Content: if (estimatedHole !== this.currentHole && estimatedHole <= 18) {
  Fix: Verify brace matching

Line 21756: Unmatched braces: 1 open, 0 close
  Content: if (mainHoleElement) {
  Fix: Verify brace matching

Line 21758: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21762: Unmatched braces: 1 open, 0 close
  Content: if (liveHoleElement) {
  Fix: Verify brace matching

Line 21764: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21766: Unmatched braces: 1 open, 0 close
  Content: if (this.currentHole <= 18) {
  Fix: Verify brace matching

Line 21768: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21769: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21770: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21772: Unmatched braces: 1 open, 0 close
  Content: updateLiveTrackingTab() {
  Fix: Verify brace matching

Line 21775: Unmatched braces: 1 open, 0 close
  Content: if (trackingStatus) {
  Fix: Verify brace matching

Line 21777: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21781: Unmatched braces: 1 open, 0 close
  Content: if (liveHoleElement) {
  Fix: Verify brace matching

Line 21783: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21786: Unmatched braces: 1 open, 0 close
  Content: if (this.startTime) {
  Fix: Verify brace matching

Line 21792: Unmatched braces: 1 open, 0 close
  Content: if (timeElements.length >= 3) {
  Fix: Verify brace matching

Line 21794: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21795: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21799: Unmatched braces: 1 open, 0 close
  Content: if (trackingButton) {
  Fix: Verify brace matching

Line 21801: Unmatched braces: 1 open, 0 close
  Content: if (buttonText) {
  Fix: Verify brace matching

Line 21803: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21806: Unmatched braces: 1 open, 0 close
  Content: if (this.isTracking) {
  Fix: Verify brace matching

Line 21812: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21813: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21814: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21816: Unmatched braces: 1 open, 0 close
  Content: syncAllDisplays() {
  Fix: Verify brace matching

Line 21818: Unmatched braces: 1 open, 0 close
  Content: if (this.startTime) {
  Fix: Verify brace matching

Line 21823: Unmatched braces: 1 open, 0 close
  Content: if (mainTimeElement) {
  Fix: Verify brace matching

Line 21825: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21826: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21830: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21832: Unmatched braces: 1 open, 0 close
  Content: formatTime(seconds) {
  Fix: Verify brace matching

Line 21835: Unmatched braces: 1 open, 0 close
  Content: if (hours > 0) {
  Fix: Verify brace matching

Line 21837: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21839: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21841: Unmatched braces: 1 open, 0 close
  Content: saveCompletedRound(totalTime) {
  Fix: Verify brace matching

Line 21842: Unmatched braces: 1 open, 0 close
  Content: const roundData = {
  Fix: Verify brace matching

Line 21851: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 21856: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21859: Unmatched braces: 1 open, 0 close
  Content: initialize() {
  Fix: Verify brace matching

Line 21862: Unmatched braces: 1 open, 0 close
  Content: if (wasTracking === 'true') {
  Fix: Verify brace matching

Line 21864: Unmatched braces: 1 open, 0 close
  Content: if (startTimeStr) {
  Fix: Verify brace matching

Line 21867: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21868: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21869: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21870: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 21873: Unmatched braces: 1 open, 0 close
  Content: function startLiveTracking() {
  Fix: Verify brace matching

Line 21875: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21877: Unmatched braces: 1 open, 0 close
  Content: function finishLiveTracking() {
  Fix: Verify brace matching

Line 21879: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21881: Unmatched braces: 1 open, 0 close
  Content: function resetTracking() {
  Fix: Verify brace matching

Line 21883: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21886: Unmatched braces: 1 open, 0 close
  Content: function updateCaddyLocation() {
  Fix: Verify brace matching

Line 21887: Unmatched braces: 1 open, 0 close
  Content: if (!navigator.geolocation) {
  Fix: Verify brace matching

Line 21890: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21894: Unmatched parentheses: 1 open, 0 close
  Content: navigator.geolocation.getCurrentPosition(
  Fix: Verify parentheses matching

Line 21895: Unmatched braces: 1 open, 0 close
  Content: (position) => {
  Fix: Verify brace matching

Line 21902: Unmatched braces: 1 open, 0 close
  Content: if (locationStatus) {
  Fix: Verify brace matching

Line 21904: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21907: Unmatched braces: 1 open, 0 close
  Content: if (CaddyTrackingSystem.isTracking) {
  Fix: Verify brace matching

Line 21909: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21910: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21911: Unmatched braces: 1 open, 0 close
  Content: (error) => {
  Fix: Verify brace matching

Line 21917: Unmatched braces: 1 open, 0 close
  Content: if (locationStatus) {
  Fix: Verify brace matching

Line 21919: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21920: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21921: Unmatched braces: 1 open, 0 close
  Content: {
  Fix: Verify brace matching

Line 21925: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21926: Unmatched parentheses: 0 open, 1 close
  Content: );
  Fix: Verify parentheses matching

Line 21927: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21930: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 21930: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 21931: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 21931: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 21936: Unmatched braces: 1 open, 0 close
  Content: if (trackingTabButton) {
  Fix: Verify brace matching

Line 21937: Unmatched parentheses: 2 open, 1 close
  Content: trackingTabButton.addEventListener('click', () => {
  Fix: Verify parentheses matching

Line 21937: Unmatched braces: 1 open, 0 close
  Content: trackingTabButton.addEventListener('click', () => {
  Fix: Verify brace matching

Line 21938: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 21938: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 21940: Unmatched parentheses: 0 open, 1 close
  Content: }, 100);
  Fix: Verify parentheses matching

Line 21940: Unmatched braces: 0 open, 1 close
  Content: }, 100);
  Fix: Verify brace matching

Line 21941: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21941: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21942: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21943: Unmatched parentheses: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify parentheses matching

Line 21943: Unmatched braces: 0 open, 1 close
  Content: }, 1500);
  Fix: Verify brace matching

Line 21944: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 21944: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 21947: Unmatched braces: 1 open, 0 close
  Content: const CaddyTrackingSync = {
  Fix: Verify brace matching

Line 21948: Unmatched braces: 1 open, 0 close
  Content: currentState: {
  Fix: Verify brace matching

Line 21954: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21956: Unmatched braces: 1 open, 0 close
  Content: startTracking() {
  Fix: Verify brace matching

Line 21967: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21969: Unmatched braces: 1 open, 0 close
  Content: finishTracking() {
  Fix: Verify brace matching

Line 21978: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21980: Unmatched braces: 1 open, 0 close
  Content: updateHole() {
  Fix: Verify brace matching

Line 21981: Unmatched braces: 1 open, 0 close
  Content: if (this.currentState.isTracking && this.currentState.currentHole < 18) {
  Fix: Verify brace matching

Line 21985: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 21986: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21988: Unmatched braces: 1 open, 0 close
  Content: syncAllDisplays() {
  Fix: Verify brace matching

Line 21993: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 21995: Unmatched braces: 1 open, 0 close
  Content: syncOverviewDisplay() {
  Fix: Verify brace matching

Line 22000: Unmatched braces: 1 open, 0 close
  Content: if (this.currentState.isTracking) {
  Fix: Verify brace matching

Line 22017: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22018: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22020: Unmatched braces: 1 open, 0 close
  Content: syncLiveTrackingDisplay() {
  Fix: Verify brace matching

Line 22023: Unmatched braces: 1 open, 0 close
  Content: if (typeof CaddyTrackingSystem !== 'undefined') {
  Fix: Verify brace matching

Line 22025: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22026: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22028: Unmatched braces: 1 open, 0 close
  Content: startRoundTimer() {
  Fix: Verify brace matching

Line 22031: Unmatched parentheses: 2 open, 1 close
  Content: setInterval(() => {
  Fix: Verify parentheses matching

Line 22031: Unmatched braces: 1 open, 0 close
  Content: setInterval(() => {
  Fix: Verify brace matching

Line 22032: Unmatched braces: 1 open, 0 close
  Content: if (this.currentState.isTracking && this.currentState.startTime) {
  Fix: Verify brace matching

Line 22041: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22042: Unmatched parentheses: 0 open, 1 close
  Content: }, 60000); // Update every minute
  Fix: Verify parentheses matching

Line 22042: Unmatched braces: 0 open, 1 close
  Content: }, 60000); // Update every minute
  Fix: Verify brace matching

Line 22043: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22045: Unmatched braces: 1 open, 0 close
  Content: loadState() {
  Fix: Verify brace matching

Line 22047: Unmatched braces: 1 open, 0 close
  Content: if (saved) {
  Fix: Verify brace matching

Line 22049: Unmatched braces: 1 open, 0 close
  Content: if (this.currentState.startTime) {
  Fix: Verify brace matching

Line 22051: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22053: Unmatched braces: 1 open, 0 close
  Content: if (this.currentState.isTracking) {
  Fix: Verify brace matching

Line 22055: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22056: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22057: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22058: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22061: Unmatched braces: 1 open, 0 close
  Content: function startLiveTracking() {
  Fix: Verify brace matching

Line 22063: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22065: Unmatched braces: 1 open, 0 close
  Content: function finishLiveTracking() {
  Fix: Verify brace matching

Line 22067: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22069: Unmatched braces: 1 open, 0 close
  Content: function updateCurrentHole() {
  Fix: Verify brace matching

Line 22071: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22074: Unmatched braces: 1 open, 0 close
  Content: const CaddyEarningsSystem = {
  Fix: Verify brace matching

Line 22077: Unmatched braces: 1 open, 0 close
  Content: toggleForm() {
  Fix: Verify brace matching

Line 22079: Unmatched braces: 1 open, 0 close
  Content: if (form.classList.contains('hidden')) {
  Fix: Verify brace matching

Line 22091: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22092: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22094: Unmatched braces: 1 open, 0 close
  Content: submitEarnings(event) {
  Fix: Verify brace matching

Line 22105: Unmatched braces: 1 open, 0 close
  Content: const newEarning = {
  Fix: Verify brace matching

Line 22116: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22127: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22129: Unmatched braces: 1 open, 0 close
  Content: saveEarnings() {
  Fix: Verify brace matching

Line 22131: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22133: Unmatched braces: 1 open, 0 close
  Content: refreshEarningsDisplay() {
  Fix: Verify brace matching

Line 22137: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22139: Unmatched braces: 1 open, 0 close
  Content: updateHeroStats() {
  Fix: Verify brace matching

Line 22144: Unmatched parentheses: 1 open, 0 close
  Content: const monthlyEarnings = this.earnings.filter(earning => {
  Fix: Verify parentheses matching

Line 22144: Unmatched braces: 1 open, 0 close
  Content: const monthlyEarnings = this.earnings.filter(earning => {
  Fix: Verify brace matching

Line 22148: Unmatched parentheses: 2 open, 3 close
  Content: }).reduce((total, earning) => total + earning.totalAmount, 0);
  Fix: Verify parentheses matching

Line 22148: Unmatched braces: 0 open, 1 close
  Content: }).reduce((total, earning) => total + earning.totalAmount, 0);
  Fix: Verify brace matching

Line 22152: Unmatched braces: 1 open, 0 close
  Content: if (monthlyEarningsDisplay && monthlyEarningsDisplay.textContent.includes('฿')) {
  Fix: Verify brace matching

Line 22154: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22155: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22156: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22159: Unmatched braces: 1 open, 0 close
  Content: function toggleEarningsForm() {
  Fix: Verify brace matching

Line 22161: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22163: Unmatched braces: 1 open, 0 close
  Content: function submitEarnings(event) {
  Fix: Verify brace matching

Line 22165: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22168: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify parentheses matching

Line 22168: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function() {
  Fix: Verify brace matching

Line 22169: Unmatched parentheses: 2 open, 1 close
  Content: setTimeout(() => {
  Fix: Verify parentheses matching

Line 22169: Unmatched braces: 1 open, 0 close
  Content: setTimeout(() => {
  Fix: Verify brace matching

Line 22172: Unmatched parentheses: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify parentheses matching

Line 22172: Unmatched braces: 0 open, 1 close
  Content: }, 1000);
  Fix: Verify brace matching

Line 22173: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 22173: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 22177: Unmatched parentheses: 2 open, 1 close
  Content: (function () {
  Fix: Verify parentheses matching

Line 22177: Unmatched braces: 1 open, 0 close
  Content: (function () {
  Fix: Verify brace matching

Line 22179: Unmatched braces: 1 open, 0 close
  Content: function resolveLoginImpl() {
  Fix: Verify brace matching

Line 22186: Unmatched braces: 1 open, 0 close
  Content: return async function () {
  Fix: Verify brace matching

Line 22187: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22192: Unmatched braces: 1 open, 0 close
  Content: if (window.ScreenManager && typeof ScreenManager.navigateTo === 'function') {
  Fix: Verify brace matching

Line 22197: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22203: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22204: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22205: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22208: Unmatched braces: 1 open, 0 close
  Content: window.login = function (role) {
  Fix: Verify brace matching

Line 22214: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22217: Unmatched parentheses: 2 open, 1 close
  Content: document.addEventListener('DOMContentLoaded', function () {
  Fix: Verify parentheses matching

Line 22217: Unmatched braces: 1 open, 0 close
  Content: document.addEventListener('DOMContentLoaded', function () {
  Fix: Verify brace matching

Line 22220: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 22220: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 22221: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22221: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 22225: Unmatched parentheses: 2 open, 1 close
  Content: (function(){
  Fix: Verify parentheses matching

Line 22225: Unmatched braces: 1 open, 0 close
  Content: (function(){
  Fix: Verify brace matching

Line 22229: Unmatched braces: 1 open, 0 close
  Content: const Auth = {
  Fix: Verify brace matching

Line 22232: Unmatched braces: 1 open, 0 close
  Content: async loadUsers() {
  Fix: Verify brace matching

Line 22235: Unmatched parentheses: 0 open, 1 close
  Content: // 1) read local
  Fix: Verify parentheses matching

Line 22239: Unmatched parentheses: 1 open, 2 close
  Content: // 2) read cloud (best-effort; won't throw the page)
  Fix: Verify parentheses matching

Line 22241: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22242: Unmatched braces: 1 open, 0 close
  Content: if (window.SimpleCloudSync) {
  Fix: Verify brace matching

Line 22247: Unmatched braces: 1 open, 0 close
  Content: if (server) {
  Fix: Verify brace matching

Line 22250: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22251: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22254: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22256: Unmatched parentheses: 0 open, 1 close
  Content: // 3) normalize + merge by emailLower
  Fix: Verify parentheses matching

Line 22258: Unmatched braces: 1 open, 0 close
  Content: const add = (u) => {
  Fix: Verify brace matching

Line 22264: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22269: Unmatched parentheses: 0 open, 1 close
  Content: // 4) write back local for consistency
  Fix: Verify parentheses matching

Line 22272: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22274: Unmatched braces: 1 open, 0 close
  Content: async saveUsers() {
  Fix: Verify brace matching

Line 22277: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22278: Unmatched braces: 1 open, 0 close
  Content: if (window.SimpleCloudSync && typeof SimpleCloudSync.saveToCloud === 'function') {
  Fix: Verify brace matching

Line 22280: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22281: Unmatched braces: 1 open, 2 close
  Content: } catch (e) { console.warn('[Auth] cloud save failed:', e); }
  Fix: Verify brace matching

Line 22282: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22285: Unmatched braces: 1 open, 0 close
  Content: hash(pw, emailLower) {
  Fix: Verify brace matching

Line 22289: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22291: Unmatched braces: 1 open, 0 close
  Content: passwordsMatch(user, inputPw) {
  Fix: Verify brace matching

Line 22296: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22298: Unmatched braces: 1 open, 0 close
  Content: async login(emailOrRole, pw) {
  Fix: Verify brace matching

Line 22300: Unmatched braces: 1 open, 0 close
  Content: if (!pw && typeof emailOrRole === 'string' && ['golfer','caddie','manager','proshop','maintenance'].
  Fix: Verify brace matching

Line 22302: Unmatched braces: 1 open, 0 close
  Content: if (window.FallbackAuthentication && typeof FallbackAuthentication.login === 'function') {
  Fix: Verify brace matching

Line 22304: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22306: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22322: Unmatched braces: 1 open, 0 close
  Content: const current = {
  Fix: Verify brace matching

Line 22327: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22333: Unmatched braces: 1 open, 0 close
  Content: const dashboardMap = {
  Fix: Verify brace matching

Line 22339: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22345: Unmatched braces: 0 open, 1 close
  Content: },
  Fix: Verify brace matching

Line 22347: Unmatched braces: 1 open, 0 close
  Content: async create(email, pw, role='golfer', name='') {
  Fix: Verify brace matching

Line 22358: Unmatched braces: 1 open, 0 close
  Content: const user = {
  Fix: Verify brace matching

Line 22363: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22369: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22370: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22374: Unmatched braces: 1 open, 0 close
  Content: window.login = async (emailOrRole, pw) => {
  Fix: Verify brace matching

Line 22375: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22384: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22385: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22387: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22387: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 22399: Unmatched parentheses: 2 open, 1 close
  Content: (function(){
  Fix: Verify parentheses matching

Line 22399: Unmatched braces: 1 open, 0 close
  Content: (function(){
  Fix: Verify brace matching

Line 22406: Unmatched braces: 1 open, 0 close
  Content: function readJSON(key, fallback){
  Fix: Verify brace matching

Line 22409: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22410: Unmatched braces: 1 open, 0 close
  Content: function writeJSON(key, value){
  Fix: Verify brace matching

Line 22413: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22416: Unmatched parentheses: 2 open, 1 close
  Content: (function migrateSchedule(){
  Fix: Verify parentheses matching

Line 22416: Unmatched braces: 1 open, 0 close
  Content: (function migrateSchedule(){
  Fix: Verify brace matching

Line 22421: Unmatched braces: 1 open, 0 close
  Content: if (Array.isArray(canonical)) {
  Fix: Verify brace matching

Line 22439: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22440: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22440: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 22443: Unmatched braces: 1 open, 0 close
  Content: function canonTimeISO(ts){
  Fix: Verify brace matching

Line 22444: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22449: Unmatched braces: 1 open, 2 close
  Content: } catch { return String(ts); }
  Fix: Verify brace matching

Line 22450: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22453: Unmatched braces: 1 open, 0 close
  Content: if (window.BookingManager && typeof BookingManager.addBooking === 'function') {
  Fix: Verify brace matching

Line 22455: Unmatched braces: 1 open, 0 close
  Content: BookingManager.addBooking = function(data){
  Fix: Verify brace matching

Line 22456: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22458: Unmatched brackets: 1 open, 0 close
  Content: const g = data.groupId || [
  Fix: Verify bracket matching

Line 22463: Unmatched brackets: 0 open, 1 close
  Content: ].join('_');
  Fix: Verify bracket matching

Line 22468: Unmatched braces: 1 open, 0 close
  Content: if (!data.id){
  Fix: Verify brace matching

Line 22469: Unmatched brackets: 1 open, 0 close
  Content: data.id = [
  Fix: Verify bracket matching

Line 22476: Unmatched brackets: 0 open, 1 close
  Content: ].join('_');
  Fix: Verify bracket matching

Line 22477: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22482: Unmatched braces: 1 open, 0 close
  Content: if (idx >= 0){
  Fix: Verify brace matching

Line 22486: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22488: Unmatched braces: 1 open, 2 close
  Content: } catch(e){ console.warn('[Patch] addBooking pre-upsert failed', e); }
  Fix: Verify brace matching

Line 22490: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22492: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22495: Unmatched braces: 1 open, 0 close
  Content: if (window.ScheduleSystem){
  Fix: Verify brace matching

Line 22496: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem._read = function(){
  Fix: Verify brace matching

Line 22499: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22500: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem._write = function(items){
  Fix: Verify brace matching

Line 22503: Unmatched braces: 1 open, 0 close
  Content: for (const it of items){
  Fix: Verify brace matching

Line 22504: Unmatched braces: 1 open, 0 close
  Content: if (!it.id){
  Fix: Verify brace matching

Line 22505: Unmatched brackets: 1 open, 0 close
  Content: it.id = [
  Fix: Verify bracket matching

Line 22510: Unmatched brackets: 0 open, 1 close
  Content: ].join('_');
  Fix: Verify bracket matching

Line 22511: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22512: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22514: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22517: Unmatched braces: 1 open, 0 close
  Content: if (typeof ScheduleSystem.saveToLocalStorage === 'function'){
  Fix: Verify brace matching

Line 22519: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem.saveToLocalStorage = function(){
  Fix: Verify brace matching

Line 22524: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22525: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22529: Unmatched braces: 1 open, 0 close
  Content: ScheduleSystem.updateScheduleTab = function(){
  Fix: Verify brace matching

Line 22536: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22539: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22542: Unmatched braces: 1 open, 0 close
  Content: if (window.SimpleCloudSync){
  Fix: Verify brace matching

Line 22545: Unmatched braces: 1 open, 0 close
  Content: SimpleCloudSync.saveToCloud = async function(){
  Fix: Verify brace matching

Line 22546: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22554: Unmatched braces: 1 open, 2 close
  Content: } catch(e){ console.warn('[Patch] could not attach schedule to cloud payload', e); }
  Fix: Verify brace matching

Line 22556: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22560: Unmatched braces: 1 open, 0 close
  Content: SimpleCloudSync.updateLocalStorageFromServer = function(serverData){
  Fix: Verify brace matching

Line 22561: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22563: Unmatched parentheses: 2 open, 1 close
  Content: : (Array.isArray(serverData?.schedule) ? serverData.schedule // in case server sent full array in 's
  Fix: Verify parentheses matching

Line 22564: Unmatched parentheses: 1 open, 2 close
  Content: : readJSON(SCHEDULE_KEY, []));
  Fix: Verify parentheses matching

Line 22565: Unmatched braces: 1 open, 0 close
  Content: if (Array.isArray(items)) {
  Fix: Verify brace matching

Line 22570: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22571: Unmatched braces: 1 open, 2 close
  Content: } catch(e){ console.warn('[Patch] schedule merge from server failed', e); }
  Fix: Verify brace matching

Line 22573: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22576: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22582: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22582: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 22593: Unmatched parentheses: 2 open, 1 close
  Content: (function(){
  Fix: Verify parentheses matching

Line 22593: Unmatched braces: 1 open, 0 close
  Content: (function(){
  Fix: Verify brace matching

Line 22599: Unmatched braces: 1 open, 0 close
  Content: function canonISO(ts){
  Fix: Verify brace matching

Line 22603: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22604: Unmatched braces: 1 open, 0 close
  Content: function ensureScheduleShape(item){
  Fix: Verify brace matching

Line 22621: Unmatched braces: 1 open, 0 close
  Content: if (!out.id) {
  Fix: Verify brace matching

Line 22622: Unmatched brackets: 1 open, 0 close
  Content: out.id = [
  Fix: Verify bracket matching

Line 22628: Unmatched brackets: 0 open, 1 close
  Content: ].join('_');
  Fix: Verify bracket matching

Line 22629: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22631: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22633: Unmatched braces: 1 open, 0 close
  Content: function readSchedule(){
  Fix: Verify brace matching

Line 22637: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22638: Unmatched braces: 1 open, 0 close
  Content: function writeSchedule(items){
  Fix: Verify brace matching

Line 22640: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22643: Unmatched braces: 1 open, 0 close
  Content: function rebuildFromBookings(){
  Fix: Verify brace matching

Line 22646: Unmatched braces: 1 open, 0 close
  Content: for (const b of bookings){
  Fix: Verify brace matching

Line 22650: Unmatched parentheses: 1 open, 0 close
  Content: const it = ensureScheduleShape({
  Fix: Verify parentheses matching

Line 22650: Unmatched braces: 1 open, 0 close
  Content: const it = ensureScheduleShape({
  Fix: Verify brace matching

Line 22662: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 22662: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 22664: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22669: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22672: Unmatched braces: 1 open, 0 close
  Content: function setText(selectors, val){
  Fix: Verify brace matching

Line 22673: Unmatched braces: 1 open, 0 close
  Content: for (const s of selectors){
  Fix: Verify brace matching

Line 22676: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22677: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22678: Unmatched braces: 1 open, 0 close
  Content: function isSameWeek(d){
  Fix: Verify brace matching

Line 22683: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22684: Unmatched braces: 1 open, 0 close
  Content: function refreshStatsUI(){
  Fix: Verify brace matching

Line 22698: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22701: Unmatched braces: 1 open, 0 close
  Content: if (window.BookingManager && typeof BookingManager.addBooking === 'function'){
  Fix: Verify brace matching

Line 22703: Unmatched braces: 1 open, 0 close
  Content: BookingManager.addBooking = function(data){
  Fix: Verify brace matching

Line 22705: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22709: Unmatched braces: 1 open, 0 close
  Content: if (!exists){
  Fix: Verify brace matching

Line 22712: Unmatched parentheses: 2 open, 0 close
  Content: sched.push(ensureScheduleShape({
  Fix: Verify parentheses matching

Line 22712: Unmatched braces: 1 open, 0 close
  Content: sched.push(ensureScheduleShape({
  Fix: Verify brace matching

Line 22724: Unmatched parentheses: 0 open, 2 close
  Content: }));
  Fix: Verify parentheses matching

Line 22724: Unmatched braces: 0 open, 1 close
  Content: }));
  Fix: Verify brace matching

Line 22729: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22730: Unmatched braces: 1 open, 2 close
  Content: } catch(e){ console.warn('[Patch v2] ensure schedule for booking failed', e); }
  Fix: Verify brace matching

Line 22732: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22734: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22737: Unmatched braces: 1 open, 0 close
  Content: if (window.ScheduleSystem){
  Fix: Verify brace matching

Line 22741: Unmatched braces: 1 open, 0 close
  Content: window.ScheduleSystem.updateScheduleTab = function(){
  Fix: Verify brace matching

Line 22748: Unmatched braces: 0 open, 1 close
  Content: };
  Fix: Verify brace matching

Line 22750: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22754: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22754: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

Line 22758: Unmatched parentheses: 2 open, 1 close
  Content: (function () {
  Fix: Verify parentheses matching

Line 22758: Unmatched braces: 1 open, 0 close
  Content: (function () {
  Fix: Verify brace matching

Line 22762: Unmatched braces: 1 open, 0 close
  Content: function readSchedule() {
  Fix: Verify brace matching

Line 22763: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22766: Unmatched parentheses: 1 open, 0 close
  Content: return items.map(i => {
  Fix: Verify parentheses matching

Line 22766: Unmatched braces: 1 open, 0 close
  Content: return items.map(i => {
  Fix: Verify brace matching

Line 22770: Unmatched parentheses: 1 open, 2 close
  Content: }).filter(x => x && x.time);
  Fix: Verify parentheses matching

Line 22770: Unmatched braces: 0 open, 1 close
  Content: }).filter(x => x && x.time);
  Fix: Verify brace matching

Line 22771: Unmatched braces: 1 open, 2 close
  Content: } catch { return []; }
  Fix: Verify brace matching

Line 22772: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22774: Unmatched braces: 1 open, 0 close
  Content: function fallbackFromBookings() {
  Fix: Verify brace matching

Line 22775: Unmatched braces: 1 open, 0 close
  Content: try {
  Fix: Verify brace matching

Line 22777: Unmatched parentheses: 3 open, 2 close
  Content: return (Array.isArray(b) ? b : []).map(x => {
  Fix: Verify parentheses matching

Line 22777: Unmatched braces: 1 open, 0 close
  Content: return (Array.isArray(b) ? b : []).map(x => {
  Fix: Verify brace matching

Line 22781: Unmatched parentheses: 1 open, 2 close
  Content: }).filter(x => x && x.time);
  Fix: Verify parentheses matching

Line 22781: Unmatched braces: 0 open, 1 close
  Content: }).filter(x => x && x.time);
  Fix: Verify brace matching

Line 22782: Unmatched braces: 1 open, 2 close
  Content: } catch { return []; }
  Fix: Verify brace matching

Line 22783: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22785: Unmatched braces: 1 open, 0 close
  Content: function sameWeek(d) {
  Fix: Verify brace matching

Line 22790: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22792: Unmatched braces: 1 open, 0 close
  Content: function computeCounts() {
  Fix: Verify brace matching

Line 22797: Unmatched parentheses: 1 open, 0 close
  Content: const upcoming = items.filter(i =>
  Fix: Verify parentheses matching

Line 22800: Unmatched parentheses: 0 open, 1 close
  Content: ).length;
  Fix: Verify parentheses matching

Line 22802: Unmatched parentheses: 1 open, 0 close
  Content: const thisWeek = items.filter(i =>
  Fix: Verify parentheses matching

Line 22805: Unmatched parentheses: 0 open, 1 close
  Content: ).length;
  Fix: Verify parentheses matching

Line 22809: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22811: Unmatched braces: 1 open, 0 close
  Content: function setCount(id, val) {
  Fix: Verify brace matching

Line 22815: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22817: Unmatched braces: 1 open, 0 close
  Content: function updateCounters() {
  Fix: Verify brace matching

Line 22824: Unmatched braces: 0 open, 1 close
  Content: }
  Fix: Verify brace matching

Line 22833: Unmatched parentheses: 2 open, 1 close
  Content: ['schedule:changed','bookings:changed','schedule:stats'].forEach(function(evt) {
  Fix: Verify parentheses matching

Line 22833: Unmatched braces: 1 open, 0 close
  Content: ['schedule:changed','bookings:changed','schedule:stats'].forEach(function(evt) {
  Fix: Verify brace matching

Line 22835: Unmatched parentheses: 0 open, 1 close
  Content: });
  Fix: Verify parentheses matching

Line 22835: Unmatched braces: 0 open, 1 close
  Content: });
  Fix: Verify brace matching

Line 22840: Unmatched parentheses: 1 open, 2 close
  Content: })();
  Fix: Verify parentheses matching

Line 22840: Unmatched braces: 0 open, 1 close
  Content: })();
  Fix: Verify brace matching

STYLE ISSUES (1103)
--------------------------------------------------------------------------------

Line 1052: Missing semicolon
  Content: const preservedKeys = [
  Fix: Add semicolon

Line 1065: Missing semicolon
  Content: const demoDataKeys = [
  Fix: Add semicolon

Line 1093: Missing semicolon
  Content: const allKeys = [];
  Fix: Add semicolon

Line 1094: Missing semicolon
  Content: for (let i = 0; i < localStorage.length; i++) {
  Fix: Add semicolon

Line 1119: Missing semicolon
  Content: let currentLanguage = 'en';
  Fix: Add semicolon

Line 1121: Missing semicolon
  Content: const translations = {
  Fix: Add semicolon

Line 1958: Missing semicolon
  Content: const key = element.getAttribute('data-i18n');
  Fix: Add semicolon

Line 1964: Missing semicolon
  Content: const key = element.getAttribute('data-i18n-placeholder');
  Fix: Add semicolon

Line 1981: Missing semicolon
  Content: const textMappings = {
  Fix: Add semicolon

Line 2047: Missing semicolon
  Content: const elements = Array.from(document.querySelectorAll('*')).filter(el => {
  Fix: Add semicolon

Line 2062: Missing semicolon
  Content: const text = option.textContent.trim();
  Fix: Add semicolon

Line 2085: Missing semicolon
  Content: const savedLanguage = localStorage.getItem('mci-pro-language') || 'en';
  Fix: Add semicolon

Line 2089: Missing semicolon
  Content: const activeBtn = document.querySelector(`[data-lang="${savedLanguage}"]`);
  Fix: Add semicolon

Line 2100: Missing semicolon
  Content: const observer = new MutationObserver(function(mutations) {
  Fix: Add semicolon

Line 2118: Missing semicolon
  Content: const AppState = {
  Fix: Add semicolon

Line 2160: Missing semicolon
  Content: const LineConfig = {
  Fix: Add semicolon

Line 2178: Missing semicolon
  Content: const a = [...(list || [])];
  Fix: Add semicolon

Line 2179: Missing semicolon
  Content: const i = a.findIndex(x => x && x[key] === item[key]);
  Fix: Add semicolon

Line 2187: Missing semicolon
  Content: const t = booking.teeTime || booking.date + 'T' + (booking.time || '08:00') + ':00Z';
  Fix: Add semicolon

Line 2188: Missing semicolon
  Content: const course = booking.courseId || booking.course || 'unknown';
  Fix: Add semicolon

Line 2189: Missing semicolon
  Content: const user = window.Auth?.currentUserId || booking.golferId || 'anon';
  Fix: Add semicolon

Line 2190: Missing semicolon
  Content: const type = booking.type || 'teeTime';
  Fix: Add semicolon

Line 2191: Missing semicolon
  Content: const caddieSuffix = booking.caddieId ? `_caddie_${booking.caddieId}` : '';
  Fix: Add semicolon

Line 2192: Missing semicolon
  Content: const serviceSuffix = booking.serviceId ? `_service_${booking.serviceId}` : '';
  Fix: Add semicolon

Line 2193: Missing semicolon
  Content: const mainSuffix = booking.isMainBooking ? '_main' : '';
  Fix: Add semicolon

Line 2194: Missing semicolon
  Content: const id = `bk_${course}_${t}_${user}_${type}${caddieSuffix}${serviceSuffix}${mainSuffix}`.replace(/
  Fix: Add semicolon

Line 2201: Missing semicolon
  Content: const iso = new Date(teeTime).toISOString();
  Fix: Add semicolon

Line 2206: Missing semicolon
  Content: let creatingBooking = false;
  Fix: Add semicolon

Line 2211: Missing semicolon
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Add semicolon

Line 2215: Missing semicolon
  Content: const p = JSON.parse(localStorage.getItem('mcipro_user_profile') || 'null');
  Fix: Add semicolon

Line 2224: Missing semicolon
  Content: const profiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 2225: Missing semicolon
  Content: let cleaned = false;
  Fix: Add semicolon

Line 2244: Missing semicolon
  Content: let scheduleData = JSON.parse(localStorage.getItem('mcipro_schedule') || '{"events":[],"caddieBookin
  Fix: Add semicolon

Line 2245: Missing semicolon
  Content: let events = scheduleData.events || [];
  Fix: Add semicolon

Line 2247: Missing semicolon
  Content: const eventId = `sch_${booking.id}`;
  Fix: Add semicolon

Line 2248: Missing semicolon
  Content: const evt = {
  Fix: Add semicolon

Line 2290: Missing semicolon
  Content: let emergencyPollCount = 0;
  Fix: Add semicolon

Line 2291: Missing semicolon
  Content: let normalPollCount = 0;
  Fix: Add semicolon

Line 2293: Missing semicolon
  Content: const emergencyInterval = setInterval(() => {
  Fix: Add semicolon

Line 2308: Missing semicolon
  Content: const normalInterval = setInterval(() => {
  Fix: Add semicolon

Line 2325: Missing semicolon
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Add semicolon

Line 2331: Missing semicolon
  Content: const cloudData = await res.json();
  Fix: Add semicolon

Line 2340: Missing semicolon
  Content: const localData = JSON.parse(localStorage.getItem('mcipro_data') || '{}');
  Fix: Add semicolon

Line 2359: Missing semicolon
  Content: const currentUserId = (window.Auth?.currentUserId) || AppState?.currentUser?.name || 'anon';
  Fix: Add semicolon

Line 2360: Missing semicolon
  Content: const userProfile = cloudData.user_profiles.find(p =>
  Fix: Add semicolon

Line 2382: Missing semicolon
  Content: const scheduleFromServer = toArray(cloudData.schedule_items || cloudData.schedule || []);
  Fix: Add semicolon

Line 2384: Missing semicolon
  Content: const scheduleWrapper = { events: scheduleFromServer, caddieBookings: [], waitlists: [] };
  Fix: Add semicolon

Line 2397: Missing semicolon
  Content: const newAlert = cloudData.emergency_alerts[cloudData.emergency_alerts.length - 1];
  Fix: Add semicolon

Line 2437: Missing semicolon
  Content: let scheduleItems = data.schedule_items || [];
  Fix: Add semicolon

Line 2463: Missing semicolon
  Content: const MAX_RETRIES = 3;
  Fix: Add semicolon

Line 2464: Missing semicolon
  Content: const BASE_DELAY = 500; // 500ms base delay
  Fix: Add semicolon

Line 2468: Missing semicolon
  Content: const cloudRes = await fetch('/.netlify/functions/bookings', {
  Fix: Add semicolon

Line 2472: Missing semicolon
  Content: const currentCloudData = cloudRes.ok ? await cloudRes.json() : { version: 0 };
  Fix: Add semicolon

Line 2475: Missing semicolon
  Content: let userProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 2476: Missing semicolon
  Content: const singleProfile = JSON.parse(localStorage.getItem('mcipro_user_profile') || 'null');
  Fix: Add semicolon

Line 2484: Missing semicolon
  Content: let scheduleData = JSON.parse(localStorage.getItem('mcipro_schedule') || '{"events":[]}');
  Fix: Add semicolon

Line 2485: Missing semicolon
  Content: let schedule = scheduleData.events || [];
  Fix: Add semicolon

Line 2488: Missing semicolon
  Content: const scheduleItems = schedule.map(evt => {
  Fix: Add semicolon

Line 2494: Missing semicolon
  Content: const localData = {
  Fix: Add semicolon

Line 2505: Missing semicolon
  Content: const dataWithIds = this.ensureStableIds(localData);
  Fix: Add semicolon

Line 2514: Missing semicolon
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Add semicolon

Line 2526: Missing semicolon
  Content: const conflictData = await res.json();
  Fix: Add semicolon

Line 2530: Missing semicolon
  Content: const jitter = Math.random() * 100; // 0-100ms jitter
  Fix: Add semicolon

Line 2531: Missing semicolon
  Content: const delay = BASE_DELAY * Math.pow(2, retryCount) + jitter;
  Fix: Add semicolon

Line 2545: Missing semicolon
  Content: const jitter = Math.random() * 100;
  Fix: Add semicolon

Line 2546: Missing semicolon
  Content: const delay = BASE_DELAY * Math.pow(2, retryCount) + jitter;
  Fix: Add semicolon

Line 2554: Missing semicolon
  Content: const result = await res.json();
  Fix: Add semicolon

Line 2580: Missing semicolon
  Content: const scheduleData = toArray(serverData.schedule_items || serverData.schedule || []);
  Fix: Add semicolon

Line 2606: Missing semicolon
  Content: const currentUserId = (window.AppState && window.AppState.currentUser && window.AppState.currentUser
  Fix: Add semicolon

Line 2608: Missing semicolon
  Content: const userProfile = (serverData.user_profiles || []).find(u => u.userId === currentUserId);
  Fix: Add semicolon

Line 2639: Missing semicolon
  Content: const deletionData = {};
  Fix: Add semicolon

Line 2648: Missing semicolon
  Content: const res = await fetch('/.netlify/functions/bookings', {
  Fix: Add semicolon

Line 2658: Missing semicolon
  Content: const result = await res.json();
  Fix: Add semicolon

Line 2665: Missing semicolon
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Add semicolon

Line 2678: Missing semicolon
  Content: const result = await response.json();
  Fix: Add semicolon

Line 2687: Missing semicolon
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Add semicolon

Line 2692: Missing semicolon
  Content: const cloudData = await response.json();
  Fix: Add semicolon

Line 2709: Missing semicolon
  Content: const currentBookings = JSON.parse(localStorage.getItem('mcipro_bookings') || '[]');
  Fix: Add semicolon

Line 2710: Missing semicolon
  Content: const existingIds = new Set(currentBookings.map(b => b.id));
  Fix: Add semicolon

Line 2711: Missing semicolon
  Content: const newBookings = cloudData.bookings.filter(booking => !existingIds.has(booking.id));
  Fix: Add semicolon

Line 2714: Missing semicolon
  Content: const mergedBookings = [...currentBookings, ...newBookings];
  Fix: Add semicolon

Line 2726: Missing semicolon
  Content: const currentProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 2727: Missing semicolon
  Content: const existingNames = new Set(currentProfiles.map(p => p.name));
  Fix: Add semicolon

Line 2728: Missing semicolon
  Content: const newProfiles = cloudData.user_profiles.filter(profile => !existingNames.has(profile.name));
  Fix: Add semicolon

Line 2731: Missing semicolon
  Content: const mergedProfiles = [...currentProfiles, ...newProfiles];
  Fix: Add semicolon

Line 2743: Missing semicolon
  Content: const newAlert = cloudData.emergency_alerts[cloudData.emergency_alerts.length - 1];
  Fix: Add semicolon

Line 2758: Missing semicolon
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/global/emergency-alerts`, {
  Fix: Add semicolon

Line 2763: Missing semicolon
  Content: const data = await response.json();
  Fix: Add semicolon

Line 2780: Missing semicolon
  Content: let statusElement = document.getElementById('sync-status');
  Fix: Add semicolon

Line 2798: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 2805: Missing semicolon
  Content: const color = colors[type] || colors.info;
  Fix: Add semicolon

Line 2842: Missing semicolon
  Content: const response = await fetch(`${this.cloudflareWorkerUrl}/sync/${this.getUserDocPath()}`, {
  Fix: Add semicolon

Line 2847: Missing semicolon
  Content: const cloudData = await response.json();
  Fix: Add semicolon

Line 2871: Missing semicolon
  Content: const CrossDeviceSync = SimpleCloudSync;
  Fix: Add semicolon

Line 2872: Missing semicolon
  Content: const ProductionCloudSync = SimpleCloudSync;
  Fix: Add semicolon

Line 2886: Missing semicolon
  Content: const targetScreen = document.getElementById(screenId);
  Fix: Add semicolon

Line 2918: Missing semicolon
  Content: const initMap = {
  Fix: Add semicolon

Line 2928: Missing semicolon
  Content: const initFunction = initMap[screenId];
  Fix: Add semicolon

Line 2945: Missing semicolon
  Content: const firstInput = document.querySelector('.otp-input');
  Fix: Add semicolon

Line 2957: Missing semicolon
  Content: const bookingDateInput = document.getElementById('bookingDate');
  Fix: Add semicolon

Line 2959: Missing semicolon
  Content: const today = new Date().toISOString().split('T')[0];
  Fix: Add semicolon

Line 3007: Missing semicolon
  Content: const tabButtons = document.querySelectorAll(`#${dashboardId} .tab-button`);
  Fix: Add semicolon

Line 3017: Missing semicolon
  Content: const targetBtn = document.querySelector(`#${dashboardId} .tab-button[onclick*="${tabName}"]`);
  Fix: Add semicolon

Line 3024: Missing semicolon
  Content: const tabContents = document.querySelectorAll(`#${dashboardId} .tab-content`);
  Fix: Add semicolon

Line 3030: Missing semicolon
  Content: const targetContent = document.getElementById(`${dashboardId.replace('Dashboard', '')}-${tabName}`);
  Fix: Add semicolon

Line 3131: Missing semicolon
  Content: const profile = await liff.getProfile();
  Fix: Add semicolon

Line 3150: Missing semicolon
  Content: const profile = await liff.getProfile();
  Fix: Add semicolon

Line 3164: Missing semicolon
  Content: const roleMap = {
  Fix: Add semicolon

Line 3171: Missing semicolon
  Content: const userRole = roleMap[profile.userId] || { role: 'golfer', name: profile.displayName };
  Fix: Add semicolon

Line 3197: Missing semicolon
  Content: const dashboardMap = {
  Fix: Add semicolon

Line 3206: Missing semicolon
  Content: const targetDashboard = dashboardMap[AppState.currentUser.role] || 'golferDashboard';
  Fix: Add semicolon

Line 3219: Missing semicolon
  Content: const permissionMap = {
  Fix: Add semicolon

Line 3230: Missing semicolon
  Content: const lineContainer = document.getElementById('lineLoginContainer');
  Fix: Add semicolon

Line 3231: Missing semicolon
  Content: const fallbackContainer = document.getElementById('fallbackLoginContainer');
  Fix: Add semicolon

Line 3238: Missing semicolon
  Content: const lineContainer = document.getElementById('lineLoginContainer');
  Fix: Add semicolon

Line 3239: Missing semicolon
  Content: const fallbackContainer = document.getElementById('fallbackLoginContainer');
  Fix: Add semicolon

Line 3300: Missing semicolon
  Content: const phoneInput = document.getElementById('phoneInput');
  Fix: Add semicolon

Line 3301: Missing semicolon
  Content: const phone = phoneInput?.value;
  Fix: Add semicolon

Line 3321: Missing semicolon
  Content: const otpSection = document.getElementById('otpInputSection');
  Fix: Add semicolon

Line 3326: Missing semicolon
  Content: const firstInput = document.querySelector('.otp-input');
  Fix: Add semicolon

Line 3333: Missing semicolon
  Content: const sendBtn = document.getElementById('sendOTPBtn');
  Fix: Add semicolon

Line 3347: Missing semicolon
  Content: const otpInputs = document.querySelectorAll('.otp-input');
  Fix: Add semicolon

Line 3348: Missing semicolon
  Content: const enteredOTP = Array.from(otpInputs).map(input => input.value).join('');
  Fix: Add semicolon

Line 3397: Missing semicolon
  Content: const otpInputs = document.querySelectorAll('.otp-input');
  Fix: Add semicolon

Line 3407: Missing semicolon
  Content: const allFilled = Array.from(otpInputs).every(inp => inp.value.length === 1);
  Fix: Add semicolon

Line 3434: Missing semicolon
  Content: const userProfiles = {
  Fix: Add semicolon

Line 3467: Missing semicolon
  Content: const profile = userProfiles[role];
  Fix: Add semicolon

Line 3491: Missing semicolon
  Content: const actualProfile = ProfileSystem.getCurrentProfile(role);
  Fix: Add semicolon

Line 3494: Missing semicolon
  Content: const actualName = `${actualProfile.personalInfo.firstName} ${actualProfile.personalInfo.lastName}`.
  Fix: Add semicolon

Line 3509: Missing semicolon
  Content: const dashboardMap = {
  Fix: Add semicolon

Line 3517: Missing semicolon
  Content: const targetDashboard = dashboardMap[role] || 'golferDashboard';
  Fix: Add semicolon

Line 3539: Missing semicolon
  Content: let overlay = document.getElementById('loadingOverlay');
  Fix: Add semicolon

Line 3559: Missing semicolon
  Content: const overlay = document.getElementById('loadingOverlay');
  Fix: Add semicolon

Line 3570: Missing semicolon
  Content: const nameElements = document.querySelectorAll('.user-name-display');
  Fix: Add semicolon

Line 3576: Missing semicolon
  Content: const avatarElements = document.querySelectorAll('.user-avatar');
  Fix: Add semicolon

Line 3591: Missing semicolon
  Content: const role = AppState.currentUser.role;
  Fix: Add semicolon

Line 3595: Missing semicolon
  Content: const handicapElements = document.querySelectorAll('.user-handicap');
  Fix: Add semicolon

Line 3603: Missing semicolon
  Content: const ratingElements = document.querySelectorAll('.user-rating');
  Fix: Add semicolon

Line 3720: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 3736: Missing semicolon
  Content: const userRole = AppState.currentUser.role;
  Fix: Add semicolon

Line 3737: Missing semicolon
  Content: const isAuthorized = !type.authorizedRoles || type.authorizedRoles.includes(userRole);
  Fix: Add semicolon

Line 3772: Missing semicolon
  Content: const type = this.emergencyTypes[alertType];
  Fix: Add semicolon

Line 3778: Missing semicolon
  Content: const alertId = 'EMG' + Date.now().toString().slice(-6);
  Fix: Add semicolon

Line 3779: Missing semicolon
  Content: const currentLocation = GPSNavigationSystem?.currentPosition;
  Fix: Add semicolon

Line 3781: Missing semicolon
  Content: const alertData = {
  Fix: Add semicolon

Line 3829: Missing semicolon
  Content: const type = this.emergencyTypes[alertType];
  Fix: Add semicolon

Line 3830: Missing semicolon
  Content: const instructions = this.getEmergencyInstructions(alertType);
  Fix: Add semicolon

Line 3833: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 3866: Missing semicolon
  Content: const instructions = {
  Fix: Add semicolon

Line 3882: Missing semicolon
  Content: const overlay = document.createElement('div');
  Fix: Add semicolon

Line 3917: Missing semicolon
  Content: const styleSheet = document.createElement('style');
  Fix: Add semicolon

Line 3962: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 4000: Missing semicolon
  Content: const currentPos = GPSNavigationSystem?.currentPosition;
  Fix: Add semicolon

Line 4006: Missing semicolon
  Content: let nearestZone = this.safetyZones[0];
  Fix: Add semicolon

Line 4007: Missing semicolon
  Content: let minDistance = Infinity;
  Fix: Add semicolon

Line 4010: Missing semicolon
  Content: const distance = calculateDistance(currentPos.lat, currentPos.lng, zone.lat, zone.lng);
  Fix: Add semicolon

Line 4049: Missing semicolon
  Content: const activeAlerts = EmergencySystem.activeAlerts;
  Fix: Add semicolon

Line 4059: Missing semicolon
  Content: const alertContainer = document.getElementById(`${role}-emergency-alerts`);
  Fix: Add semicolon

Line 4060: Missing semicolon
  Content: const alertList = document.getElementById(`${role}-alert-list`);
  Fix: Add semicolon

Line 4061: Missing semicolon
  Content: const alertCount = document.getElementById(`${role}-alert-count`);
  Fix: Add semicolon

Line 4066: Missing semicolon
  Content: const relevantAlerts = alerts.filter(alert => {
  Fix: Add semicolon

Line 4067: Missing semicolon
  Content: const alertType = EmergencySystem.emergencyTypes[alert.type];
  Fix: Add semicolon

Line 4083: Missing semicolon
  Content: const alertType = EmergencySystem.emergencyTypes[alert.type];
  Fix: Add semicolon

Line 4084: Missing semicolon
  Content: const timeAgo = this.getTimeAgo(alert.timestamp);
  Fix: Add semicolon

Line 4087: Missing semicolon
  Content: const isLightningSafety = ['lightning_warning', 'stop_play', 'resume_play'].includes(alert.type);
  Fix: Add semicolon

Line 4088: Missing semicolon
  Content: const alertClass = isLightningSafety ? 'lightning-safety-alert' : 'alert-item';
  Fix: Add semicolon

Line 4089: Missing semicolon
  Content: const bgColor = isLightningSafety ? 'bg-yellow-50' : 'bg-white';
  Fix: Add semicolon

Line 4090: Missing semicolon
  Content: const borderColor = isLightningSafety ? 'border-yellow-400 border-2' : 'border-red-300';
  Fix: Add semicolon

Line 4091: Missing semicolon
  Content: const animation = isLightningSafety ? 'animate-pulse' : '';
  Fix: Add semicolon

Line 4134: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 4135: Missing semicolon
  Content: const alertTime = new Date(timestamp);
  Fix: Add semicolon

Line 4136: Missing semicolon
  Content: const diffMs = now - alertTime;
  Fix: Add semicolon

Line 4137: Missing semicolon
  Content: const diffMins = Math.floor(diffMs / 60000);
  Fix: Add semicolon

Line 4142: Missing semicolon
  Content: const diffHours = Math.floor(diffMins / 60);
  Fix: Add semicolon

Line 4145: Missing semicolon
  Content: const diffDays = Math.floor(diffHours / 24);
  Fix: Add semicolon

Line 4150: Missing semicolon
  Content: const alert = EmergencySystem.activeAlerts.find(a => a.id === alertId);
  Fix: Add semicolon

Line 4162: Missing semicolon
  Content: const alertIndex = EmergencySystem.activeAlerts.findIndex(a => a.id === alertId);
  Fix: Add semicolon

Line 4164: Missing semicolon
  Content: const alert = EmergencySystem.activeAlerts[alertIndex];
  Fix: Add semicolon

Line 4197: Missing semicolon
  Content: const audioContext = new (window.AudioContext || window.webkitAudioContext)();
  Fix: Add semicolon

Line 4230: Missing semicolon
  Content: const stream = await navigator.mediaDevices.getUserMedia({
  Fix: Add semicolon

Line 4269: Missing semicolon
  Content: const alertType_data = EmergencySystem.emergencyTypes[alertType];
  Fix: Add semicolon

Line 4276: Missing semicolon
  Content: const overlay = document.createElement('div');
  Fix: Add semicolon

Line 4302: Missing semicolon
  Content: const autoRemoveTime = alertType === 'stop_play' ? 10000 : 5000;
  Fix: Add semicolon

Line 4313: Missing semicolon
  Content: const overlay = button.closest('.fixed');
  Fix: Add semicolon

Line 4321: Missing semicolon
  Content: const initialTime = alertType === 'stop_play' ? 10 : 5;
  Fix: Add semicolon

Line 4322: Missing semicolon
  Content: let timeLeft = initialTime;
  Fix: Add semicolon

Line 4324: Missing semicolon
  Content: const countdownElement = overlay.querySelector(`#countdown-${alertType}`);
  Fix: Add semicolon

Line 4327: Missing semicolon
  Content: const countdown = setInterval(() => {
  Fix: Add semicolon

Line 4362: Missing semicolon
  Content: for (let i = 0; i < 3; i++) {
  Fix: Add semicolon

Line 4382: Missing semicolon
  Content: const oscillator = audioContext.createOscillator();
  Fix: Add semicolon

Line 4383: Missing semicolon
  Content: const gainNode = audioContext.createGain();
  Fix: Add semicolon

Line 4400: Missing semicolon
  Content: const oscillator = audioContext.createOscillator();
  Fix: Add semicolon

Line 4401: Missing semicolon
  Content: const gainNode = audioContext.createGain();
  Fix: Add semicolon

Line 4412: Missing semicolon
  Content: for (let i = 1; i < duration; i++) {
  Fix: Add semicolon

Line 4436: Missing semicolon
  Content: const container = document.getElementById(`${role}-emergency-alerts`);
  Fix: Add semicolon

Line 4447: Missing semicolon
  Content: const testAlert = {
  Fix: Add semicolon

Line 4472: Missing semicolon
  Content: const originalSendSpecificAlert = EmergencySystem.sendSpecificAlert;
  Fix: Add semicolon

Line 4614: Missing semicolon
  Content: const userName = `${profileData.firstName} ${profileData.lastName}`;
  Fix: Add semicolon

Line 4619: Missing semicolon
  Content: const keysToPreserve = [
  Fix: Add semicolon

Line 4627: Missing semicolon
  Content: const dataKeysToForceRemove = [
  Fix: Add semicolon

Line 4639: Missing semicolon
  Content: const allKeys = [];
  Fix: Add semicolon

Line 4640: Missing semicolon
  Content: for (let i = 0; i < localStorage.length; i++) {
  Fix: Add semicolon

Line 4695: Missing semicolon
  Content: const cartElements = document.querySelectorAll('[data-cart-item]');
  Fix: Add semicolon

Line 4699: Missing semicolon
  Content: const orderHistoryElements = document.querySelectorAll('[data-order-history]');
  Fix: Add semicolon

Line 4781: Missing semicolon
  Content: const dashboardCards = document.querySelectorAll('.dashboard-card[data-user-specific="true"]');
  Fix: Add semicolon

Line 4791: Missing semicolon
  Content: const bookingCards = document.querySelectorAll('.booking-card, .schedule-item-card');
  Fix: Add semicolon

Line 4795: Missing semicolon
  Content: const scheduleContainer = document.querySelector('#scheduleItemsList');
  Fix: Add semicolon

Line 4801: Missing semicolon
  Content: const overviewBookings = document.querySelector('.overview-bookings');
  Fix: Add semicolon

Line 4807: Missing semicolon
  Content: const statElements = document.querySelectorAll('.stat-value, .metric-value');
  Fix: Add semicolon

Line 4832: Missing semicolon
  Content: const profilesModal = document.createElement('div');
  Fix: Add semicolon

Line 4836: Missing semicolon
  Content: const savedProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 4884: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 4896: Missing semicolon
  Content: const modal = document.getElementById('profilesModal');
  Fix: Add semicolon

Line 4903: Missing semicolon
  Content: const savedProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 4904: Missing semicolon
  Content: const selectedProfile = savedProfiles.find(p => p.id === profileId);
  Fix: Add semicolon

Line 4918: Missing semicolon
  Content: const savedProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 4919: Missing semicolon
  Content: const updatedProfiles = savedProfiles.filter(p => p.id !== profileId);
  Fix: Add semicolon

Line 4923: Missing semicolon
  Content: const deletedProfile = savedProfiles.find(p => p.id === profileId);
  Fix: Add semicolon

Line 4925: Missing semicolon
  Content: const profileName = `${deletedProfile.firstName} ${deletedProfile.lastName}`;
  Fix: Add semicolon

Line 4946: Missing semicolon
  Content: const profileKey = `profile_${role}_${profileName}`;
  Fix: Add semicolon

Line 4950: Missing semicolon
  Content: const userDataKey = `userData_${profileId}`;
  Fix: Add semicolon

Line 4954: Missing semicolon
  Content: const keysToClean = [
  Fix: Add semicolon

Line 4977: Missing semicolon
  Content: const roleInputs = document.querySelectorAll('input[name="role"]');
  Fix: Add semicolon

Line 4987: Missing semicolon
  Content: const profilePictureInput = document.getElementById('profilePicture');
  Fix: Add semicolon

Line 4990: Missing semicolon
  Content: const file = event.target.files[0];
  Fix: Add semicolon

Line 4992: Missing semicolon
  Content: const reader = new FileReader();
  Fix: Add semicolon

Line 5004: Missing semicolon
  Content: const profileForm = document.getElementById('profileCreationForm');
  Fix: Add semicolon

Line 5011: Missing semicolon
  Content: const container = document.getElementById('roleSpecificFields');
  Fix: Add semicolon

Line 5014: Missing semicolon
  Content: let fieldsHTML = '';
  Fix: Add semicolon

Line 5270: Missing semicolon
  Content: const formData = new FormData(event.target);
  Fix: Add semicolon

Line 5271: Missing semicolon
  Content: const profileData = {};
  Fix: Add semicolon

Line 5285: Missing semicolon
  Content: const roleSpecificData = {};
  Fix: Add semicolon

Line 5298: Missing semicolon
  Content: const languages = formData.getAll('languages');
  Fix: Add semicolon

Line 5330: Missing semicolon
  Content: const profilePicture = formData.get('profilePicture');
  Fix: Add semicolon

Line 5334: Missing semicolon
  Content: const reader = new FileReader();
  Fix: Add semicolon

Line 5348: Missing semicolon
  Content: const existingProfiles = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 5361: Missing semicolon
  Content: const profileKey = `profile_${profileData.role}_${currentUser.name}`;
  Fix: Add semicolon

Line 5362: Missing semicolon
  Content: const formattedProfile = {
  Fix: Add semicolon

Line 5417: Missing semicolon
  Content: const removed = BookingManager.removeDuplicateBookings();
  Fix: Add semicolon

Line 5432: Missing semicolon
  Content: const cleared = BookingManager.clearAllBookings();
  Fix: Add semicolon

Line 5469: Missing semicolon
  Content: let foodCart = [];
  Fix: Add semicolon

Line 5470: Missing semicolon
  Content: let currentFoodCategory = 'all';
  Fix: Add semicolon

Line 5471: Missing semicolon
  Content: let activeOrderId = null;
  Fix: Add semicolon

Line 5473: Missing semicolon
  Content: const FoodOrderingSystem = {
  Fix: Add semicolon

Line 5583: Missing semicolon
  Content: const item = FoodOrderingSystem.menuItems[itemId];
  Fix: Add semicolon

Line 5589: Missing semicolon
  Content: const existingItem = foodCart.find(cartItem => cartItem.id === itemId);
  Fix: Add semicolon

Line 5616: Missing semicolon
  Content: const item = foodCart.find(cartItem => cartItem.id === itemId);
  Fix: Add semicolon

Line 5628: Missing semicolon
  Content: const cartContainer = document.getElementById('foodCartContainer');
  Fix: Add semicolon

Line 5629: Missing semicolon
  Content: const cartItemCount = document.getElementById('cartItemCount');
  Fix: Add semicolon

Line 5630: Missing semicolon
  Content: const cartSubtotal = document.getElementById('cartSubtotal');
  Fix: Add semicolon

Line 5631: Missing semicolon
  Content: const serviceCharge = document.getElementById('serviceCharge');
  Fix: Add semicolon

Line 5632: Missing semicolon
  Content: const cartTotal = document.getElementById('cartTotal');
  Fix: Add semicolon

Line 5633: Missing semicolon
  Content: const placeOrderBtn = document.getElementById('placeOrderBtn');
  Fix: Add semicolon

Line 5637: Missing semicolon
  Content: let subtotal = 0;
  Fix: Add semicolon

Line 5638: Missing semicolon
  Content: let itemCount = 0;
  Fix: Add semicolon

Line 5646: Missing semicolon
  Content: const itemTotal = item.price * item.quantity;
  Fix: Add semicolon

Line 5650: Missing semicolon
  Content: const cartItem = document.createElement('div');
  Fix: Add semicolon

Line 5682: Missing semicolon
  Content: const serviceChargeAmount = Math.round(subtotal * 0.1);
  Fix: Add semicolon

Line 5683: Missing semicolon
  Content: const total = subtotal + serviceChargeAmount;
  Fix: Add semicolon

Line 5720: Missing semicolon
  Content: const activeBtn = document.querySelector(`[data-category="${category}"]`);
  Fix: Add semicolon

Line 5728: Missing semicolon
  Content: const menuContainer = document.getElementById('foodMenuItems');
  Fix: Add semicolon

Line 5731: Missing semicolon
  Content: const items = Object.entries(FoodOrderingSystem.menuItems)
  Fix: Add semicolon

Line 5777: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 5834: Missing semicolon
  Content: const option = FoodOrderingSystem.deliveryOptions[optionKey];
  Fix: Add semicolon

Line 5866: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 5943: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 6019: Missing semicolon
  Content: const completionTime = document.getElementById('roundCompletionTime').value;
  Fix: Add semicolon

Line 6020: Missing semicolon
  Content: const partySize = document.getElementById('partySize').value;
  Fix: Add semicolon

Line 6021: Missing semicolon
  Content: const seatingPreference = document.getElementById('seatingPreference').value;
  Fix: Add semicolon

Line 6031: Missing semicolon
  Content: const option = FoodOrderingSystem.deliveryOptions[optionKey];
  Fix: Add semicolon

Line 6032: Missing semicolon
  Content: const enhancedOption = {
  Fix: Add semicolon

Line 6055: Missing semicolon
  Content: const completionTime = document.getElementById('expectedCompletionTime').value;
  Fix: Add semicolon

Line 6056: Missing semicolon
  Content: const currentHole = document.getElementById('currentHole').value;
  Fix: Add semicolon

Line 6066: Missing semicolon
  Content: const option = FoodOrderingSystem.deliveryOptions[optionKey];
  Fix: Add semicolon

Line 6067: Missing semicolon
  Content: const enhancedOption = {
  Fix: Add semicolon

Line 6116: Missing semicolon
  Content: const subtotal = foodCart.reduce((total, item) => total + (item.price * item.quantity), 0);
  Fix: Add semicolon

Line 6117: Missing semicolon
  Content: const serviceCharge = Math.round(subtotal * 0.1);
  Fix: Add semicolon

Line 6118: Missing semicolon
  Content: const deliveryFee = deliveryOption.fee || 0;
  Fix: Add semicolon

Line 6119: Missing semicolon
  Content: const total = subtotal + serviceCharge + deliveryFee;
  Fix: Add semicolon

Line 6121: Missing semicolon
  Content: const orderId = 'FO' + Date.now().toString().slice(-6);
  Fix: Add semicolon

Line 6122: Missing semicolon
  Content: const orderTime = new Date();
  Fix: Add semicolon

Line 6125: Missing semicolon
  Content: const orderDetails = {
  Fix: Add semicolon

Line 6223: Missing semicolon
  Content: const prepTimes = cartItems.map(item => item.prepTime || 15);
  Fix: Add semicolon

Line 6224: Missing semicolon
  Content: const maxPrepTime = Math.max(...prepTimes);
  Fix: Add semicolon

Line 6225: Missing semicolon
  Content: const baseTime = maxPrepTime + (deliveryOption.baseTime || 0);
  Fix: Add semicolon

Line 6226: Missing semicolon
  Content: const estimatedTime = baseTime + Math.floor(Math.random() * 10);
  Fix: Add semicolon

Line 6246: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 6357: Missing semicolon
  Content: const handleEscKey = (e) => {
  Fix: Add semicolon

Line 6374: Missing semicolon
  Content: const modals = document.querySelectorAll('.fixed.inset-0');
  Fix: Add semicolon

Line 6406: Missing semicolon
  Content: const possibleModals = document.querySelectorAll('.fixed');
  Fix: Add semicolon

Line 6428: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 6466: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 6476: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 6479: Missing semicolon
  Content: const progressSteps = [
  Fix: Add semicolon

Line 6517: Missing semicolon
  Content: const isCompleted = order.progress[step.key].completed;
  Fix: Add semicolon

Line 6518: Missing semicolon
  Content: const isActive = !isCompleted &&
  Fix: Add semicolon

Line 6520: Missing semicolon
  Content: const time = order.progress[step.key].time;
  Fix: Add semicolon

Line 6606: Missing semicolon
  Content: const orderTime = new Date(order.orderTime);
  Fix: Add semicolon

Line 6607: Missing semicolon
  Content: const estimatedCompletionTime = new Date(orderTime.getTime() + order.estimatedTime * 60000);
  Fix: Add semicolon

Line 6608: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 6609: Missing semicolon
  Content: const remainingMs = estimatedCompletionTime - now;
  Fix: Add semicolon

Line 6613: Missing semicolon
  Content: const remainingMinutes = Math.ceil(remainingMs / 60000);
  Fix: Add semicolon

Line 6618: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 6646: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 6659: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 6663: Missing semicolon
  Content: const printWindow = window.open('', '_blank');
  Fix: Add semicolon

Line 6740: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 6812: Missing semicolon
  Content: const classes = {
  Fix: Add semicolon

Line 6835: Missing semicolon
  Content: const historyContainer = document.getElementById('orderHistoryContainer');
  Fix: Add semicolon

Line 6861: Missing semicolon
  Content: const GolfCourseDatabase = {
  Fix: Add semicolon

Line 6918: Missing semicolon
  Content: const featuredCourses = this.courses.filter(c => c.featured);
  Fix: Add semicolon

Line 6930: Missing semicolon
  Content: const activeOrdersList = document.getElementById('activeOrdersList');
  Fix: Add semicolon

Line 6931: Missing semicolon
  Content: const orderHistoryList = document.getElementById('orderHistoryList');
  Fix: Add semicolon

Line 6932: Missing semicolon
  Content: const activeOrdersCount = document.getElementById('activeOrdersCount');
  Fix: Add semicolon

Line 6939: Missing semicolon
  Content: const activeOrders = FoodOrderingSystem.orderHistory.filter(order =>
  Fix: Add semicolon

Line 6949: Missing semicolon
  Content: const activeOrdersBadge = document.getElementById('activeOrdersBadge');
  Fix: Add semicolon

Line 6950: Missing semicolon
  Content: const orderStatusTabBadge = document.getElementById('orderStatusTabBadge');
  Fix: Add semicolon

Line 6989: Missing semicolon
  Content: const recentHistory = FoodOrderingSystem.orderHistory.slice(0, 10);
  Fix: Add semicolon

Line 7002: Missing semicolon
  Content: const orderHistoryBadge = document.getElementById('orderHistoryBadge');
  Fix: Add semicolon

Line 7015: Missing semicolon
  Content: const statusColor = getStatusClass(order.status);
  Fix: Add semicolon

Line 7016: Missing semicolon
  Content: const progress = getOrderProgress(order);
  Fix: Add semicolon

Line 7088: Missing semicolon
  Content: const stages = ['confirmed', 'preparing', 'cooking', 'ready', 'delivered'];
  Fix: Add semicolon

Line 7089: Missing semicolon
  Content: let completed = 0;
  Fix: Add semicolon

Line 7101: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 7109: Missing semicolon
  Content: const order = FoodOrderingSystem.orderHistory.find(o => o.id === orderId);
  Fix: Add semicolon

Line 7117: Missing semicolon
  Content: const trackingElement = document.querySelector('.order-tracking-status');
  Fix: Add semicolon

Line 7133: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 7193: Missing semicolon
  Content: const kitchenRoom = Object.keys(ChatSystem.chatRooms).find(room =>
  Fix: Add semicolon

Line 7204: Missing semicolon
  Content: const ProfileSystem = {
  Fix: Add semicolon

Line 7416: Missing semicolon
  Content: const profileKey = `profile_${userType}_${AppState.currentUser.name}`;
  Fix: Add semicolon

Line 7417: Missing semicolon
  Content: const saved = localStorage.getItem(profileKey);
  Fix: Add semicolon

Line 7420: Missing semicolon
  Content: const profile = JSON.parse(saved);
  Fix: Add semicolon

Line 7425: Missing semicolon
  Content: const template = this.profiles && this.profiles[userType] && this.profiles[userType].template
  Fix: Add semicolon

Line 7436: Missing semicolon
  Content: const nameParts = (AppState.currentUser?.name || '').split(' ');
  Fix: Add semicolon

Line 7459: Missing semicolon
  Content: const profileKey = `profile_${userType}_${AppState.currentUser.name}`;
  Fix: Add semicolon

Line 7470: Missing semicolon
  Content: const savedCheck = localStorage.getItem(profileKey);
  Fix: Add semicolon

Line 7471: Missing semicolon
  Content: const parsedCheck = JSON.parse(savedCheck);
  Fix: Add semicolon

Line 7492: Missing semicolon
  Content: const profile = (incoming && typeof incoming === 'object')
  Fix: Add semicolon

Line 7497: Missing semicolon
  Content: const userName = AppState.currentUser?.name || '';
  Fix: Add semicolon

Line 7503: Missing semicolon
  Content: const avatarUrl = profile.media?.profilePhoto || profile.media?.societyLogo;
  Fix: Add semicolon

Line 7512: Missing semicolon
  Content: const homeClub = profile.golfInfo?.homeClub || 'Not Selected';
  Fix: Add semicolon

Line 7537: Missing semicolon
  Content: const el = document.querySelector('#profileModal #homeClub') ||
  Fix: Add semicolon

Line 7541: Missing semicolon
  Content: const opts = Array.from(el.options || []);
  Fix: Add semicolon

Line 7542: Missing semicolon
  Content: const byValue = opts.find(o => (o.value || '').trim() === slug);
  Fix: Add semicolon

Line 7543: Missing semicolon
  Content: const byData  = opts.find(o => (o.dataset.courseId || o.dataset.value || '').trim() === slug);
  Fix: Add semicolon

Line 7544: Missing semicolon
  Content: const pick = byValue || byData;
  Fix: Add semicolon

Line 7556: Missing semicolon
  Content: const el = document.querySelector(selector);
  Fix: Add semicolon

Line 7558: Missing semicolon
  Content: const obs = new MutationObserver(() => {
  Fix: Add semicolon

Line 7571: Missing semicolon
  Content: const userType = AppState.currentUser.role;
  Fix: Add semicolon

Line 7572: Missing semicolon
  Content: const profile = this.getCurrentProfile(userType);
  Fix: Add semicolon

Line 7574: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 7622: Missing semicolon
  Content: const currentProfile = this.getCurrentProfile(userType);
  Fix: Add semicolon

Line 7999: Missing semicolon
  Content: const profile = this.getCurrentProfile(AppState.currentUser.role);
  Fix: Add semicolon

Line 8002: Missing semicolon
  Content: const handicap = profile.golfInfo?.handicap || '18';
  Fix: Add semicolon

Line 8009: Missing semicolon
  Content: const memberSince = profile.golfInfo?.memberSince || new Date().toISOString().split('T')[0];
  Fix: Add semicolon

Line 8011: Missing semicolon
  Content: const year = new Date(memberSince).getFullYear();
  Fix: Add semicolon

Line 8016: Missing semicolon
  Content: const homeClub = profile.golfInfo?.homeClub || 'Not Selected';
  Fix: Add semicolon

Line 8022: Missing semicolon
  Content: const clubAffiliation = profile.golfInfo?.clubAffiliation;
  Fix: Add semicolon

Line 8023: Missing semicolon
  Content: const affiliationContainers = document.querySelectorAll('.club-affiliation-container, .club-affiliat
  Fix: Add semicolon

Line 8024: Missing semicolon
  Content: const affiliationElements = document.querySelectorAll('.club-affiliation');
  Fix: Add semicolon

Line 8040: Missing semicolon
  Content: const experienceLevel = profile.golfInfo?.experienceLevel || 'Intermediate';
  Fix: Add semicolon

Line 8074: Missing semicolon
  Content: const profileKey = `profile_${userType}_${AppState.currentUser.name}`;
  Fix: Add semicolon

Line 8088: Missing semicolon
  Content: const file = input.files[0];
  Fix: Add semicolon

Line 8104: Missing semicolon
  Content: const reader = new FileReader();
  Fix: Add semicolon

Line 8106: Missing semicolon
  Content: const preview = document.getElementById(previewId);
  Fix: Add semicolon

Line 8120: Missing semicolon
  Content: const profile = this.getCurrentProfile(userType);
  Fix: Add semicolon

Line 8125: Missing semicolon
  Content: const firstName = document.getElementById('firstName')?.value?.trim() || '';
  Fix: Add semicolon

Line 8126: Missing semicolon
  Content: const lastName = document.getElementById('lastName')?.value?.trim() || '';
  Fix: Add semicolon

Line 8129: Missing semicolon
  Content: const hasFirstName = firstName || profile.personalInfo?.firstName;
  Fix: Add semicolon

Line 8130: Missing semicolon
  Content: const hasLastName = lastName || profile.personalInfo?.lastName;
  Fix: Add semicolon

Line 8146: Missing semicolon
  Content: const handicap = document.getElementById('handicap')?.value?.trim() || '';
  Fix: Add semicolon

Line 8147: Missing semicolon
  Content: const memberSince = document.getElementById('memberSince')?.value || '';
  Fix: Add semicolon

Line 8149: Missing semicolon
  Content: const PLACEHOLDER_TEXTS = new Set([
  Fix: Add semicolon

Line 8154: Missing semicolon
  Content: const el = document.querySelector('#profileModal #homeClub') ||
  Fix: Add semicolon

Line 8168: Missing semicolon
  Content: const opt  = el.selectedOptions && el.selectedOptions[0];
  Fix: Add semicolon

Line 8169: Missing semicolon
  Content: const val  = (opt?.value || '').trim();
  Fix: Add semicolon

Line 8170: Missing semicolon
  Content: const data = (opt?.dataset?.courseId || opt?.dataset?.value || '').trim();
  Fix: Add semicolon

Line 8171: Missing semicolon
  Content: const text = (opt?.textContent || '').trim();
  Fix: Add semicolon

Line 8182: Missing semicolon
  Content: const result = val || data || '';
  Fix: Add semicolon

Line 8187: Missing semicolon
  Content: const homeClub = getHomeClubFromFormStrict();
  Fix: Add semicolon

Line 8199: Missing semicolon
  Content: const el = document.querySelector('#profileModal #homeClub') ||
  Fix: Add semicolon

Line 8224: Missing semicolon
  Content: const profilesArray = JSON.parse(localStorage.getItem('mcipro_user_profiles') || '[]');
  Fix: Add semicolon

Line 8225: Missing semicolon
  Content: const existingIndex = profilesArray.findIndex(p => p.name === `${profile.personalInfo.firstName} ${p
  Fix: Add semicolon

Line 8226: Missing semicolon
  Content: const profileForSync = {
  Fix: Add semicolon

Line 8254: Missing semicolon
  Content: const profilePhoto = document.getElementById('profilePhotoPreview')?.src;
  Fix: Add semicolon

Line 8282: Missing semicolon
  Content: const societyLogo = document.getElementById('profilePhotoPreview')?.src;
  Fix: Add semicolon

Line 8301: Missing semicolon
  Content: const successModal = document.createElement('div');
  Fix: Add semicolon

Line 8331: Missing semicolon
  Content: const ScheduleSystem = {
  Fix: Add semicolon

Line 8348: Missing semicolon
  Content: const savedSchedule = localStorage.getItem('mcipro_schedule');
  Fix: Add semicolon

Line 8382: Missing semicolon
  Content: const raw = localStorage.getItem("mcipro_schedule") || "[]";
  Fix: Add semicolon

Line 8383: Missing semicolon
  Content: const list = JSON.parse(raw);
  Fix: Add semicolon

Line 8389: Missing semicolon
  Content: const m = new Map();
  Fix: Add semicolon

Line 8391: Missing semicolon
  Content: const out = [...m.values()];
  Fix: Add semicolon

Line 8394: Missing semicolon
  Content: const scheduleData = {
  Fix: Add semicolon

Line 8408: Missing semicolon
  Content: const id = `sch_${bk.groupId}`;         // one event per round
  Fix: Add semicolon

Line 8409: Missing semicolon
  Content: const list = this.getList();
  Fix: Add semicolon

Line 8410: Missing semicolon
  Content: let evt = list.find(x => x.id === id);
  Fix: Add semicolon

Line 8439: Missing semicolon
  Content: const serviceName = bk.service || bk.serviceName || "service";
  Fix: Add semicolon

Line 8449: Missing semicolon
  Content: const bookings = JSON.parse(localStorage.getItem('mcipro_bookings') || '[]');
  Fix: Add semicolon

Line 8452: Missing semicolon
  Content: const now = Date.now();
  Fix: Add semicolon

Line 8455: Missing semicolon
  Content: const parseBookingDate = (booking) => {
  Fix: Add semicolon

Line 8456: Missing semicolon
  Content: const dateStr = booking.teeTime || booking.date;
  Fix: Add semicolon

Line 8470: Missing semicolon
  Content: const upcomingBookings = bookings.filter(b => {
  Fix: Add semicolon

Line 8472: Missing semicolon
  Content: const bookingTime = parseBookingDate(b);
  Fix: Add semicolon

Line 8476: Missing semicolon
  Content: const thisWeekBookings = upcomingBookings.filter(b => {
  Fix: Add semicolon

Line 8477: Missing semicolon
  Content: const bookingTime = parseBookingDate(b);
  Fix: Add semicolon

Line 8479: Missing semicolon
  Content: const nowD = new Date();
  Fix: Add semicolon

Line 8480: Missing semicolon
  Content: const startOfWeek = new Date(nowD); startOfWeek.setDate(nowD.getDate() - nowD.getDay());
  Fix: Add semicolon

Line 8481: Missing semicolon
  Content: const endOfWeek = new Date(startOfWeek); endOfWeek.setDate(startOfWeek.getDate() + 7);
  Fix: Add semicolon

Line 8486: Missing semicolon
  Content: const caddieBookings = bookings.filter(b => b.type === 'caddie' && b.status === 'confirmed');
  Fix: Add semicolon

Line 8488: Missing semicolon
  Content: const upcoming = upcomingBookings.length;
  Fix: Add semicolon

Line 8489: Missing semicolon
  Content: const thisWeek = thisWeekBookings.length;
  Fix: Add semicolon

Line 8490: Missing semicolon
  Content: const confirmedCaddies = caddieBookings.length;
  Fix: Add semicolon

Line 8497: Missing semicolon
  Content: const upcomingEl = document.getElementById('upcomingCount');
  Fix: Add semicolon

Line 8498: Missing semicolon
  Content: const thisWeekEl = document.getElementById('thisWeekCount');
  Fix: Add semicolon

Line 8499: Missing semicolon
  Content: const caddyEl = document.getElementById('caddyCount');
  Fix: Add semicolon

Line 8588: Missing semicolon
  Content: const event = {
  Fix: Add semicolon

Line 8602: Missing semicolon
  Content: const event = {
  Fix: Add semicolon

Line 8615: Missing semicolon
  Content: const booking = {
  Fix: Add semicolon

Line 8629: Missing semicolon
  Content: const waitlist = {
  Fix: Add semicolon

Line 8655: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 8656: Missing semicolon
  Content: const thisWeekEnd = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
  Fix: Add semicolon

Line 8658: Missing semicolon
  Content: const upcomingEvents = this.scheduleData.events.filter(e => new Date(e.date) > now).length;
  Fix: Add semicolon

Line 8659: Missing semicolon
  Content: const confirmedCaddys = this.scheduleData.caddieBookings.filter(c => c.status === 'confirmed').lengt
  Fix: Add semicolon

Line 8660: Missing semicolon
  Content: const waitlistCount = this.scheduleData.waitlists.length;
  Fix: Add semicolon

Line 8661: Missing semicolon
  Content: const thisWeekEvents = this.scheduleData.events.filter(e => {
  Fix: Add semicolon

Line 8662: Missing semicolon
  Content: const eventDate = new Date(e.date);
  Fix: Add semicolon

Line 8674: Missing semicolon
  Content: const container = document.getElementById('scheduleList');
  Fix: Add semicolon

Line 8675: Missing semicolon
  Content: const emptyState = document.getElementById('emptySchedule');
  Fix: Add semicolon

Line 8683: Missing semicolon
  Content: let allItems = [];
  Fix: Add semicolon

Line 8694: Missing semicolon
  Content: let filteredItems = this.filterItems(allItems);
  Fix: Add semicolon

Line 8715: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 8720: Missing semicolon
  Content: const itemDate = new Date(item.date || item.start || item.requestedDate || item.createdAt);
  Fix: Add semicolon

Line 8725: Missing semicolon
  Content: const itemDate = new Date(item.date || item.start || item.requestedDate || item.createdAt);
  Fix: Add semicolon

Line 8739: Missing semicolon
  Content: const date = new Date(item.date || item.start || item.requestedDate || item.createdAt);
  Fix: Add semicolon

Line 8740: Missing semicolon
  Content: const isToday = date.toDateString() === new Date().toDateString();
  Fix: Add semicolon

Line 8741: Missing semicolon
  Content: const isPast = date < new Date();
  Fix: Add semicolon

Line 8787: Missing semicolon
  Content: const caddiesHtml = item.caddies && item.caddies.length > 0
  Fix: Add semicolon

Line 8790: Missing semicolon
  Content: const servicesHtml = item.services && item.services.length > 0
  Fix: Add semicolon

Line 8832: Missing semicolon
  Content: const icons = {
  Fix: Add semicolon

Line 8841: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 8850: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 8893: Missing semicolon
  Content: let item = null;
  Fix: Add semicolon

Line 8894: Missing semicolon
  Content: let itemType = null;
  Fix: Add semicolon

Line 8918: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 9077: Missing semicolon
  Content: let item = null;
  Fix: Add semicolon

Line 9078: Missing semicolon
  Content: let itemArray = null;
  Fix: Add semicolon

Line 9127: Missing semicolon
  Content: const item = document.querySelector(`[data-id="${itemId}"]`);
  Fix: Add semicolon

Line 9130: Missing semicolon
  Content: const saveBtn = item.querySelector('button[onclick*="save"]');
  Fix: Add semicolon

Line 9156: Missing semicolon
  Content: const BookingManager = {
  Fix: Add semicolon

Line 9163: Missing semicolon
  Content: const savedBookings = localStorage.getItem('mcipro_bookings');
  Fix: Add semicolon

Line 9199: Missing semicolon
  Content: const loaded = this.loadFromStorage();
  Fix: Add semicolon

Line 9300: Missing semicolon
  Content: const waitlists = [];
  Fix: Add semicolon

Line 9302: Missing semicolon
  Content: const entry = list.find(w => w.golferId === golferId);
  Fix: Add semicolon

Line 9304: Missing semicolon
  Content: const caddie = CaddySystem.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 9322: Missing semicolon
  Content: const position = this.waitlists[caddieId].length + 1;
  Fix: Add semicolon

Line 9323: Missing semicolon
  Content: const waitlistEntry = {
  Fix: Add semicolon

Line 9333: Missing semicolon
  Content: const caddie = CaddySystem.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 9360: Missing semicolon
  Content: const bookingId = newBookingId(bookingData);
  Fix: Add semicolon

Line 9362: Missing semicolon
  Content: const booking = {
  Fix: Add semicolon

Line 9403: Missing semicolon
  Content: const booking = this.bookings.find(b => b.id === bookingId);
  Fix: Add semicolon

Line 9444: Missing semicolon
  Content: const uniqueBookings = [];
  Fix: Add semicolon

Line 9445: Missing semicolon
  Content: const seenKeys = new Set();
  Fix: Add semicolon

Line 9449: Missing semicolon
  Content: const key = `${booking.type}-${booking.course}-${booking.date}-${booking.time}-${booking.golferId}`;
  Fix: Add semicolon

Line 9459: Missing semicolon
  Content: const removedCount = this.bookings.length - uniqueBookings.length;
  Fix: Add semicolon

Line 9472: Missing semicolon
  Content: const count = this.bookings.length;
  Fix: Add semicolon

Line 9486: Missing semicolon
  Content: const caddie = CaddySystem.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 9493: Missing semicolon
  Content: const course = GolfCoursesDatabase.courses.find(c => c.homeClub === caddie.homeClub);
  Fix: Add semicolon

Line 9515: Missing semicolon
  Content: const cartSection = document.getElementById('bookingCartContainer');
  Fix: Add semicolon

Line 9532: Missing semicolon
  Content: const currentUser = AppState.currentUser;
  Fix: Add semicolon

Line 9538: Missing semicolon
  Content: const golferData = {
  Fix: Add semicolon

Line 9545: Missing semicolon
  Content: const waitlistEntry = BookingManager.addToWaitlist(caddieId, golferData);
  Fix: Add semicolon

Line 9563: Missing semicolon
  Content: const GolfCoursesDatabase = {
  Fix: Add semicolon

Line 9695: Missing semicolon
  Content: let selectedCourse = null;
  Fix: Add semicolon

Line 9696: Missing semicolon
  Content: let selectedCaddys = [];
  Fix: Add semicolon

Line 9697: Missing semicolon
  Content: let filteredCaddys = [];
  Fix: Add semicolon

Line 9704: Missing semicolon
  Content: const dateInput = document.getElementById('bookingDate');
  Fix: Add semicolon

Line 9706: Missing semicolon
  Content: const tomorrow = new Date();
  Fix: Add semicolon

Line 9717: Missing semicolon
  Content: const timeInput = document.getElementById('bookingTime');
  Fix: Add semicolon

Line 9724: Missing semicolon
  Content: const courseGrid = document.getElementById('courseGrid');
  Fix: Add semicolon

Line 9725: Missing semicolon
  Content: const courseGridMobile = document.getElementById('courseGridMobile');
  Fix: Add semicolon

Line 9727: Missing semicolon
  Content: const courses = GolfCoursesDatabase.courses;
  Fix: Add semicolon

Line 9813: Missing semicolon
  Content: const courseGrid = document.getElementById('courseGrid');
  Fix: Add semicolon

Line 9814: Missing semicolon
  Content: const courseGridMobile = document.getElementById('courseGridMobile');
  Fix: Add semicolon

Line 9816: Missing semicolon
  Content: const courses = GolfCoursesDatabase.searchCourses(query);
  Fix: Add semicolon

Line 9870: Missing semicolon
  Content: const selectedCard = document.querySelector(`[data-course=\"${courseId}\"]`);
  Fix: Add semicolon

Line 9879: Missing semicolon
  Content: const caddieSection = document.getElementById('caddieSelectionSection');
  Fix: Add semicolon

Line 9892: Missing semicolon
  Content: const selectedCourseInfo = document.getElementById('selectedCourseInfo');
  Fix: Add semicolon

Line 9893: Missing semicolon
  Content: const selectedCourseName = document.getElementById('selectedCourseName');
  Fix: Add semicolon

Line 9906: Missing semicolon
  Content: const courseCaddys = CaddySystem.allCaddys.filter(caddie => {
  Fix: Add semicolon

Line 9919: Missing semicolon
  Content: const caddieGrid = document.getElementById('caddieGrid');
  Fix: Add semicolon

Line 9920: Missing semicolon
  Content: const caddieGridMobile = document.getElementById('caddieGridMobile');
  Fix: Add semicolon

Line 9954: Missing semicolon
  Content: const isAvailable = caddie.availability === 'available';
  Fix: Add semicolon

Line 9955: Missing semicolon
  Content: const isBooked = caddie.availability === 'booked';
  Fix: Add semicolon

Line 10005: Missing semicolon
  Content: const isAvailable = caddie.availability === 'available';
  Fix: Add semicolon

Line 10006: Missing semicolon
  Content: const isBooked = caddie.availability === 'booked';
  Fix: Add semicolon

Line 10077: Missing semicolon
  Content: const filtered = filteredCaddys.filter(caddie =>
  Fix: Add semicolon

Line 10088: Missing semicolon
  Content: const availableCount = caddies.filter(c => c.availability === 'available').length;
  Fix: Add semicolon

Line 10089: Missing semicolon
  Content: const waitlistCount = caddies.filter(c => c.availability === 'booked').length;
  Fix: Add semicolon

Line 10091: Missing semicolon
  Content: const availableElement = document.getElementById('availableCaddyCount');
  Fix: Add semicolon

Line 10092: Missing semicolon
  Content: const waitlistElement = document.getElementById('waitlistCaddyCount');
  Fix: Add semicolon

Line 10112: Missing semicolon
  Content: const caddieCard = document.querySelector(`[data-caddie="${caddieId}"]`);
  Fix: Add semicolon

Line 10123: Missing semicolon
  Content: let bookingCart = {
  Fix: Add semicolon

Line 10151: Missing semicolon
  Content: const cartItem = {
  Fix: Add semicolon

Line 10163: Missing semicolon
  Content: const existing = bookingCart.caddies.find(c => c.id === caddie.id);
  Fix: Add semicolon

Line 10171: Missing semicolon
  Content: const existing = bookingCart.waitlists.find(w => w.id === caddie.id);
  Fix: Add semicolon

Line 10184: Missing semicolon
  Content: const serviceOptions = [
  Fix: Add semicolon

Line 10192: Missing semicolon
  Content: const service = serviceOptions.find(s => s.id === serviceId);
  Fix: Add semicolon

Line 10200: Missing semicolon
  Content: const existingIndex = bookingCart.services.findIndex(s => s.id === serviceId);
  Fix: Add semicolon

Line 10201: Missing semicolon
  Content: const serviceElements = document.querySelectorAll(`[data-service="${serviceId}"]`);
  Fix: Add semicolon

Line 10234: Missing semicolon
  Content: const container = document.getElementById('bookingCartContainer');
  Fix: Add semicolon

Line 10235: Missing semicolon
  Content: const itemCount = document.getElementById('cartItemCount');
  Fix: Add semicolon

Line 10236: Missing semicolon
  Content: const confirmBtn = document.getElementById('confirmBookingBtn');
  Fix: Add semicolon

Line 10240: Missing semicolon
  Content: const totalItems = bookingCart.caddies.length + bookingCart.waitlists.length + (bookingCart.course ?
  Fix: Add semicolon

Line 10262: Missing semicolon
  Content: let cartHTML = '';
  Fix: Add semicolon

Line 10288: Missing semicolon
  Content: const date = document.getElementById('bookingDate')?.value;
  Fix: Add semicolon

Line 10289: Missing semicolon
  Content: const time = document.getElementById('bookingTime')?.value;
  Fix: Add semicolon

Line 10387: Missing semicolon
  Content: const courseTotal = bookingCart.course ? bookingCart.course.price : 0;
  Fix: Add semicolon

Line 10388: Missing semicolon
  Content: const caddieTotal = bookingCart.caddies.reduce((total, caddie) => total + caddie.rate, 0);
  Fix: Add semicolon

Line 10389: Missing semicolon
  Content: const servicesTotal = bookingCart.services ? bookingCart.services.reduce((total, service) => total +
  Fix: Add semicolon

Line 10390: Missing semicolon
  Content: const subtotal = courseTotal + caddieTotal + servicesTotal;
  Fix: Add semicolon

Line 10391: Missing semicolon
  Content: const serviceCharge = Math.round(subtotal * 0.1);
  Fix: Add semicolon

Line 10392: Missing semicolon
  Content: const grandTotal = subtotal + serviceCharge;
  Fix: Add semicolon

Line 10415: Missing semicolon
  Content: const caddieSection = document.getElementById('caddieSelectionSection');
  Fix: Add semicolon

Line 10426: Missing semicolon
  Content: const selectedCourseInfo = document.getElementById('selectedCourseInfo');
  Fix: Add semicolon

Line 10476: Missing semicolon
  Content: const date = document.getElementById('bookingDate')?.value;
  Fix: Add semicolon

Line 10477: Missing semicolon
  Content: const time = document.getElementById('bookingTime')?.value;
  Fix: Add semicolon

Line 10478: Missing semicolon
  Content: const players = document.getElementById('playerCount')?.value || 1;
  Fix: Add semicolon

Line 10487: Missing semicolon
  Content: let currentUser = AppState.currentUser;
  Fix: Add semicolon

Line 10503: Missing semicolon
  Content: const teeTime = new Date(date + 'T' + time + ':00').toISOString();
  Fix: Add semicolon

Line 10504: Missing semicolon
  Content: const groupId = makeRoundGroupId({
  Fix: Add semicolon

Line 10511: Missing semicolon
  Content: const existingBookings = JSON.parse(localStorage.getItem('mcipro_bookings') || '[]');
  Fix: Add semicolon

Line 10512: Missing semicolon
  Content: const isDuplicate = existingBookings.some(booking =>
  Fix: Add semicolon

Line 10527: Missing semicolon
  Content: const mainBooking = {
  Fix: Add semicolon

Line 10554: Missing semicolon
  Content: const caddieBooking = {
  Fix: Add semicolon

Line 10573: Missing semicolon
  Content: const serviceBooking = {
  Fix: Add semicolon

Line 10630: Missing semicolon
  Content: const caddie = CaddySystem.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 10637: Missing semicolon
  Content: const caddie = CaddySystem.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 10651: Missing semicolon
  Content: const ChatSystem = {
  Fix: Add semicolon

Line 10948: Missing semicolon
  Content: const message = {
  Fix: Add semicolon

Line 10969: Missing semicolon
  Content: const message = {
  Fix: Add semicolon

Line 10983: Missing semicolon
  Content: const translations = {
  Fix: Add semicolon

Line 11009: Missing semicolon
  Content: const aTime = new Date(a.lastActivity || 0);
  Fix: Add semicolon

Line 11010: Missing semicolon
  Content: const bTime = new Date(b.lastActivity || 0);
  Fix: Add semicolon

Line 11021: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 11026: Missing semicolon
  Content: const isMobile = window.innerWidth <= 768;
  Fix: Add semicolon

Line 11206: Missing semicolon
  Content: const container = modal.querySelector('.chat-modal-container');
  Fix: Add semicolon

Line 11215: Missing semicolon
  Content: const categories = {
  Fix: Add semicolon

Line 11227: Missing semicolon
  Content: let html = '';
  Fix: Add semicolon

Line 11230: Missing semicolon
  Content: const rooms = this.getChatRoomsByCategory(categoryKey).filter(room =>
  Fix: Add semicolon

Line 11242: Missing semicolon
  Content: const lastMessage = room.messages && room.messages.length > 0
  Fix: Add semicolon

Line 11245: Missing semicolon
  Content: const messagePreview = lastMessage && lastMessage.content
  Fix: Add semicolon

Line 11280: Missing semicolon
  Content: const desktopSidebar = document.querySelector('.chat-modal-container .flex-1 .p-2');
  Fix: Add semicolon

Line 11286: Missing semicolon
  Content: const mobileSidebar = document.querySelector('#chatListView .flex-1');
  Fix: Add semicolon

Line 11294: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 11301: Missing semicolon
  Content: const header = document.getElementById('chatHeader');
  Fix: Add semicolon

Line 11329: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 11330: Missing semicolon
  Content: const messagesContainer = document.getElementById('chatMessages');
  Fix: Add semicolon

Line 11372: Missing semicolon
  Content: const input = document.getElementById('messageInput');
  Fix: Add semicolon

Line 11373: Missing semicolon
  Content: const text = input.value.trim();
  Fix: Add semicolon

Line 11386: Missing semicolon
  Content: const desktopTranslationDiv = document.getElementById(`translation_${messageId}`);
  Fix: Add semicolon

Line 11393: Missing semicolon
  Content: const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
  Fix: Add semicolon

Line 11396: Missing semicolon
  Content: const originalText = messageElement.querySelector('.original-text');
  Fix: Add semicolon

Line 11397: Missing semicolon
  Content: const translatedText = messageElement.querySelector('.translated-text');
  Fix: Add semicolon

Line 11398: Missing semicolon
  Content: const translateBtn = messageElement.querySelector('.translate-btn');
  Fix: Add semicolon

Line 11404: Missing semicolon
  Content: const originalTextContent = originalText.textContent;
  Fix: Add semicolon

Line 11405: Missing semicolon
  Content: const currentLang = currentLanguage || 'en';
  Fix: Add semicolon

Line 11408: Missing semicolon
  Content: let translation = '';
  Fix: Add semicolon

Line 11433: Missing semicolon
  Content: const translations = {
  Fix: Add semicolon

Line 11613: Missing semicolon
  Content: let translated = text.toLowerCase();
  Fix: Add semicolon

Line 11614: Missing semicolon
  Content: const langTranslations = translations[targetLang] || {};
  Fix: Add semicolon

Line 11618: Missing semicolon
  Content: const regex = new RegExp(`\\b${english.toLowerCase()}\\b`, 'gi');
  Fix: Add semicolon

Line 11741: Missing semicolon
  Content: const categories = {
  Fix: Add semicolon

Line 11753: Missing semicolon
  Content: let html = '';
  Fix: Add semicolon

Line 11756: Missing semicolon
  Content: const rooms = this.getChatRoomsByCategory(categoryKey).filter(room =>
  Fix: Add semicolon

Line 11770: Missing semicolon
  Content: const lastMessage = room.messages && room.messages.length > 0
  Fix: Add semicolon

Line 11773: Missing semicolon
  Content: const messagePreview = lastMessage && lastMessage.content
  Fix: Add semicolon

Line 11818: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 11825: Missing semicolon
  Content: const chatListView = document.getElementById('chatListView');
  Fix: Add semicolon

Line 11826: Missing semicolon
  Content: const chatRoomView = document.getElementById('chatRoomView');
  Fix: Add semicolon

Line 11835: Missing semicolon
  Content: const roomName = document.getElementById('mobileChatRoomName');
  Fix: Add semicolon

Line 11836: Missing semicolon
  Content: const roomMembers = document.getElementById('mobileChatRoomMembers');
  Fix: Add semicolon

Line 11847: Missing semicolon
  Content: const input = document.getElementById('mobileMessageInput');
  Fix: Add semicolon

Line 11857: Missing semicolon
  Content: const chatListView = document.getElementById('chatListView');
  Fix: Add semicolon

Line 11858: Missing semicolon
  Content: const chatRoomView = document.getElementById('chatRoomView');
  Fix: Add semicolon

Line 11870: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 11873: Missing semicolon
  Content: const messagesContainer = document.getElementById('mobileChatMessages');
  Fix: Add semicolon

Line 11917: Missing semicolon
  Content: const textarea = document.getElementById('mobileMessageInput');
  Fix: Add semicolon

Line 11925: Missing semicolon
  Content: const chatRoomView = document.getElementById('chatRoomView');
  Fix: Add semicolon

Line 11931: Missing semicolon
  Content: const chatMessages = document.getElementById('mobileChatMessages');
  Fix: Add semicolon

Line 11943: Missing semicolon
  Content: const chatRoomView = document.getElementById('chatRoomView');
  Fix: Add semicolon

Line 11961: Missing semicolon
  Content: const modal = document.getElementById('chatModal');
  Fix: Add semicolon

Line 11963: Missing semicolon
  Content: const isMobile = window.innerWidth <= 768;
  Fix: Add semicolon

Line 11964: Missing semicolon
  Content: const container = modal.querySelector('.chat-modal-container');
  Fix: Add semicolon

Line 11990: Missing semicolon
  Content: const vh = window.innerHeight * 0.01;
  Fix: Add semicolon

Line 11996: Missing semicolon
  Content: const vh = window.visualViewport.height * 0.01;
  Fix: Add semicolon

Line 12002: Missing semicolon
  Content: let touchStartY = 0;
  Fix: Add semicolon

Line 12003: Missing semicolon
  Content: let touchStartX = 0;
  Fix: Add semicolon

Line 12005: Missing semicolon
  Content: const chatRoomView = document.getElementById('chatRoomView');
  Fix: Add semicolon

Line 12013: Missing semicolon
  Content: const touchEndY = e.changedTouches[0].clientY;
  Fix: Add semicolon

Line 12014: Missing semicolon
  Content: const touchEndX = e.changedTouches[0].clientX;
  Fix: Add semicolon

Line 12015: Missing semicolon
  Content: const diffY = touchStartY - touchEndY;
  Fix: Add semicolon

Line 12016: Missing semicolon
  Content: const diffX = touchStartX - touchEndX;
  Fix: Add semicolon

Line 12026: Missing semicolon
  Content: const buttons = document.querySelectorAll('#chatRoomView button, #chatListView [onclick]');
  Fix: Add semicolon

Line 12049: Missing semicolon
  Content: const input = document.getElementById('mobileMessageInput');
  Fix: Add semicolon

Line 12052: Missing semicolon
  Content: const messageText = input.value.trim();
  Fix: Add semicolon

Line 12055: Missing semicolon
  Content: const room = this.chatRooms[this.currentRoom];
  Fix: Add semicolon

Line 12059: Missing semicolon
  Content: const message = {
  Fix: Add semicolon

Line 12086: Missing semicolon
  Content: const date = new Date(timestamp);
  Fix: Add semicolon

Line 12087: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 12088: Missing semicolon
  Content: const diffInMinutes = Math.floor((now - date) / (1000 * 60));
  Fix: Add semicolon

Line 12119: Missing semicolon
  Content: const lowerQuery = query.toLowerCase();
  Fix: Add semicolon

Line 12120: Missing semicolon
  Content: const results = Object.values(this.chatRooms).filter(room => {
  Fix: Add semicolon

Line 12131: Missing semicolon
  Content: const sidebarContainer = document.querySelector('.chat-modal-container .w-1/3 .flex-1 .p-2');
  Fix: Add semicolon

Line 12132: Missing semicolon
  Content: const mobileSidebarContainer = document.querySelector('#chatListView .flex-1');
  Fix: Add semicolon

Line 12134: Missing semicolon
  Content: const generateResultsHTML = (results) => {
  Fix: Add semicolon

Line 12140: Missing semicolon
  Content: const unreadCount = room.unreadCount || 0;
  Fix: Add semicolon

Line 12141: Missing semicolon
  Content: const lastMessage = room.messages && room.messages.length > 0
  Fix: Add semicolon

Line 12179: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 12183: Missing semicolon
  Content: const isMobile = window.innerWidth <= 768;
  Fix: Add semicolon

Line 12273: Missing semicolon
  Content: const allContacts = [
  Fix: Add semicolon

Line 12329: Missing semicolon
  Content: const directBtn = document.getElementById('directChatBtn');
  Fix: Add semicolon

Line 12330: Missing semicolon
  Content: const groupBtn = document.getElementById('groupChatBtn');
  Fix: Add semicolon

Line 12331: Missing semicolon
  Content: const selectedArea = document.getElementById('selectedContactsArea');
  Fix: Add semicolon

Line 12332: Missing semicolon
  Content: const groupNameArea = document.getElementById('groupNameArea');
  Fix: Add semicolon

Line 12333: Missing semicolon
  Content: const checkboxes = document.querySelectorAll('.contact-checkbox');
  Fix: Add semicolon

Line 12379: Missing semicolon
  Content: const selectedList = document.getElementById('selectedContactsList');
  Fix: Add semicolon

Line 12380: Missing semicolon
  Content: const selectedCount = document.getElementById('selectedCount');
  Fix: Add semicolon

Line 12402: Missing semicolon
  Content: const checkbox = document.getElementById(`contact_${contactId}`);
  Fix: Add semicolon

Line 12424: Missing semicolon
  Content: const createBtn = document.getElementById('createChatBtn');
  Fix: Add semicolon

Line 12425: Missing semicolon
  Content: const createBtnText = document.getElementById('createChatBtnText');
  Fix: Add semicolon

Line 12452: Missing semicolon
  Content: const contact = this.selectedContacts[0];
  Fix: Add semicolon

Line 12462: Missing semicolon
  Content: const groupName = document.getElementById('groupNameInput')?.value?.trim();
  Fix: Add semicolon

Line 12475: Missing semicolon
  Content: const roomId = `group_${Date.now()}`;
  Fix: Add semicolon

Line 12476: Missing semicolon
  Content: const members = [this.currentUser.id, ...this.selectedContacts.map(c => c.id)];
  Fix: Add semicolon

Line 12515: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12564: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12567: Missing semicolon
  Content: const request = room.joinRequests.find(req => req.id === requestId);
  Fix: Add semicolon

Line 12605: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12608: Missing semicolon
  Content: const request = room.joinRequests.find(req => req.id === requestId);
  Fix: Add semicolon

Line 12625: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12637: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 12687: Missing semicolon
  Content: const availableGroups = Object.values(this.chatRooms).filter(room =>
  Fix: Add semicolon

Line 12698: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 12722: Missing semicolon
  Content: const hasRequest = group.joinRequests && group.joinRequests.find(req => req.userId === this.currentU
  Fix: Add semicolon

Line 12760: Missing semicolon
  Content: const groupItems = document.querySelectorAll('.group-item');
  Fix: Add semicolon

Line 12761: Missing semicolon
  Content: const lowerQuery = query.toLowerCase();
  Fix: Add semicolon

Line 12764: Missing semicolon
  Content: const name = item.dataset.groupName;
  Fix: Add semicolon

Line 12765: Missing semicolon
  Content: const description = item.dataset.groupDescription;
  Fix: Add semicolon

Line 12782: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12785: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 12789: Missing semicolon
  Content: const isGroupAdmin = room.type === 'group' && room.admins && room.admins.includes(this.currentUser.i
  Fix: Add semicolon

Line 12790: Missing semicolon
  Content: const isGroupMember = room.type === 'group' && room.members && room.members.includes(this.currentUse
  Fix: Add semicolon

Line 12866: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12876: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12881: Missing semicolon
  Content: const membersList = room.members ? room.members.join(', ') : 'No members';
  Fix: Add semicolon

Line 12887: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12901: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12912: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 12939: Missing semicolon
  Content: const contactItems = document.querySelectorAll('.contact-item');
  Fix: Add semicolon

Line 12940: Missing semicolon
  Content: const lowerQuery = query.toLowerCase();
  Fix: Add semicolon

Line 12943: Missing semicolon
  Content: const name = item.dataset.contactName;
  Fix: Add semicolon

Line 12944: Missing semicolon
  Content: const role = item.dataset.contactRole;
  Fix: Add semicolon

Line 12957: Missing semicolon
  Content: const roomId = `dm_${this.currentUser.id}_${contactId}`;
  Fix: Add semicolon

Line 12989: Missing semicolon
  Content: const isMobile = window.innerWidth <= 768;
  Fix: Add semicolon

Line 13018: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 13035: Missing semicolon
  Content: const isMobile = window.innerWidth <= 768;
  Fix: Add semicolon

Line 13041: Missing semicolon
  Content: let chatView = document.getElementById('mobileChatView');
  Fix: Add semicolon

Line 13058: Missing semicolon
  Content: const chatWindow = document.getElementById(`chatWindow${windowNumber}`);
  Fix: Add semicolon

Line 13072: Missing semicolon
  Content: const menu = document.createElement('div');
  Fix: Add semicolon

Line 13078: Missing semicolon
  Content: const window1Room = this.currentRoom1 ? this.chatRooms[this.currentRoom1]?.name || 'Unknown' : 'Empt
  Fix: Add semicolon

Line 13079: Missing semicolon
  Content: const window2Room = this.currentRoom2 ? this.chatRooms[this.currentRoom2]?.name || 'Unknown' : 'Empt
  Fix: Add semicolon

Line 13121: Missing semicolon
  Content: const chatWindow = document.getElementById(`chatWindow${windowNumber}`);
  Fix: Add semicolon

Line 13144: Missing semicolon
  Content: const messages = room.messages || [];
  Fix: Add semicolon

Line 13193: Missing semicolon
  Content: const messages = room.messages || [];
  Fix: Add semicolon

Line 13242: Missing semicolon
  Content: const chatView = document.getElementById('mobileChatView');
  Fix: Add semicolon

Line 13248: Missing semicolon
  Content: const isOwn = message.senderId === this.currentUser.id;
  Fix: Add semicolon

Line 13262: Missing semicolon
  Content: const input = document.getElementById(inputId);
  Fix: Add semicolon

Line 13265: Missing semicolon
  Content: const content = input.value.trim();
  Fix: Add semicolon

Line 13276: Missing semicolon
  Content: const room = this.chatRooms[roomId];
  Fix: Add semicolon

Line 13279: Missing semicolon
  Content: const message = {
  Fix: Add semicolon

Line 13314: Missing semicolon
  Content: const lang = currentLanguage || 'en';
  Fix: Add semicolon

Line 13320: Missing semicolon
  Content: const totalUnread = this.getTotalUnreadCount();
  Fix: Add semicolon

Line 13321: Missing semicolon
  Content: const badges = document.querySelectorAll('#chatBadge');
  Fix: Add semicolon

Line 13335: Missing semicolon
  Content: let total = 0;
  Fix: Add semicolon

Line 13344: Missing semicolon
  Content: const CaddySystem = {
  Fix: Add semicolon

Line 13526: Missing semicolon
  Content: const shuffled = [...this.allCaddys].sort(() => 0.5 - Math.random());
  Fix: Add semicolon

Line 13529: Missing semicolon
  Content: const actualCourse = GolfCoursesDatabase.courses.find(c => c.homeClub === caddie.homeClub) ||
  Fix: Add semicolon

Line 13549: Missing semicolon
  Content: const waitlistEntry = {
  Fix: Add semicolon

Line 13561: Missing semicolon
  Content: const offerId = `offer-${caddieId}-${golferId}-${Date.now()}`;
  Fix: Add semicolon

Line 13562: Missing semicolon
  Content: const caddie = this.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 13585: Missing semicolon
  Content: const offer = this.activeOffers[offerId];
  Fix: Add semicolon

Line 13586: Missing semicolon
  Content: const caddie = this.allCaddys.find(c => c.id === offer.caddieId);
  Fix: Add semicolon

Line 13587: Missing semicolon
  Content: const course = GolfCourseDatabase.getCourseById(caddie.homeClub);
  Fix: Add semicolon

Line 13589: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 13654: Missing semicolon
  Content: const offer = this.activeOffers[offerId];
  Fix: Add semicolon

Line 13655: Missing semicolon
  Content: const countdownElement = document.getElementById(`countdown-${offerId}`);
  Fix: Add semicolon

Line 13657: Missing semicolon
  Content: const updateCountdown = () => {
  Fix: Add semicolon

Line 13658: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 13659: Missing semicolon
  Content: const timeLeft = offer.expiresAt - now;
  Fix: Add semicolon

Line 13666: Missing semicolon
  Content: const minutes = Math.floor(timeLeft / 60000);
  Fix: Add semicolon

Line 13667: Missing semicolon
  Content: const seconds = Math.floor((timeLeft % 60000) / 1000);
  Fix: Add semicolon

Line 13674: Missing semicolon
  Content: const interval = setInterval(updateCountdown, 1000);
  Fix: Add semicolon

Line 13680: Missing semicolon
  Content: const offer = this.activeOffers[offerId];
  Fix: Add semicolon

Line 13687: Missing semicolon
  Content: const currentUser = AppState.currentUser;
  Fix: Add semicolon

Line 13688: Missing semicolon
  Content: const newCaddie = this.allCaddys.find(c => c.id === offer.caddieId);
  Fix: Add semicolon

Line 13693: Missing semicolon
  Content: const existingCaddyIndex = bookingCart.caddies.findIndex(c =>
  Fix: Add semicolon

Line 13699: Missing semicolon
  Content: const previousCaddy = bookingCart.caddies[existingCaddyIndex];
  Fix: Add semicolon

Line 13703: Missing semicolon
  Content: const prevCaddieObj = this.allCaddys.find(c => c.id === previousCaddy.id);
  Fix: Add semicolon

Line 13749: Missing semicolon
  Content: const modal = document.getElementById(`offer-modal-${offerId}`);
  Fix: Add semicolon

Line 13768: Missing semicolon
  Content: const modal = document.getElementById(`offer-modal-${offerId}`);
  Fix: Add semicolon

Line 13783: Missing semicolon
  Content: const offer = this.activeOffers[offerId];
  Fix: Add semicolon

Line 13790: Missing semicolon
  Content: const modal = document.getElementById(`offer-modal-${offerId}`);
  Fix: Add semicolon

Line 13805: Missing semicolon
  Content: const offer = this.activeOffers[offerId];
  Fix: Add semicolon

Line 13812: Missing semicolon
  Content: const modal = document.getElementById(`offer-modal-${offerId}`);
  Fix: Add semicolon

Line 13834: Missing semicolon
  Content: const nextGolfer = this.waitlists[caddieId][0];
  Fix: Add semicolon

Line 13841: Missing semicolon
  Content: const caddie = this.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 13848: Missing semicolon
  Content: const course = GolfCourseDatabase.getCourseById(caddie.homeClub);
  Fix: Add semicolon

Line 13860: Missing semicolon
  Content: const courseElement = document.querySelector(`[data-course="${caddie.homeClub}"]`);
  Fix: Add semicolon

Line 13877: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 13952: Missing semicolon
  Content: const caddie = this.allCaddys.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 13986: Missing semicolon
  Content: const BookingSystem = {
  Fix: Add semicolon

Line 14026: Missing semicolon
  Content: const booking = this.currentBooking;
  Fix: Add semicolon

Line 14027: Missing semicolon
  Content: const summaryContainer = document.getElementById('bookingSummary');
  Fix: Add semicolon

Line 14028: Missing semicolon
  Content: const totalContainer = document.getElementById('bookingTotal');
  Fix: Add semicolon

Line 14038: Missing semicolon
  Content: let total = 0;
  Fix: Add semicolon

Line 14039: Missing semicolon
  Content: const coursePrice = { championship: 2500, executive: 1800, practice: 1200 }[booking.course] || 0;
  Fix: Add semicolon

Line 14086: Missing semicolon
  Content: const courseMap = {
  Fix: Add semicolon

Line 14091: Missing semicolon
  Content: const courseId = courseMap[courseType] || 'pattaya-golf-club';
  Fix: Add semicolon

Line 14096: Missing semicolon
  Content: const caddie = BookingSystem.caddieDatabase.find(c => c.id === caddieId);
  Fix: Add semicolon

Line 14107: Missing semicolon
  Content: const course = GolfCourseDatabase.getCourseById(caddie.homeClub);
  Fix: Add semicolon

Line 14112: Missing semicolon
  Content: const existingIndex = BookingSystem.currentBooking.caddies.findIndex(c => c.id === caddieId);
  Fix: Add semicolon

Line 14113: Missing semicolon
  Content: const caddieElement = document.querySelector(`[data-caddie="${caddieId}"]`);
  Fix: Add semicolon

Line 14133: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 14183: Missing semicolon
  Content: const golferInfo = {
  Fix: Add semicolon

Line 14188: Missing semicolon
  Content: const position = CaddySystem.addToWaitlist(caddieId, golferInfo.id, golferInfo);
  Fix: Add semicolon

Line 14193: Missing semicolon
  Content: const confirmationModal = document.createElement('div');
  Fix: Add semicolon

Line 14222: Missing semicolon
  Content: const promotionalCaddys = CaddySystem.getRandomPromotionalCaddys(4);
  Fix: Add semicolon

Line 14223: Missing semicolon
  Content: const mobileContainer = document.getElementById('promotionalCaddysContainer');
  Fix: Add semicolon

Line 14224: Missing semicolon
  Content: const desktopContainer = document.getElementById('promotionalCaddysDesktop');
  Fix: Add semicolon

Line 14227: Missing semicolon
  Content: const generateCaddyCard = (caddie, isMobile = false) => `
  Fix: Add semicolon

Line 14309: Missing semicolon
  Content: const mobileContainer = document.getElementById('promotionalCaddysContainer');
  Fix: Add semicolon

Line 14310: Missing semicolon
  Content: const desktopContainer = document.getElementById('promotionalCaddysDesktop');
  Fix: Add semicolon

Line 14313: Missing semicolon
  Content: const loadingHTML = `
  Fix: Add semicolon

Line 14338: Missing semicolon
  Content: const bookedCaddys = CaddySystem.allCaddys.filter(c => c.availability === 'booked');
  Fix: Add semicolon

Line 14340: Missing semicolon
  Content: const randomCaddy = bookedCaddys[0];
  Fix: Add semicolon

Line 14351: Missing semicolon
  Content: const service = BookingSystem.serviceOptions.find(s => s.id === serviceId);
  Fix: Add semicolon

Line 14354: Missing semicolon
  Content: const existingIndex = BookingSystem.currentBooking.services.findIndex(s => s.id === serviceId);
  Fix: Add semicolon

Line 14355: Missing semicolon
  Content: const serviceElement = document.querySelector(`[data-service="${serviceId}"]`);
  Fix: Add semicolon

Line 14386: Missing semicolon
  Content: const selectedOption = document.querySelector(`[data-payment="${method}"]`);
  Fix: Add semicolon

Line 14418: Missing semicolon
  Content: const booking = BookingSystem.currentBooking;
  Fix: Add semicolon

Line 14437: Missing semicolon
  Content: const bookingId = 'MCP' + Date.now().toString().slice(-6);
  Fix: Add semicolon

Line 14453: Missing semicolon
  Content: let googleMap = null;
  Fix: Add semicolon

Line 14454: Missing semicolon
  Content: let playerMarker = null;
  Fix: Add semicolon

Line 14455: Missing semicolon
  Content: let holeMarkers = [];
  Fix: Add semicolon

Line 14456: Missing semicolon
  Content: let currentMapType = 'satellite';
  Fix: Add semicolon

Line 14458: Missing semicolon
  Content: const GPSNavigationSystem = {
  Fix: Add semicolon

Line 14536: Missing semicolon
  Content: let errorMessage = 'Unable to get your location. ';
  Fix: Add semicolon

Line 14569: Missing semicolon
  Content: const trackingOptions = {
  Fix: Add semicolon

Line 14575: Missing semicolon
  Content: const trackingId = navigator.geolocation.watchPosition(
  Fix: Add semicolon

Line 14610: Missing semicolon
  Content: const currentPos = GPSNavigationSystem.currentPosition;
  Fix: Add semicolon

Line 14611: Missing semicolon
  Content: let closestHole = 1;
  Fix: Add semicolon

Line 14612: Missing semicolon
  Content: let minDistance = Infinity;
  Fix: Add semicolon

Line 14615: Missing semicolon
  Content: const distance = calculateDistance(
  Fix: Add semicolon

Line 14636: Missing semicolon
  Content: const currentHole = GPSNavigationSystem.courseData.holes.find(h => h.number === GPSNavigationSystem.
  Fix: Add semicolon

Line 14639: Missing semicolon
  Content: const pos = GPSNavigationSystem.currentPosition;
  Fix: Add semicolon

Line 14640: Missing semicolon
  Content: const distanceToPin = calculateDistance(pos.lat, pos.lng, currentHole.pin.lat, currentHole.pin.lng);
  Fix: Add semicolon

Line 14651: Missing semicolon
  Content: const R = 6371000;
  Fix: Add semicolon

Line 14652: Missing semicolon
  Content: const dLat = (lat2 - lat1) * Math.PI / 180;
  Fix: Add semicolon

Line 14653: Missing semicolon
  Content: const dLng = (lng2 - lng1) * Math.PI / 180;
  Fix: Add semicolon

Line 14654: Missing semicolon
  Content: const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
  Fix: Add semicolon

Line 14657: Missing semicolon
  Content: const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  Fix: Add semicolon

Line 14658: Missing semicolon
  Content: const distance = R * c;
  Fix: Add semicolon

Line 14663: Missing semicolon
  Content: const currentHole = GPSNavigationSystem.currentHole || 1;
  Fix: Add semicolon

Line 14664: Missing semicolon
  Content: const totalHoles = 18;
  Fix: Add semicolon

Line 14665: Missing semicolon
  Content: const progress = (currentHole / totalHoles) * 100;
  Fix: Add semicolon

Line 14668: Missing semicolon
  Content: const expectedMinutesPerHole = (4.5 * 60) / 18; // 15 minutes per hole
  Fix: Add semicolon

Line 14669: Missing semicolon
  Content: const expectedElapsedMinutes = currentHole * expectedMinutesPerHole;
  Fix: Add semicolon

Line 14672: Missing semicolon
  Content: const roundStartTime = GPSNavigationSystem.roundStartTime || new Date();
  Fix: Add semicolon

Line 14673: Missing semicolon
  Content: const actualElapsedMinutes = (new Date() - roundStartTime) / (1000 * 60);
  Fix: Add semicolon

Line 14676: Missing semicolon
  Content: let paceStatus = 'On Time';
  Fix: Add semicolon

Line 14677: Missing semicolon
  Content: let paceColor = 'green';
  Fix: Add semicolon

Line 14688: Missing semicolon
  Content: const paceElements = document.querySelectorAll('.pace-status');
  Fix: Add semicolon

Line 14697: Missing semicolon
  Content: const progressBars = document.querySelectorAll('.pace-progress');
  Fix: Add semicolon

Line 14706: Missing semicolon
  Content: const elapsedElements = document.querySelectorAll('.elapsed-time');
  Fix: Add semicolon

Line 14709: Missing semicolon
  Content: const hours = Math.floor(actualElapsedMinutes / 60);
  Fix: Add semicolon

Line 14710: Missing semicolon
  Content: const minutes = Math.floor(actualElapsedMinutes % 60);
  Fix: Add semicolon

Line 14717: Missing semicolon
  Content: const pos = GPSNavigationSystem.currentPosition;
  Fix: Add semicolon

Line 14720: Missing semicolon
  Content: const elements = {
  Fix: Add semicolon

Line 14728: Missing semicolon
  Content: const element = document.getElementById(id);
  Fix: Add semicolon

Line 14734: Missing semicolon
  Content: const currentHole = GPSNavigationSystem.courseData.holes.find(h => h.number === GPSNavigationSystem.
  Fix: Add semicolon

Line 14737: Missing semicolon
  Content: const elements = {
  Fix: Add semicolon

Line 14745: Missing semicolon
  Content: const element = document.getElementById(id);
  Fix: Add semicolon

Line 14753: Missing semicolon
  Content: const elements = {
  Fix: Add semicolon

Line 14762: Missing semicolon
  Content: const element = document.getElementById(id);
  Fix: Add semicolon

Line 14768: Missing semicolon
  Content: const layoutContainer = document.getElementById('holeLayoutContainer');
  Fix: Add semicolon

Line 14771: Missing semicolon
  Content: const hole = GPSNavigationSystem.courseData.holes.find(h => h.number === GPSNavigationSystem.current
  Fix: Add semicolon

Line 14805: Missing semicolon
  Content: const weather = GPSNavigationSystem.weatherConditions;
  Fix: Add semicolon

Line 14837: Missing semicolon
  Content: const dateInput = document.getElementById('bookingDate');
  Fix: Add semicolon

Line 14839: Missing semicolon
  Content: const tomorrow = new Date();
  Fix: Add semicolon

Line 14863: Missing semicolon
  Content: const element = document.getElementById(id);
  Fix: Add semicolon

Line 14880: Missing semicolon
  Content: const selectedCourse = document.querySelector('.course-option.border-primary-500');
  Fix: Add semicolon

Line 14881: Missing semicolon
  Content: const date = document.getElementById('bookingDate')?.value;
  Fix: Add semicolon

Line 14882: Missing semicolon
  Content: const time = document.getElementById('bookingTime')?.value;
  Fix: Add semicolon

Line 14883: Missing semicolon
  Content: const players = document.getElementById('playerCount')?.value;
  Fix: Add semicolon

Line 14885: Missing semicolon
  Content: const summaryContainer = document.getElementById('bookingSummary');
  Fix: Add semicolon

Line 14886: Missing semicolon
  Content: const totalContainer = document.getElementById('bookingTotal');
  Fix: Add semicolon

Line 14896: Missing semicolon
  Content: const courseName = selectedCourse.querySelector('h4').textContent;
  Fix: Add semicolon

Line 14897: Missing semicolon
  Content: const coursePrice = parseInt(selectedCourse.querySelector('.text-primary-600').textContent.replace('
  Fix: Add semicolon

Line 14898: Missing semicolon
  Content: const total = coursePrice * parseInt(players);
  Fix: Add semicolon

Line 14900: Missing semicolon
  Content: const formattedDate = new Date(date).toLocaleDateString('en-US', {
  Fix: Add semicolon

Line 14935: Missing semicolon
  Content: let proshopCart = [];
  Fix: Add semicolon

Line 14939: Missing semicolon
  Content: const existingItem = proshopCart.find(item => item.sku === sku);
  Fix: Add semicolon

Line 14966: Missing semicolon
  Content: const item = proshopCart.find(item => item.sku === sku);
  Fix: Add semicolon

Line 14978: Missing semicolon
  Content: const cartItemsContainer = document.getElementById('cart-items');
  Fix: Add semicolon

Line 14979: Missing semicolon
  Content: const subtotalEl = document.getElementById('cart-subtotal');
  Fix: Add semicolon

Line 14980: Missing semicolon
  Content: const taxEl = document.getElementById('cart-tax');
  Fix: Add semicolon

Line 14981: Missing semicolon
  Content: const totalEl = document.getElementById('cart-total');
  Fix: Add semicolon

Line 14997: Missing semicolon
  Content: const cartHtml = proshopCart.map(item => `
  Fix: Add semicolon

Line 15019: Missing semicolon
  Content: const subtotal = proshopCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  Fix: Add semicolon

Line 15020: Missing semicolon
  Content: const tax = subtotal * 0.07; // 7% tax
  Fix: Add semicolon

Line 15021: Missing semicolon
  Content: const total = subtotal + tax;
  Fix: Add semicolon

Line 15047: Missing semicolon
  Content: const subtotal = proshopCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  Fix: Add semicolon

Line 15048: Missing semicolon
  Content: const tax = subtotal * 0.07;
  Fix: Add semicolon

Line 15049: Missing semicolon
  Content: const total = subtotal + tax;
  Fix: Add semicolon

Line 15050: Missing semicolon
  Content: const transactionId = 'TXN' + Date.now();
  Fix: Add semicolon

Line 15053: Missing semicolon
  Content: const paymentModal = document.createElement('div');
  Fix: Add semicolon

Line 15113: Missing semicolon
  Content: const modal = document.querySelector('.modal-overlay');
  Fix: Add semicolon

Line 15121: Missing semicolon
  Content: const products = document.querySelectorAll('.product-card');
  Fix: Add semicolon

Line 15122: Missing semicolon
  Content: const tabs = document.querySelectorAll('.category-tab');
  Fix: Add semicolon

Line 15140: Missing semicolon
  Content: const categoryTabs = document.querySelectorAll('.category-tab');
  Fix: Add semicolon

Line 15146: Missing semicolon
  Content: const searchInput = document.getElementById('product-search');
  Fix: Add semicolon

Line 15149: Missing semicolon
  Content: const searchTerm = e.target.value.toLowerCase();
  Fix: Add semicolon

Line 15150: Missing semicolon
  Content: const products = document.querySelectorAll('.product-card');
  Fix: Add semicolon

Line 15153: Missing semicolon
  Content: const productName = product.querySelector('h4').textContent.toLowerCase();
  Fix: Add semicolon

Line 15167: Missing semicolon
  Content: const MaintenanceSystem = {
  Fix: Add semicolon

Line 15173: Missing semicolon
  Content: const courseSection = document.getElementById('courseSection')?.value;
  Fix: Add semicolon

Line 15174: Missing semicolon
  Content: const holeSelect = document.getElementById('holeNumber');
  Fix: Add semicolon

Line 15181: Missing semicolon
  Content: for (let i = 1; i <= 9; i++) {
  Fix: Add semicolon

Line 15185: Missing semicolon
  Content: for (let i = 10; i <= 18; i++) {
  Fix: Add semicolon

Line 15199: Missing semicolon
  Content: const previewContainer = document.getElementById('photoPreview');
  Fix: Add semicolon

Line 15204: Missing semicolon
  Content: const reader = new FileReader();
  Fix: Add semicolon

Line 15206: Missing semicolon
  Content: const photoId = Date.now() + '_' + index;
  Fix: Add semicolon

Line 15214: Missing semicolon
  Content: const photoDiv = document.createElement('div');
  Fix: Add semicolon

Line 15237: Missing semicolon
  Content: const previewContainer = document.getElementById('photoPreview');
  Fix: Add semicolon

Line 15242: Missing semicolon
  Content: const photoDiv = document.createElement('div');
  Fix: Add semicolon

Line 15261: Missing semicolon
  Content: const courseSection = document.getElementById('courseSection')?.value;
  Fix: Add semicolon

Line 15262: Missing semicolon
  Content: const holeNumber = document.getElementById('holeNumber')?.value;
  Fix: Add semicolon

Line 15263: Missing semicolon
  Content: const areaType = document.getElementById('areaType')?.value;
  Fix: Add semicolon

Line 15264: Missing semicolon
  Content: const issuePriority = document.getElementById('issuePriority')?.value;
  Fix: Add semicolon

Line 15265: Missing semicolon
  Content: const issueDescription = document.getElementById('issueDescription')?.value;
  Fix: Add semicolon

Line 15272: Missing semicolon
  Content: const update = {
  Fix: Add semicolon

Line 15299: Missing semicolon
  Content: const message = {
  Fix: Add semicolon

Line 15335: Missing semicolon
  Content: const container = document.getElementById('recentUpdates');
  Fix: Add semicolon

Line 15390: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 15416: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 15426: Missing semicolon
  Content: const colors = {
  Fix: Add semicolon

Line 15436: Missing semicolon
  Content: const icons = {
  Fix: Add semicolon

Line 15449: Missing semicolon
  Content: const date = new Date(timestamp);
  Fix: Add semicolon

Line 15450: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 15451: Missing semicolon
  Content: const diffMs = now - date;
  Fix: Add semicolon

Line 15452: Missing semicolon
  Content: const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  Fix: Add semicolon

Line 15453: Missing semicolon
  Content: const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  Fix: Add semicolon

Line 15460: Missing semicolon
  Content: const diffMins = Math.floor(diffMs / (1000 * 60));
  Fix: Add semicolon

Line 15507: Missing semicolon
  Content: const courseSelect = document.getElementById('courseSection');
  Fix: Add semicolon

Line 15523: Missing semicolon
  Content: const ningCaddy = CaddySystem.allCaddys.find(c => c.id === 'pat001');
  Fix: Add semicolon

Line 15531: Missing semicolon
  Content: const waitlistPosition = EnhancedBookingManager.waitlists['pat001']?.length + 1 || 1;
  Fix: Add semicolon

Line 15532: Missing semicolon
  Content: const confirmJoin = confirm(`Ning Prasert is currently booked until 13:00 today.
  Fix: Add semicolon

Line 15540: Missing semicolon
  Content: const golferName = prompt('Enter your name for the waitlist:') || AppState.currentUser.name;
  Fix: Add semicolon

Line 15557: Missing semicolon
  Content: const ningCaddy = CaddySystem.allCaddys.find(c => c.id === 'pat001');
  Fix: Add semicolon

Line 15558: Missing semicolon
  Content: const waitlist = EnhancedBookingManager.waitlists['pat001'] || [];
  Fix: Add semicolon

Line 15560: Missing semicolon
  Content: let statusMessage = `🏌️ Ning Prasert - Pattana Golf Resort
  Fix: Add semicolon

Line 15589: Missing semicolon
  Content: const EnhancedBookingManager = {
  Fix: Add semicolon

Line 15634: Missing semicolon
  Content: const caddieNames = {
  Fix: Add semicolon

Line 15642: Missing semicolon
  Content: const existingWaitlist = this.waitlists[caddieId].find(w => w.golferName === AppState.currentUser.na
  Fix: Add semicolon

Line 15649: Missing semicolon
  Content: const waitlistEntry = {
  Fix: Add semicolon

Line 15665: Missing semicolon
  Content: const waitlist = this.waitlists[caddieId];
  Fix: Add semicolon

Line 15666: Missing semicolon
  Content: const card = document.querySelector(`[data-caddie="${caddieId}"]`);
  Fix: Add semicolon

Line 15669: Missing semicolon
  Content: let waitlistInfo = card.querySelector('.waitlist-info');
  Fix: Add semicolon

Line 15682: Missing semicolon
  Content: const booking = this.bookings.find(b => b.id === bookingId);
  Fix: Add semicolon

Line 15685: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 15728: Missing semicolon
  Content: const booking = this.bookings.find(b => b.id === bookingId);
  Fix: Add semicolon

Line 15753: Missing semicolon
  Content: const booking = this.bookings.find(b => b.id === bookingId);
  Fix: Add semicolon

Line 15756: Missing semicolon
  Content: const confirmMsg = `Are you sure you want to cancel this ${booking.type === 'tee_time' ? 'tee time' 
  Fix: Add semicolon

Line 15780: Missing semicolon
  Content: const waitlist = this.waitlists[caddieId];
  Fix: Add semicolon

Line 15782: Missing semicolon
  Content: const nextPerson = waitlist.shift(); // Remove first person
  Fix: Add semicolon

Line 15801: Missing semicolon
  Content: const golferWaitlists = [];
  Fix: Add semicolon

Line 15803: Missing semicolon
  Content: const waitlistEntry = this.waitlists[caddieId].find(w => w.golferName === AppState.currentUser.name)
  Fix: Add semicolon

Line 15805: Missing semicolon
  Content: const caddieNames = {
  Fix: Add semicolon

Line 15824: Missing semicolon
  Content: const bookings = this.bookings.filter(b => b.caddieId === caddieId);
  Fix: Add semicolon

Line 15825: Missing semicolon
  Content: const waitlist = this.waitlists[caddieId] || [];
  Fix: Add semicolon

Line 15853: Missing semicolon
  Content: const audio = new Audio('/assets/sounds/emergency-siren.mp3');
  Fix: Add semicolon

Line 15864: Missing semicolon
  Content: const Ctx = window.AudioContext || window.webkitAudioContext;
  Fix: Add semicolon

Line 15865: Missing semicolon
  Content: const ctx = new Ctx();
  Fix: Add semicolon

Line 15866: Missing semicolon
  Content: const osc = ctx.createOscillator();
  Fix: Add semicolon

Line 15867: Missing semicolon
  Content: const gain = ctx.createGain();
  Fix: Add semicolon

Line 21028: Missing semicolon
  Content: const GolfScoreSystem = {
  Fix: Add semicolon

Line 21032: Missing semicolon
  Content: const newScore = {
  Fix: Add semicolon

Line 21061: Missing semicolon
  Content: const differential = (score - courseRating) * 113 / slopeRating;
  Fix: Add semicolon

Line 21067: Missing semicolon
  Content: const validScores = this.scores.filter(s => s.holes === 18 && s.differential !== null);
  Fix: Add semicolon

Line 21074: Missing semicolon
  Content: const sortedDifferentials = validScores
  Fix: Add semicolon

Line 21079: Missing semicolon
  Content: const numScores = sortedDifferentials.length;
  Fix: Add semicolon

Line 21083: Missing semicolon
  Content: const recent20 = sortedDifferentials.slice(0, 20);
  Fix: Add semicolon

Line 21084: Missing semicolon
  Content: const best8 = recent20.slice(0, 8);
  Fix: Add semicolon

Line 21088: Missing semicolon
  Content: const numToUse = Math.floor(numScores / 4) || 1;
  Fix: Add semicolon

Line 21089: Missing semicolon
  Content: const bestScores = sortedDifferentials.slice(0, Math.max(1, numToUse));
  Fix: Add semicolon

Line 21103: Missing semicolon
  Content: const whsHandicap = this.calculateHandicapIndex();
  Fix: Add semicolon

Line 21104: Missing semicolon
  Content: const handicapElements = document.querySelectorAll('.user-handicap');
  Fix: Add semicolon

Line 21116: Missing semicolon
  Content: const validScores = this.scores.filter(s => s.holes === 18);
  Fix: Add semicolon

Line 21117: Missing semicolon
  Content: const avgScoreElements = document.querySelectorAll('#golfer-stats .metric-value');
  Fix: Add semicolon

Line 21120: Missing semicolon
  Content: const average = validScores.reduce((sum, s) => sum + s.score, 0) / validScores.length;
  Fix: Add semicolon

Line 21127: Missing semicolon
  Content: const bestScore = Math.min(...validScores.map(s => s.score));
  Fix: Add semicolon

Line 21144: Missing semicolon
  Content: const container = document.querySelector('#golfer-stats .space-y-3');
  Fix: Add semicolon

Line 21148: Missing semicolon
  Content: const demoRounds = container.children.length;
  Fix: Add semicolon

Line 21152: Missing semicolon
  Content: const roundElement = this.createRoundElement(score);
  Fix: Add semicolon

Line 21162: Missing semicolon
  Content: const div = document.createElement('div');
  Fix: Add semicolon

Line 21165: Missing semicolon
  Content: const par = score.holes === 18 ? 72 : 36;
  Fix: Add semicolon

Line 21166: Missing semicolon
  Content: const scoreToPar = score.score - par;
  Fix: Add semicolon

Line 21167: Missing semicolon
  Content: const parDisplay = scoreToPar === 0 ? 'Par' :
  Fix: Add semicolon

Line 21169: Missing semicolon
  Content: const parColor = scoreToPar === 0 ? 'text-yellow-600' :
  Fix: Add semicolon

Line 21172: Missing semicolon
  Content: const formattedDate = new Date(score.date).toLocaleDateString('en-US', {
  Fix: Add semicolon

Line 21177: Missing semicolon
  Content: const differentialDisplay = score.differential !== null ?
  Fix: Add semicolon

Line 21223: Missing semicolon
  Content: const courseName = document.getElementById('courseName').value.trim();
  Fix: Add semicolon

Line 21224: Missing semicolon
  Content: const scoreValue = document.getElementById('scoreValue').value;
  Fix: Add semicolon

Line 21225: Missing semicolon
  Content: const holesPlayed = document.getElementById('holesPlayed').value;
  Fix: Add semicolon

Line 21226: Missing semicolon
  Content: const courseRating = document.getElementById('courseRating').value;
  Fix: Add semicolon

Line 21227: Missing semicolon
  Content: const slopeRating = document.getElementById('slopeRating').value;
  Fix: Add semicolon

Line 21228: Missing semicolon
  Content: const datePlayed = document.getElementById('datePlayed').value;
  Fix: Add semicolon

Line 21229: Missing semicolon
  Content: const scoreNotes = document.getElementById('scoreNotes').value.trim();
  Fix: Add semicolon

Line 21236: Missing semicolon
  Content: const score = parseInt(scoreValue);
  Fix: Add semicolon

Line 21266: Missing semicolon
  Content: const successDiv = document.createElement('div');
  Fix: Add semicolon

Line 21294: Missing semicolon
  Content: const modal = document.createElement('div');
  Fix: Add semicolon

Line 21489: Missing semicolon
  Content: const teeIcon = L.divIcon({
  Fix: Add semicolon

Line 21496: Missing semicolon
  Content: const teeMarker = L.marker([hole.teeBox.lat, hole.teeBox.lng], { icon: teeIcon })
  Fix: Add semicolon

Line 21507: Missing semicolon
  Content: const pinIcon = L.divIcon({
  Fix: Add semicolon

Line 21514: Missing semicolon
  Content: const pinMarker = L.marker([hole.pin.lat, hole.pin.lng], { icon: pinIcon })
  Fix: Add semicolon

Line 21523: Missing semicolon
  Content: const playerPos = [position.lat, position.lng];
  Fix: Add semicolon

Line 21529: Missing semicolon
  Content: const playerIcon = L.divIcon({
  Fix: Add semicolon

Line 21542: Missing semicolon
  Content: const style = document.createElement('style');
  Fix: Add semicolon

Line 21565: Missing semicolon
  Content: let closestHole = null;
  Fix: Add semicolon

Line 21566: Missing semicolon
  Content: let minDistance = Infinity;
  Fix: Add semicolon

Line 21570: Missing semicolon
  Content: const distanceToPin = googleMap.distance(
  Fix: Add semicolon

Line 21586: Missing semicolon
  Content: const distanceInYards = Math.round(minDistance * 1.09361);
  Fix: Add semicolon

Line 21633: Missing semicolon
  Content: const CaddyTrackingSystem = {
  Fix: Add semicolon

Line 21668: Missing semicolon
  Content: const endTime = new Date();
  Fix: Add semicolon

Line 21669: Missing semicolon
  Content: const totalTime = this.formatTime(Math.floor((endTime - this.startTime) / 1000));
  Fix: Add semicolon

Line 21748: Missing semicolon
  Content: const elapsed = Math.floor((new Date() - this.startTime) / 1000);
  Fix: Add semicolon

Line 21749: Missing semicolon
  Content: const estimatedHole = Math.min(Math.floor(elapsed / 720) + 1, 18); // 12 min per hole
  Fix: Add semicolon

Line 21755: Missing semicolon
  Content: const mainHoleElement = document.getElementById('currentHoleTracking');
  Fix: Add semicolon

Line 21761: Missing semicolon
  Content: const liveHoleElement = document.getElementById('caddieCurrentHole');
  Fix: Add semicolon

Line 21774: Missing semicolon
  Content: const trackingStatus = document.querySelector('#caddie-tracking .bg-white span');
  Fix: Add semicolon

Line 21780: Missing semicolon
  Content: const liveHoleElement = document.getElementById('caddieCurrentHole');
  Fix: Add semicolon

Line 21787: Missing semicolon
  Content: const elapsed = Math.floor((new Date() - this.startTime) / 1000);
  Fix: Add semicolon

Line 21788: Missing semicolon
  Content: const timeDisplay = this.formatTime(elapsed);
  Fix: Add semicolon

Line 21791: Missing semicolon
  Content: const timeElements = document.querySelectorAll('#caddie-tracking .font-bold.text-blue-900');
  Fix: Add semicolon

Line 21798: Missing semicolon
  Content: const trackingButton = document.querySelector('#caddie-tracking button[onclick="startLiveTracking()"
  Fix: Add semicolon

Line 21800: Missing semicolon
  Content: const buttonText = trackingButton.querySelector('span:not(.material-symbols-outlined)');
  Fix: Add semicolon

Line 21819: Missing semicolon
  Content: const elapsed = Math.floor((new Date() - this.startTime) / 1000);
  Fix: Add semicolon

Line 21820: Missing semicolon
  Content: const timeDisplay = this.formatTime(elapsed);
  Fix: Add semicolon

Line 21822: Missing semicolon
  Content: const mainTimeElement = document.getElementById('roundTimeTracking');
  Fix: Add semicolon

Line 21833: Missing semicolon
  Content: const hours = Math.floor(seconds / 3600);
  Fix: Add semicolon

Line 21834: Missing semicolon
  Content: const minutes = Math.floor((seconds % 3600) / 60);
  Fix: Add semicolon

Line 21842: Missing semicolon
  Content: const roundData = {
  Fix: Add semicolon

Line 21853: Missing semicolon
  Content: const savedRounds = JSON.parse(localStorage.getItem('caddyCompletedRounds') || '[]');
  Fix: Add semicolon

Line 21861: Missing semicolon
  Content: const wasTracking = localStorage.getItem('caddyTrackingActive');
  Fix: Add semicolon

Line 21863: Missing semicolon
  Content: const startTimeStr = localStorage.getItem('caddyTrackingStartTime');
  Fix: Add semicolon

Line 21897: Missing semicolon
  Content: const accuracy = Math.round(position.coords.accuracy);
  Fix: Add semicolon

Line 21901: Missing semicolon
  Content: const locationStatus = document.getElementById('locationStatus');
  Fix: Add semicolon

Line 21912: Missing semicolon
  Content: const errorMessage = error.code === 1 ? 'Please allow location access' :
  Fix: Add semicolon

Line 21916: Missing semicolon
  Content: const locationStatus = document.getElementById('locationStatus');
  Fix: Add semicolon

Line 21935: Missing semicolon
  Content: const trackingTabButton = document.querySelector('button[onclick*="tracking"]');
  Fix: Add semicolon

Line 21947: Missing semicolon
  Content: const CaddyTrackingSync = {
  Fix: Add semicolon

Line 21996: Missing semicolon
  Content: const trackingNotStarted = document.getElementById('trackingNotStarted');
  Fix: Add semicolon

Line 21997: Missing semicolon
  Content: const trackingActive = document.getElementById('trackingActive');
  Fix: Add semicolon

Line 21998: Missing semicolon
  Content: const trackingCompleted = document.getElementById('trackingCompleted');
  Fix: Add semicolon

Line 22006: Missing semicolon
  Content: const currentHoleElement = document.getElementById('currentHoleTracking');
  Fix: Add semicolon

Line 22007: Missing semicolon
  Content: const roundTimeElement = document.getElementById('roundTimeTracking');
  Fix: Add semicolon

Line 22008: Missing semicolon
  Content: const locationStatusElement = document.getElementById('locationStatus');
  Fix: Add semicolon

Line 22033: Missing semicolon
  Content: const elapsed = new Date() - this.currentState.startTime;
  Fix: Add semicolon

Line 22034: Missing semicolon
  Content: const hours = Math.floor(elapsed / (1000 * 60 * 60));
  Fix: Add semicolon

Line 22035: Missing semicolon
  Content: const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));
  Fix: Add semicolon

Line 22039: Missing semicolon
  Content: const roundTimeElement = document.getElementById('roundTimeTracking');
  Fix: Add semicolon

Line 22046: Missing semicolon
  Content: const saved = localStorage.getItem('caddy_tracking_state');
  Fix: Add semicolon

Line 22074: Missing semicolon
  Content: const CaddyEarningsSystem = {
  Fix: Add semicolon

Line 22078: Missing semicolon
  Content: const form = document.getElementById('earningsForm');
  Fix: Add semicolon

Line 22082: Missing semicolon
  Content: const today = new Date().toISOString().split('T')[0];
  Fix: Add semicolon

Line 22085: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 22086: Missing semicolon
  Content: const timeString = now.getHours().toString().padStart(2, '0') + ':' +
  Fix: Add semicolon

Line 22097: Missing semicolon
  Content: const clientName = document.getElementById('clientName').value;
  Fix: Add semicolon

Line 22098: Missing semicolon
  Content: const serviceType = document.getElementById('serviceType').value;
  Fix: Add semicolon

Line 22099: Missing semicolon
  Content: const baseFee = parseFloat(document.getElementById('baseFee').value) || 0;
  Fix: Add semicolon

Line 22100: Missing semicolon
  Content: const tipAmount = parseFloat(document.getElementById('tipAmount').value) || 0;
  Fix: Add semicolon

Line 22101: Missing semicolon
  Content: const date = document.getElementById('earningsDate').value;
  Fix: Add semicolon

Line 22102: Missing semicolon
  Content: const time = document.getElementById('earningsTime').value;
  Fix: Add semicolon

Line 22103: Missing semicolon
  Content: const notes = document.getElementById('earningsNotes').value;
  Fix: Add semicolon

Line 22105: Missing semicolon
  Content: const newEarning = {
  Fix: Add semicolon

Line 22141: Missing semicolon
  Content: const currentMonth = new Date().getMonth();
  Fix: Add semicolon

Line 22142: Missing semicolon
  Content: const currentYear = new Date().getFullYear();
  Fix: Add semicolon

Line 22144: Missing semicolon
  Content: const monthlyEarnings = this.earnings.filter(earning => {
  Fix: Add semicolon

Line 22145: Missing semicolon
  Content: const earningDate = new Date(earning.date);
  Fix: Add semicolon

Line 22151: Missing semicolon
  Content: const monthlyEarningsDisplay = document.querySelector('.premium-gradient .text-sm.md\\:text-lg.font-
  Fix: Add semicolon

Line 22189: Missing semicolon
  Content: const user = { id: 'john_mitchell', name: 'John Mitchell', role: 'golfer' };
  Fix: Add semicolon

Line 22210: Missing semicolon
  Content: const impl = resolveLoginImpl();
  Fix: Add semicolon

Line 22218: Missing semicolon
  Content: const btn = document.getElementById('loginBtn') || document.getElementById('login');
  Fix: Add semicolon

Line 22226: Missing semicolon
  Content: const USERS_KEY = 'mcipro_users';
  Fix: Add semicolon

Line 22227: Missing semicolon
  Content: const CURRENT_USER_KEY = 'mcipro_current_user';
  Fix: Add semicolon

Line 22229: Missing semicolon
  Content: const Auth = {
  Fix: Add semicolon

Line 22236: Missing semicolon
  Content: let local = [];
  Fix: Add semicolon

Line 22240: Missing semicolon
  Content: let cloud = [];
  Fix: Add semicolon

Line 22243: Missing semicolon
  Content: const server = (typeof SimpleCloudSync.loadFromCloud === 'function')
  Fix: Add semicolon

Line 22257: Missing semicolon
  Content: const byEmail = new Map();
  Fix: Add semicolon

Line 22258: Missing semicolon
  Content: const add = (u) => {
  Fix: Add semicolon

Line 22260: Missing semicolon
  Content: const emailLower = (u.email || u.username || '').trim().toLowerCase();
  Fix: Add semicolon

Line 22262: Missing semicolon
  Content: const prev = byEmail.get(emailLower) || {};
  Fix: Add semicolon

Line 22286: Missing semicolon
  Content: const s = (emailLower||'') + ':' + (pw||'');
  Fix: Add semicolon

Line 22287: Missing semicolon
  Content: let h = 0; for (let i=0;i<s.length;i++){ h = (h*31 + s.charCodeAt(i))|0; }
  Fix: Add semicolon

Line 22292: Missing semicolon
  Content: const emailLower = (user.emailLower || user.email || user.username || '').toLowerCase();
  Fix: Add semicolon

Line 22309: Missing semicolon
  Content: const email = (emailOrRole || document.getElementById('loginEmail')?.value || '').trim();
  Fix: Add semicolon

Line 22310: Missing semicolon
  Content: const password = (pw || document.getElementById('loginPassword')?.value || '').trim();
  Fix: Add semicolon

Line 22314: Missing semicolon
  Content: const emailLower = email.toLowerCase();
  Fix: Add semicolon

Line 22315: Missing semicolon
  Content: const users = await this.loadUsers();
  Fix: Add semicolon

Line 22317: Missing semicolon
  Content: const u = users.find(x => (x.emailLower || (x.email||x.username||'').toLowerCase()) === emailLower);
  Fix: Add semicolon

Line 22322: Missing semicolon
  Content: const current = {
  Fix: Add semicolon

Line 22333: Missing semicolon
  Content: const dashboardMap = {
  Fix: Add semicolon

Line 22340: Missing semicolon
  Content: const to = dashboardMap[current.role] || 'golferDashboard';
  Fix: Add semicolon

Line 22353: Missing semicolon
  Content: const emailLower = email.toLowerCase();
  Fix: Add semicolon

Line 22354: Missing semicolon
  Content: const users = await this.loadUsers();
  Fix: Add semicolon

Line 22358: Missing semicolon
  Content: const user = {
  Fix: Add semicolon

Line 22377: Missing semicolon
  Content: const result = await Auth.login(emailOrRole, pw);
  Fix: Add semicolon

Line 22400: Missing semicolon
  Content: const SCHEDULE_KEY = 'mcipro_schedule_items';     // canonical
  Fix: Add semicolon

Line 22401: Missing semicolon
  Content: const LEGACY_KEY   = 'mcipro_schedule';           // sometimes { items: [...] }
  Fix: Add semicolon

Line 22402: Missing semicolon
  Content: const BOOKING_KEY  = 'mcipro_bookings';           // existing
  Fix: Add semicolon

Line 22403: Missing semicolon
  Content: const PROFILE_KEY  = 'mcipro_user_profiles';      // existing
  Fix: Add semicolon

Line 22407: Missing semicolon
  Content: try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) : fallback; }
  Fix: Add semicolon

Line 22417: Missing semicolon
  Content: const legacy = readJSON(LEGACY_KEY, null);
  Fix: Add semicolon

Line 22418: Missing semicolon
  Content: const canonical = readJSON(SCHEDULE_KEY, null);
  Fix: Add semicolon

Line 22420: Missing semicolon
  Content: let items = [];
  Fix: Add semicolon

Line 22445: Missing semicolon
  Content: const d = new Date(ts);
  Fix: Add semicolon

Line 22454: Missing semicolon
  Content: const _add = BookingManager.addBooking.bind(BookingManager);
  Fix: Add semicolon

Line 22458: Missing semicolon
  Content: const g = data.groupId || [
  Fix: Add semicolon

Line 22465: Missing semicolon
  Content: const type = (data.type || data.bookingType || 'teeTime');
  Fix: Add semicolon

Line 22480: Missing semicolon
  Content: const list = readJSON(BOOKING_KEY, []);
  Fix: Add semicolon

Line 22481: Missing semicolon
  Content: const idx = list.findIndex(b => b && b.groupId === g && (b.type || b.bookingType) === type);
  Fix: Add semicolon

Line 22497: Missing semicolon
  Content: const raw = readJSON(SCHEDULE_KEY, []);
  Fix: Add semicolon

Line 22518: Missing semicolon
  Content: const _save = ScheduleSystem.saveToLocalStorage.bind(ScheduleSystem);
  Fix: Add semicolon

Line 22520: Missing semicolon
  Content: const items = ScheduleSystem._read(); // always array
  Fix: Add semicolon

Line 22528: Missing semicolon
  Content: const _update = ScheduleSystem.updateScheduleTab?.bind(ScheduleSystem);
  Fix: Add semicolon

Line 22530: Missing semicolon
  Content: const items = ScheduleSystem._read();
  Fix: Add semicolon

Line 22544: Missing semicolon
  Content: const _saveToCloud = SimpleCloudSync.saveToCloud?.bind(SimpleCloudSync);
  Fix: Add semicolon

Line 22548: Missing semicolon
  Content: const scheduleItems = readJSON(SCHEDULE_KEY, []);
  Fix: Add semicolon

Line 22549: Missing semicolon
  Content: const payload = (this && this._lastPayload) || {};
  Fix: Add semicolon

Line 22559: Missing semicolon
  Content: const _updateLocal = SimpleCloudSync.updateLocalStorageFromServer?.bind(SimpleCloudSync);
  Fix: Add semicolon

Line 22562: Missing semicolon
  Content: const items = Array.isArray(serverData?.scheduleItems) ? serverData.scheduleItems
  Fix: Add semicolon

Line 22594: Missing semicolon
  Content: const SKEY = 'mcipro_schedule_items';
  Fix: Add semicolon

Line 22595: Missing semicolon
  Content: const BKEY = 'mcipro_bookings';
  Fix: Add semicolon

Line 22597: Missing semicolon
  Content: function r(key, fb){ try{const x=localStorage.getItem(key);return x?JSON.parse(x):fb;}catch{return f
  Fix: Add semicolon

Line 22600: Missing semicolon
  Content: const d = new Date(ts);
  Fix: Add semicolon

Line 22607: Missing semicolon
  Content: const out = {...item};
  Fix: Add semicolon

Line 22609: Missing semicolon
  Content: const t = out.time || out.teeTime || out.startTime || out.timestamp || out.date;
  Fix: Add semicolon

Line 22610: Missing semicolon
  Content: const iso = canonISO(t) || t || new Date().toISOString();
  Fix: Add semicolon

Line 22634: Missing semicolon
  Content: const raw = r(SKEY, []);
  Fix: Add semicolon

Line 22635: Missing semicolon
  Content: const arr = Array.isArray(raw) ? raw : (raw && raw.items && Array.isArray(raw.items) ? raw.items : [
  Fix: Add semicolon

Line 22644: Missing semicolon
  Content: const bookings = r(BKEY, []);
  Fix: Add semicolon

Line 22645: Missing semicolon
  Content: const items = [];
  Fix: Add semicolon

Line 22648: Missing semicolon
  Content: const t = b.teeTime || b.time || b.startTime || b.timestamp || b.date;
  Fix: Add semicolon

Line 22649: Missing semicolon
  Content: const iso = canonISO(t) || t || new Date().toISOString();
  Fix: Add semicolon

Line 22650: Missing semicolon
  Content: const it = ensureScheduleShape({
  Fix: Add semicolon

Line 22674: Missing semicolon
  Content: const el = document.querySelector(s);
  Fix: Add semicolon

Line 22679: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 22680: Missing semicolon
  Content: const start = new Date(now); start.setDate(now.getDate() - now.getDay()); start.setHours(0,0,0,0);
  Fix: Add semicolon

Line 22681: Missing semicolon
  Content: const end = new Date(start); end.setDate(start.getDate()+7);
  Fix: Add semicolon

Line 22685: Missing semicolon
  Content: const items = readSchedule();
  Fix: Add semicolon

Line 22686: Missing semicolon
  Content: const now = Date.now();
  Fix: Add semicolon

Line 22687: Missing semicolon
  Content: const upcoming = items.filter(i => new Date(i.time||i.teeTime).getTime() >= now && (i.type==='teeTim
  Fix: Add semicolon

Line 22688: Missing semicolon
  Content: const thisWeek = items.filter(i => isSameWeek(new Date(i.time||i.teeTime)) && (i.type==='teeTime'||i
  Fix: Add semicolon

Line 22689: Missing semicolon
  Content: const caddies = items.filter(i => i.type==='caddie').length;
  Fix: Add semicolon

Line 22702: Missing semicolon
  Content: const _add = BookingManager.addBooking.bind(BookingManager);
  Fix: Add semicolon

Line 22704: Missing semicolon
  Content: const res = _add(data);
  Fix: Add semicolon

Line 22707: Missing semicolon
  Content: const sched = readSchedule();
  Fix: Add semicolon

Line 22708: Missing semicolon
  Content: const exists = sched.some(it => it.bookingId === data.id);
  Fix: Add semicolon

Line 22710: Missing semicolon
  Content: const t = data.teeTime || data.time || data.startTime || data.timestamp || data.date;
  Fix: Add semicolon

Line 22711: Missing semicolon
  Content: const iso = canonISO(t) || t || new Date().toISOString();
  Fix: Add semicolon

Line 22738: Missing semicolon
  Content: const _render = window.ScheduleSystem.renderScheduleList?.bind(window.ScheduleSystem);
  Fix: Add semicolon

Line 22742: Missing semicolon
  Content: const items = readSchedule();
  Fix: Add semicolon

Line 22759: Missing semicolon
  Content: const SKEY = 'mcipro_schedule_items';
  Fix: Add semicolon

Line 22760: Missing semicolon
  Content: const BKEY = 'mcipro_bookings';
  Fix: Add semicolon

Line 22764: Missing semicolon
  Content: const raw = JSON.parse(localStorage.getItem(SKEY) || '[]');
  Fix: Add semicolon

Line 22765: Missing semicolon
  Content: const items = Array.isArray(raw) ? raw : (raw?.items || []);
  Fix: Add semicolon

Line 22767: Missing semicolon
  Content: const t = i?.time || i?.teeTime || i?.startTime || i?.timestamp || i?.date;
  Fix: Add semicolon

Line 22768: Missing semicolon
  Content: const iso = t ? new Date(t).toISOString() : null;
  Fix: Add semicolon

Line 22776: Missing semicolon
  Content: const b = JSON.parse(localStorage.getItem(BKEY) || '[]');
  Fix: Add semicolon

Line 22778: Missing semicolon
  Content: const t = x?.teeTime || x?.time || x?.startTime || x?.timestamp || x?.date;
  Fix: Add semicolon

Line 22779: Missing semicolon
  Content: const iso = t ? new Date(t).toISOString() : null;
  Fix: Add semicolon

Line 22786: Missing semicolon
  Content: const now = new Date();
  Fix: Add semicolon

Line 22787: Missing semicolon
  Content: const start = new Date(now); start.setDate(now.getDate() - now.getDay()); start.setHours(0,0,0,0);
  Fix: Add semicolon

Line 22788: Missing semicolon
  Content: const end = new Date(start); end.setDate(start.getDate()+7);
  Fix: Add semicolon

Line 22793: Missing semicolon
  Content: let items = readSchedule();
  Fix: Add semicolon

Line 22796: Missing semicolon
  Content: const now = Date.now();
  Fix: Add semicolon

Line 22797: Missing semicolon
  Content: const upcoming = items.filter(i =>
  Fix: Add semicolon

Line 22802: Missing semicolon
  Content: const thisWeek = items.filter(i =>
  Fix: Add semicolon

Line 22807: Missing semicolon
  Content: const caddies = items.filter(i => i.type === 'caddie').length;
  Fix: Add semicolon

Line 22812: Missing semicolon
  Content: const el = document.getElementById(id) ||
  Fix: Add semicolon

Line 22838: Missing semicolon
  Content: const mo = new MutationObserver(function() { setTimeout(updateCounters, 50); });
  Fix: Add semicolon